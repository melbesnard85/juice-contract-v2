{
  "address": "0xC4D620E189b420249005FD38b22B1EA138cc0BeE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "permissionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "packed",
          "type": "uint256"
        }
      ],
      "name": "SetOperator",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_permissionIndex",
          "type": "uint256"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_permissionIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "hasPermissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permissionsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "domain",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "permissionIndexes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct OperatorData",
          "name": "_operatorData",
          "type": "tuple"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "domain",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "permissionIndexes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct OperatorData[]",
          "name": "_operatorData",
          "type": "tuple[]"
        }
      ],
      "name": "setOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4037d7ddc27a9538d3365b1460096419e5c0caecb2b79fd66426001856ffa814",
  "receipt": {
    "to": null,
    "from": "0x754F37225CE0E30639093Af47C16ef057B544b4f",
    "contractAddress": "0xC4D620E189b420249005FD38b22B1EA138cc0BeE",
    "transactionIndex": 57,
    "gasUsed": "605761",
    "logsBloom": "0x
    "blockHash": "0xb083e1ee15e7a5d9cebf515e7626948d6ee309c0450b9eab1317e8673064e6b2",
    "transactionHash": "0x4037d7ddc27a9538d3365b1460096419e5c0caecb2b79fd66426001856ffa814",
    "logs": [],
    "blockNumber": 9320463,
    "cumulativeGasUsed": "9679724",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "096d8193c9ef3fa94853075f8aa2d2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"permissionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packed\",\"type\":\"uint256\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_permissionIndex\",\"type\":\"uint256\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_permissionIndexes\",\"type\":\"uint256[]\"}],\"name\":\"hasPermissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"permissionIndexes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OperatorData\",\"name\":\"_operatorData\",\"type\":\"tuple\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"permissionIndexes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OperatorData[]\",\"name\":\"_operatorData\",\"type\":\"tuple[]\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasPermission(address,address,uint256,uint256)\":{\"params\":{\"_account\":\"The account that has given out permissions to the operator.\",\"_domain\":\"The domain that the operator has been given permissions to operate.\",\"_operator\":\"The operator to check.\",\"_permissionIndex\":\"The permission indexes to check for.\"},\"returns\":{\"_0\":\"Whether the operator has the specified permission.\"}},\"hasPermissions(address,address,uint256,uint256[])\":{\"params\":{\"_account\":\"The account that has given out permissions to the operator.\",\"_domain\":\"The domain that the operator has been given permissions to operate.\",\"_operator\":\"The operator to check.\",\"_permissionIndexes\":\"An array of permission indexes to check for.\"},\"returns\":{\"_0\":\"Whether the operator has all specified permissions.\"}},\"setOperator((address,uint256,uint256[]))\":{\"details\":\"Only an address can set its own operators._operatorData.operators The operators to whom permissions will be given._operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system._operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.\",\"params\":{\"_operatorData\":\"The data that specifies the params for the operator being set.\"}},\"setOperators((address,uint256,uint256[])[])\":{\"details\":\"Only an address can set its own operators._operatorData.operators The operators to whom permissions will be given._operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system._operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.\",\"params\":{\"_operatorData\":\"The data that specifies the params for each operator being set.\"}}},\"stateVariables\":{\"permissionsOf\":{\"details\":\"An account can give an operator permissions that only pertain to a specific domain. There is no domain with a value of 0 -- accounts can use the 0 domain to give an operator permissions to all domains on their behalf. [_operator][_account][_domain]\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasPermission(address,address,uint256,uint256)\":{\"notice\":\" Whether or not an operator has the permission to take a certain action pertaining to the specified domain.\"},\"hasPermissions(address,address,uint256,uint256[])\":{\"notice\":\" Whether or not an operator has the permission to take certain actions pertaining to the specified domain.\"},\"permissionsOf(address,address,uint256)\":{\"notice\":\"The permissions that an operator has to operate on a specific domain.\"},\"setOperator((address,uint256,uint256[]))\":{\"notice\":\"Sets permissions for an operators.\"},\"setOperators((address,uint256,uint256[])[])\":{\"notice\":\"Sets permissions for many operators.\"}},\"notice\":\"Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific actions throughout the Juicebox ecosystem on their behalf.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBOperatorStore.sol\":\"JBOperatorStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/v2/JBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './interfaces/IJBOperatorStore.sol';\\n\\n/** \\n  @notice\\n  Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific actions throughout the Juicebox ecosystem on their behalf.\\n*/\\ncontract JBOperatorStore is IJBOperatorStore {\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The permissions that an operator has to operate on a specific domain.\\n    \\n    @dev\\n    An account can give an operator permissions that only pertain to a specific domain.\\n    There is no domain with a value of 0 -- accounts can use the 0 domain to give an operator\\n    permissions to all domains on their behalf.\\n\\n    [_operator][_account][_domain]\\n  */\\n  mapping(address => mapping(address => mapping(uint256 => uint256))) public override permissionsOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Whether or not an operator has the permission to take a certain action pertaining to the specified domain.\\n\\n    @param _operator The operator to check.\\n    @param _account The account that has given out permissions to the operator.\\n    @param _domain The domain that the operator has been given permissions to operate.\\n    @param _permissionIndex The permission indexes to check for.\\n\\n    @return Whether the operator has the specified permission.\\n  */\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view override returns (bool) {\\n    require(_permissionIndex <= 255, '0x00: INDEX_OUT_OF_BOUNDS');\\n    return (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 1);\\n  }\\n\\n  /** \\n    @notice \\n    Whether or not an operator has the permission to take certain actions pertaining to the specified domain.\\n\\n    @param _operator The operator to check.\\n    @param _account The account that has given out permissions to the operator.\\n    @param _domain The domain that the operator has been given permissions to operate.\\n    @param _permissionIndexes An array of permission indexes to check for.\\n\\n    @return Whether the operator has all specified permissions.\\n  */\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view override returns (bool) {\\n    for (uint256 _i = 0; _i < _permissionIndexes.length; _i++) {\\n      uint256 _permissionIndex = _permissionIndexes[_i];\\n\\n      require(_permissionIndex <= 255, '0x01: INDEX_OUT_OF_BOUNDS');\\n\\n      if (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 0)\\n        return false;\\n    }\\n    return true;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Sets permissions for an operators.\\n\\n    @dev\\n    Only an address can set its own operators.\\n\\n    @param _operatorData The data that specifies the params for the operator being set.\\n      @dev _operatorData.operators The operators to whom permissions will be given.\\n      @dev _operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system.\\n      @dev _operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.\\n  */\\n  function setOperator(OperatorData calldata _operatorData) external override {\\n    // Pack the indexes into a uint256.\\n    uint256 _packed = _packedPermissions(_operatorData.permissionIndexes);\\n\\n    // Store the new value.\\n    permissionsOf[_operatorData.operator][msg.sender][_operatorData.domain] = _packed;\\n\\n    emit SetOperator(\\n      _operatorData.operator,\\n      msg.sender,\\n      _operatorData.domain,\\n      _operatorData.permissionIndexes,\\n      _packed\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Sets permissions for many operators.\\n\\n    @dev\\n    Only an address can set its own operators.\\n\\n    @param _operatorData The data that specifies the params for each operator being set.\\n      @dev _operatorData.operators The operators to whom permissions will be given.\\n      @dev _operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system.\\n      @dev _operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.\\n  */\\n  function setOperators(OperatorData[] calldata _operatorData) external override {\\n    for (uint256 _i = 0; _i < _operatorData.length; _i++) {\\n      // Pack the indexes into a uint256.\\n      uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes);\\n\\n      // Store the new value.\\n      permissionsOf[_operatorData[_i].operator][msg.sender][_operatorData[_i].domain] = _packed;\\n\\n      emit SetOperator(\\n        _operatorData[_i].operator,\\n        msg.sender,\\n        _operatorData[_i].domain,\\n        _operatorData[_i].permissionIndexes,\\n        _packed\\n      );\\n    }\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Converts an array of permission indexes to a packed uint256.\\n\\n    @param _indexes The indexes of the permissions to pack.\\n\\n    @return packed The packed result.\\n  */\\n  function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {\\n    for (uint256 _i = 0; _i < _indexes.length; _i++) {\\n      uint256 _index = _indexes[_i];\\n      require(_index <= 255, '0x02: INDEX_OUT_OF_BOUNDS');\\n      // Turn the bit at the index on.\\n      packed |= 1 << _index;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfaa593d81da6330a266205d62f5620030780fa7a96d498edd9875e952e3925a7\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct OperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(OperatorData calldata _operatorData) external;\\n\\n  function setOperators(OperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0xcd7a7c0280e682eab835c2b716f5195ede3cc1358725470b0252d3e1ad49fa41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a08806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806380deb2301161005057806380deb230146100a95780638d5f697f146100e7578063c161c93f146100fa57600080fd5b80630f5932f01461006c578063529cdd2e14610094575b600080fd5b61007f61007a366004610710565b61010d565b60405190151581526020015b60405180910390f35b6100a76100a2366004610803565b610215565b005b6100d96100b73660046106d4565b6000602081815293815260408082208552928152828120909352825290205481565b60405190815260200161008b565b6100a76100f53660046107c1565b6102f4565b61007f61010836600461077f565b6104d0565b6000805b8281101561020657600084848381811061012d5761012d6109a3565b90506020020135905060ff8111156101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307830313a20494e4445585f4f55545f4f465f424f554e44530000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff888116600090815260208181526040808320938b16835292815282822089835290522054811c6001166101f35760009250505061020c565b50806101fe81610943565b915050610111565b50600190505b95945050505050565b600061022c610227604084018461089d565b610587565b90508060008061023f60208601866106b2565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120338083529084528282208785018035808552919095529290912093909355919061029490856106b2565b73ffffffffffffffffffffffffffffffffffffffff167f9dee2ffb464e2d0198cd20321be1ae3f79ed49f7ed4abfaa7ee4fe982bbeb3206102d8604087018761089d565b866040516102e89392919061083e565b60405180910390a45050565b60005b818110156104cb576000610336848484818110610316576103166109a3565b90506020028101906103289190610905565b61022790604081019061089d565b90508060008086868681811061034e5761034e6109a3565b90506020028101906103609190610905565b61036e9060208101906106b2565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081203382529092528120908686868181106103b4576103b46109a3565b90506020028101906103c69190610905565b602001358152602001908152602001600020819055508383838181106103ee576103ee6109a3565b90506020028101906104009190610905565b6020013533858585818110610417576104176109a3565b90506020028101906104299190610905565b6104379060208101906106b2565b73ffffffffffffffffffffffffffffffffffffffff167f9dee2ffb464e2d0198cd20321be1ae3f79ed49f7ed4abfaa7ee4fe982bbeb320878787818110610480576104806109a3565b90506020028101906104929190610905565b6104a090604081019061089d565b866040516104b09392919061083e565b60405180910390a450806104c381610943565b9150506102f7565b505050565b600060ff82111561053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307830303a20494e4445585f4f55545f4f465f424f554e445300000000000000604482015260640161019d565b5073ffffffffffffffffffffffffffffffffffffffff808516600090815260208181526040808320938716835292815282822085835290522054600190821c811614949350505050565b6000805b828110156106365760008484838181106105a7576105a76109a3565b90506020020135905060ff81111561061b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307830323a20494e4445585f4f55545f4f465f424f554e445300000000000000604482015260640161019d565b6001901b91909117908061062e81610943565b91505061058b565b5092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461066157600080fd5b919050565b60008083601f84011261067857600080fd5b50813567ffffffffffffffff81111561069057600080fd5b6020830191508360208260051b85010111156106ab57600080fd5b9250929050565b6000602082840312156106c457600080fd5b6106cd8261063d565b9392505050565b6000806000606084860312156106e957600080fd5b6106f28461063d565b92506107006020850161063d565b9150604084013590509250925092565b60008060008060006080868803121561072857600080fd5b6107318661063d565b945061073f6020870161063d565b935060408601359250606086013567ffffffffffffffff81111561076257600080fd5b61076e88828901610666565b969995985093965092949392505050565b6000806000806080858703121561079557600080fd5b61079e8561063d565b93506107ac6020860161063d565b93969395505050506040820135916060013590565b600080602083850312156107d457600080fd5b823567ffffffffffffffff8111156107eb57600080fd5b6107f785828601610666565b90969095509350505050565b60006020828403121561081557600080fd5b813567ffffffffffffffff81111561082c57600080fd5b8201606081850312156106cd57600080fd5b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561087757600080fd5b8360051b8086606085013760009083016060019081526020909201929092529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126108d257600080fd5b83018035915067ffffffffffffffff8211156108ed57600080fd5b6020019150600581901b36038213156106ab57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261093957600080fd5b9190910192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561099c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220362973862faecc63f9ae7ded90760da7b2a47724986e54bbc33c8f2017dd05fc64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806380deb2301161005057806380deb230146100a95780638d5f697f146100e7578063c161c93f146100fa57600080fd5b80630f5932f01461006c578063529cdd2e14610094575b600080fd5b61007f61007a366004610710565b61010d565b60405190151581526020015b60405180910390f35b6100a76100a2366004610803565b610215565b005b6100d96100b73660046106d4565b6000602081815293815260408082208552928152828120909352825290205481565b60405190815260200161008b565b6100a76100f53660046107c1565b6102f4565b61007f61010836600461077f565b6104d0565b6000805b8281101561020657600084848381811061012d5761012d6109a3565b90506020020135905060ff8111156101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307830313a20494e4445585f4f55545f4f465f424f554e44530000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff888116600090815260208181526040808320938b16835292815282822089835290522054811c6001166101f35760009250505061020c565b50806101fe81610943565b915050610111565b50600190505b95945050505050565b600061022c610227604084018461089d565b610587565b90508060008061023f60208601866106b2565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120338083529084528282208785018035808552919095529290912093909355919061029490856106b2565b73ffffffffffffffffffffffffffffffffffffffff167f9dee2ffb464e2d0198cd20321be1ae3f79ed49f7ed4abfaa7ee4fe982bbeb3206102d8604087018761089d565b866040516102e89392919061083e565b60405180910390a45050565b60005b818110156104cb576000610336848484818110610316576103166109a3565b90506020028101906103289190610905565b61022790604081019061089d565b90508060008086868681811061034e5761034e6109a3565b90506020028101906103609190610905565b61036e9060208101906106b2565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081203382529092528120908686868181106103b4576103b46109a3565b90506020028101906103c69190610905565b602001358152602001908152602001600020819055508383838181106103ee576103ee6109a3565b90506020028101906104009190610905565b6020013533858585818110610417576104176109a3565b90506020028101906104299190610905565b6104379060208101906106b2565b73ffffffffffffffffffffffffffffffffffffffff167f9dee2ffb464e2d0198cd20321be1ae3f79ed49f7ed4abfaa7ee4fe982bbeb320878787818110610480576104806109a3565b90506020028101906104929190610905565b6104a090604081019061089d565b866040516104b09392919061083e565b60405180910390a450806104c381610943565b9150506102f7565b505050565b600060ff82111561053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307830303a20494e4445585f4f55545f4f465f424f554e445300000000000000604482015260640161019d565b5073ffffffffffffffffffffffffffffffffffffffff808516600090815260208181526040808320938716835292815282822085835290522054600190821c811614949350505050565b6000805b828110156106365760008484838181106105a7576105a76109a3565b90506020020135905060ff81111561061b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307830323a20494e4445585f4f55545f4f465f424f554e445300000000000000604482015260640161019d565b6001901b91909117908061062e81610943565b91505061058b565b5092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461066157600080fd5b919050565b60008083601f84011261067857600080fd5b50813567ffffffffffffffff81111561069057600080fd5b6020830191508360208260051b85010111156106ab57600080fd5b9250929050565b6000602082840312156106c457600080fd5b6106cd8261063d565b9392505050565b6000806000606084860312156106e957600080fd5b6106f28461063d565b92506107006020850161063d565b9150604084013590509250925092565b60008060008060006080868803121561072857600080fd5b6107318661063d565b945061073f6020870161063d565b935060408601359250606086013567ffffffffffffffff81111561076257600080fd5b61076e88828901610666565b969995985093965092949392505050565b6000806000806080858703121561079557600080fd5b61079e8561063d565b93506107ac6020860161063d565b93969395505050506040820135916060013590565b600080602083850312156107d457600080fd5b823567ffffffffffffffff8111156107eb57600080fd5b6107f785828601610666565b90969095509350505050565b60006020828403121561081557600080fd5b813567ffffffffffffffff81111561082c57600080fd5b8201606081850312156106cd57600080fd5b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561087757600080fd5b8360051b8086606085013760009083016060019081526020909201929092529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126108d257600080fd5b83018035915067ffffffffffffffff8211156108ed57600080fd5b6020019150600581901b36038213156106ab57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261093957600080fd5b9190910192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561099c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220362973862faecc63f9ae7ded90760da7b2a47724986e54bbc33c8f2017dd05fc64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "hasPermission(address,address,uint256,uint256)": {
        "params": {
          "_account": "The account that has given out permissions to the operator.",
          "_domain": "The domain that the operator has been given permissions to operate.",
          "_operator": "The operator to check.",
          "_permissionIndex": "The permission indexes to check for."
        },
        "returns": {
          "_0": "Whether the operator has the specified permission."
        }
      },
      "hasPermissions(address,address,uint256,uint256[])": {
        "params": {
          "_account": "The account that has given out permissions to the operator.",
          "_domain": "The domain that the operator has been given permissions to operate.",
          "_operator": "The operator to check.",
          "_permissionIndexes": "An array of permission indexes to check for."
        },
        "returns": {
          "_0": "Whether the operator has all specified permissions."
        }
      },
      "setOperator((address,uint256,uint256[]))": {
        "details": "Only an address can set its own operators._operatorData.operators The operators to whom permissions will be given._operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system._operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.",
        "params": {
          "_operatorData": "The data that specifies the params for the operator being set."
        }
      },
      "setOperators((address,uint256,uint256[])[])": {
        "details": "Only an address can set its own operators._operatorData.operators The operators to whom permissions will be given._operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system._operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.",
        "params": {
          "_operatorData": "The data that specifies the params for each operator being set."
        }
      }
    },
    "stateVariables": {
      "permissionsOf": {
        "details": "An account can give an operator permissions that only pertain to a specific domain. There is no domain with a value of 0 -- accounts can use the 0 domain to give an operator permissions to all domains on their behalf. [_operator][_account][_domain]"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasPermission(address,address,uint256,uint256)": {
        "notice": " Whether or not an operator has the permission to take a certain action pertaining to the specified domain."
      },
      "hasPermissions(address,address,uint256,uint256[])": {
        "notice": " Whether or not an operator has the permission to take certain actions pertaining to the specified domain."
      },
      "permissionsOf(address,address,uint256)": {
        "notice": "The permissions that an operator has to operate on a specific domain."
      },
      "setOperator((address,uint256,uint256[]))": {
        "notice": "Sets permissions for an operators."
      },
      "setOperators((address,uint256,uint256[])[])": {
        "notice": "Sets permissions for many operators."
      }
    },
    "notice": "Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific actions throughout the Juicebox ecosystem on their behalf.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21174,
        "contract": "contracts/v2/JBOperatorStore.sol:JBOperatorStore",
        "label": "permissionsOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}