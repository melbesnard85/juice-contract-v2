{
  "address": "0x5b62ccB7fdA139185374c8f36FAa388c20E1387F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBSplitsStore",
          "name": "_splitsStore",
          "type": "address"
        },
        {
          "internalType": "contract JBETHPaymentTerminalStore",
          "name": "_store",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AddToBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectOwnerDistributionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributePayouts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "percent",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeToPayoutSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBTerminal",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFee[]",
          "name": "fees",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ProcessFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RedeemTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UseAllowance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "addToBalanceOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "distributePayoutsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "ethBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "heldFeesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            }
          ],
          "internalType": "struct JBFee[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBTerminal",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_delegateMetadata",
          "type": "bytes"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "processFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_delegateMetadata",
          "type": "bytes"
        }
      ],
      "name": "redeemTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitsStore",
      "outputs": [
        {
          "internalType": "contract IJBSplitsStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "store",
      "outputs": [
        {
          "internalType": "contract JBETHPaymentTerminalStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "useAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xced84c5148410fe8288c91c3f6309f287497a7fd0ae934b849c8aa3154b64d14",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x5b62ccB7fdA139185374c8f36FAa388c20E1387F",
    "transactionIndex": 23,
    "gasUsed": "4108350",
    "logsBloom": "0x00000002000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800040000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000020000000000000000000000400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc0a4a1e8dc2e302230be8f6eee9da0b8c6783eb2c0c88e5aa5302abb66d67579",
    "transactionHash": "0xced84c5148410fe8288c91c3f6309f287497a7fd0ae934b849c8aa3154b64d14",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 9565191,
        "transactionHash": "0xced84c5148410fe8288c91c3f6309f287497a7fd0ae934b849c8aa3154b64d14",
        "address": "0x5b62ccB7fdA139185374c8f36FAa388c20E1387F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9be6df23c7f9caba3005da2fa2d8714d340d0af"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xc0a4a1e8dc2e302230be8f6eee9da0b8c6783eb2c0c88e5aa5302abb66d67579"
      }
    ],
    "blockNumber": 9565191,
    "cumulativeGasUsed": "9468943",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE05605882C3F34B4Ef3586D70dE294f3f9654Ee8",
    "0x9f0eC91d28fFc54874e9fF11A316Ba2537aCD72C",
    "0x21263a042aFE4bAE34F08Bb318056C181bD96D3b",
    "0x1246a50e3aDaF684Ac566f0c40816fF738F309B3",
    "0x7Cb86D43B665196BC719b6974D320bf674AFb395"
  ],
  "solcInputHash": "3b4710394790e6b2fbe3ff5eb3b8549b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"_splitsStore\",\"type\":\"address\"},{\"internalType\":\"contract JBETHPaymentTerminalStore\",\"name\":\"_store\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AddToBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectOwnerDistributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributePayouts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"percent\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeToPayoutSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBTerminal\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct JBFee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProcessFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UseAllowance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"addToBalanceOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"distributePayoutsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"heldFeesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"internalType\":\"struct JBFee[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBTerminal\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_delegateMetadata\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"processFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_delegateMetadata\",\"type\":\"bytes\"}],\"name\":\"redeemTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitsStore\",\"outputs\":[{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract JBETHPaymentTerminalStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"useAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\" A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time. Inherits from: IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\",\"kind\":\"dev\",\"methods\":{\"addToBalanceOf(uint256,string)\":{\"params\":{\"_memo\":\"A memo to pass along to the emitted event.\",\"_projectId\":\"The ID of the project to which the funds received belong.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\",\"_splitsStore\":\"A contract that stores splits for each project.\",\"_store\":\"A contract that stores the terminal's data.\"}},\"delegate()\":{\"returns\":{\"_0\":\"The delegate address.\"}},\"distributePayoutsOf(uint256,uint256,uint256,uint256,string)\":{\"details\":\"Payouts are sent to the preprogrammed splits. Anyone can distribute payouts on a project's behalf.\",\"params\":{\"_amount\":\"The amount being distributed.\",\"_currency\":\"The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.\",\"_minReturnedWei\":\"The minimum number of wei that the amount should be valued at.\",\"_projectId\":\"The ID of the project having its payouts distributed.\"},\"returns\":{\"_0\":\"The ID of the funding cycle during which the distribution was made.\"}},\"ethBalanceOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to which the balance belongs.\"},\"returns\":{\"_0\":\"The ETH balance.\"}},\"heldFeesOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project for which fees are being held.\"},\"returns\":{\"_0\":\"An array of fees that are being held.\"}},\"migrate(uint256,address)\":{\"details\":\"Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_projectId\":\"The ID of the project being migrated.\",\"_to\":\"The terminal contract that will gain the project's funds.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pay(uint256,address,uint256,bool,string,bytes)\":{\"details\":\"The msg.value is the amount of the contribution in wei.\",\"params\":{\"_beneficiary\":\"The address to mint tokens for and pass along to the funding cycle's data source and delegate.\",\"_delegateMetadata\":\"Bytes to send along to the delegate, if one is provided.\",\"_memo\":\"A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\",\"_minReturnedTokens\":\"The minimum number of tokens expected in return.\",\"_preferClaimedTokens\":\"A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\",\"_projectId\":\"The ID of the project being paid.\"},\"returns\":{\"_0\":\"The number of the funding cycle that the payment was made during.\"}},\"processFees(uint256)\":{\"details\":\"Only a project owner, an operator, or the contract's owner can process held fees.\",\"params\":{\"_projectId\":\"The ID of the project whos held fees should be processed.\"}},\"redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)\":{\"details\":\"Only a token's holder or a designated operator can redeem it.\",\"params\":{\"_beneficiary\":\"The address to send the ETH to. Send the address this contract to burn the count.\",\"_delegateMetadata\":\"Bytes to send along to the delegate, if one is provided.\",\"_holder\":\"The account to redeem tokens for.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_minReturnedWei\":\"The minimum amount of Wei expected in return.\",\"_projectId\":\"The ID of the project to which the tokens being redeemed belong.\",\"_tokenCount\":\"The number of tokens to redeem.\"},\"returns\":{\"claimAmount\":\"The amount of ETH that the tokens were redeemed for, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useAllowanceOf(uint256,uint256,uint256,uint256,address)\":{\"details\":\" Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_amount\":\"The amount of the allowance to use.\",\"_beneficiary\":\"The address to send the funds to.\",\"_projectId\":\"The ID of the project to use the allowance of.\"},\"returns\":{\"_0\":\"The ID of the funding cycle during which the allowance was use.\"}}},\"stateVariables\":{\"token\":{\"details\":\"ETH is represented as address 0x0000000000000000000000000000000000042069.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addToBalanceOf(uint256,string)\":{\"notice\":\"Receives funds belonging to the specified project.\"},\"delegate()\":{\"notice\":\"An address that serves as this terminal's delegate when making requests to juicebox ecosystem contracts.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"distributePayoutsOf(uint256,uint256,uint256,uint256,string)\":{\"notice\":\" Distributes payouts for a project according to the constraints of its current funding cycle.\"},\"ethBalanceOf(uint256)\":{\"notice\":\" The ETH balance that this terminal holds for each project.\"},\"heldFeesOf(uint256)\":{\"notice\":\" The fees that are currently being held to be processed later for each project.\"},\"migrate(uint256,address)\":{\"notice\":\"Allows a project owner to migrate its funds and operations to a new terminal.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"pay(uint256,address,uint256,bool,string,bytes)\":{\"notice\":\"Contribute ETH to a project.\"},\"processFees(uint256)\":{\"notice\":\"Process any fees that are being held for the project.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)\":{\"notice\":\"Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source.\"},\"splitsStore()\":{\"notice\":\"The contract that stores splits for each project.\"},\"store()\":{\"notice\":\" The contract that stores and manages the terminal's data.\"},\"token()\":{\"notice\":\" The token that this terminal accepts. \"},\"useAllowanceOf(uint256,uint256,uint256,uint256,address)\":{\"notice\":\" Allows a project to send funds from its overflow up to the preconfigured allowance.\"}},\"notice\":\"This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBETHPaymentTerminal.sol\":\"JBETHPaymentTerminal\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"@paulrberg/contracts/math/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\",\"keccak256\":\"0xcf4e9eaa70b33ae4e949fb9c48ad13737dd807030e5555aca515dc555e10c9e4\",\"license\":\"UNLICENSED\"},\"contracts/v2/JBETHPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\nimport './JBETHPaymentTerminalStore.sol';\\n\\n// Inheritance\\nimport './interfaces/IJBETHPaymentTerminal.sol';\\nimport './interfaces/IJBTerminal.sol';\\nimport './interfaces/IJBVault.sol';\\nimport './abstract/JBOperatable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/**\\n  @notice\\n  This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\\n\\n  @dev \\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time.\\n\\n  Inherits from:\\n\\n  IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules.\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\ncontract JBETHPaymentTerminal is\\n  IJBETHPaymentTerminal,\\n  IJBTerminal,\\n  JBOperatable,\\n  Ownable,\\n  ReentrancyGuard\\n{\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored constants -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Fees that are being held to be processed later.\\n\\n    _projectId The ID of the project for which fees are being held.\\n  */\\n  mapping(uint256 => JBFee[]) private _heldFeesOf;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /** \\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /** \\n    @notice\\n    The contract that stores splits for each project.\\n  */\\n  IJBSplitsStore public immutable override splitsStore;\\n\\n  /**\\n    @notice \\n    The contract that stores and manages the terminal's data.\\n  */\\n  JBETHPaymentTerminalStore public immutable store;\\n\\n  /** \\n    @notice \\n    The token that this terminal accepts. \\n\\n    @dev\\n    ETH is represented as address 0x0000000000000000000000000000000000042069.\\n  */\\n  address public immutable override token = 0x0000000000000000000000000000000000042069;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The ETH balance that this terminal holds for each project.\\n\\n    @param _projectId The ID of the project to which the balance belongs.\\n\\n    @return The ETH balance.\\n  */\\n  function ethBalanceOf(uint256 _projectId) external view override returns (uint256) {\\n    // The store's balance is already in ETH.\\n    return store.balanceOf(_projectId);\\n  }\\n\\n  /** \\n    @notice \\n    The fees that are currently being held to be processed later for each project.\\n\\n    @param _projectId The ID of the project for which fees are being held.\\n\\n    @return An array of fees that are being held.\\n  */\\n  function heldFeesOf(uint256 _projectId) external view override returns (JBFee[] memory) {\\n    return _heldFeesOf[_projectId];\\n  }\\n\\n  /** \\n    @notice\\n    An address that serves as this terminal's delegate when making requests to juicebox ecosystem contracts.\\n\\n    @return The delegate address.\\n  */\\n  function delegate() external view override returns (address) {\\n    // The store is the delegate.\\n    return address(store);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _splitsStore A contract that stores splits for each project.\\n    @param _store A contract that stores the terminal's data.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBSplitsStore _splitsStore,\\n    JBETHPaymentTerminalStore _store\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n    splitsStore = _splitsStore;\\n\\n    // Claim the store so that it recognizes this terminal as the one that can access it.\\n    _store.claim();\\n\\n    store = _store;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Contribute ETH to a project.\\n\\n    @dev\\n    The msg.value is the amount of the contribution in wei.\\n\\n    @param _projectId The ID of the project being paid.\\n    @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\\n    @param _minReturnedTokens The minimum number of tokens expected in return.\\n    @param _preferClaimedTokens A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is provided.\\n\\n    @return The number of the funding cycle that the payment was made during.\\n  */\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable override returns (uint256) {\\n    return\\n      _pay(\\n        msg.value,\\n        _projectId,\\n        _beneficiary,\\n        _minReturnedTokens,\\n        _preferClaimedTokens,\\n        _memo,\\n        _delegateMetadata\\n      );\\n  }\\n\\n  /**\\n    @notice \\n    Distributes payouts for a project according to the constraints of its current funding cycle.\\n\\n    @dev\\n    Payouts are sent to the preprogrammed splits. \\n\\n    @dev\\n    Anyone can distribute payouts on a project's behalf.\\n\\n    @param _projectId The ID of the project having its payouts distributed.\\n    @param _amount The amount being distributed.\\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.\\n    @param _minReturnedWei The minimum number of wei that the amount should be valued at.\\n\\n    @return The ID of the funding cycle during which the distribution was made.\\n  */\\n  function distributePayoutsOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    string memory _memo\\n  ) external override nonReentrant returns (uint256) {\\n    // Record the withdrawal.\\n    (JBFundingCycle memory _fundingCycle, uint256 _withdrawnAmount) = store.recordWithdrawalFor(\\n      _projectId,\\n      _amount,\\n      _currency,\\n      _minReturnedWei\\n    );\\n\\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\\n    // and receive any extra distributable funds not allocated to payout splits.\\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\\n\\n    // Get a reference to the handle of the project paying the fee and sending payouts.\\n    bytes32 _handle = projects.handleOf(_projectId);\\n\\n    // Take a fee from the _withdrawnAmount, if needed.\\n    // The project's owner will be the beneficiary of the resulting minted tokens from platform project.\\n    // The platform project's ID is 1.\\n    uint256 _feeAmount = _fundingCycle.fee == 0 || _projectId == 1\\n      ? 0\\n      : _takeFeeFrom(\\n        _fundingCycle,\\n        _withdrawnAmount,\\n        _projectOwner,\\n        string(bytes.concat('Fee from @', _handle))\\n      );\\n\\n    // Payout to splits and get a reference to the leftover transfer amount after all mods have been paid.\\n    // The net transfer amount is the withdrawn amount minus the fee.\\n    uint256 _leftoverDistributionAmount = _distributeToPayoutSplitsOf(\\n      _fundingCycle,\\n      _withdrawnAmount - _feeAmount,\\n      string(bytes.concat('Payout from @', _handle))\\n    );\\n\\n    // Transfer any remaining balance to the project owner.\\n    if (_leftoverDistributionAmount > 0)\\n      Address.sendValue(_projectOwner, _leftoverDistributionAmount);\\n\\n    emit DistributePayouts(\\n      _fundingCycle.id,\\n      _projectId,\\n      _projectOwner,\\n      _amount,\\n      _withdrawnAmount,\\n      _feeAmount,\\n      _leftoverDistributionAmount,\\n      _memo,\\n      msg.sender\\n    );\\n\\n    return _fundingCycle.id;\\n  }\\n\\n  /**\\n    @notice \\n    Allows a project to send funds from its overflow up to the preconfigured allowance.\\n    \\n    @dev \\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount of the allowance to use.\\n    @param _beneficiary The address to send the funds to.\\n\\n    @return The ID of the funding cycle during which the allowance was use.\\n  */\\n  function useAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE)\\n    returns (uint256)\\n  {\\n    // Record the use of the allowance.\\n    (JBFundingCycle memory _fundingCycle, uint256 _withdrawnAmount) = store.recordUsedAllowanceOf(\\n      _projectId,\\n      this,\\n      _amount,\\n      _currency,\\n      _minReturnedWei\\n    );\\n\\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\\n    // and receive any extra distributable funds not allocated to payout splits.\\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\\n\\n    // Get a reference to the handle of the project paying the fee and sending payouts.\\n    bytes32 _handle = projects.handleOf(_projectId);\\n\\n    // Take a fee from the _withdrawnAmount, if needed.\\n    // The project's owner will be the beneficiary of the resulting minted tokens from platform project.\\n    // The platform project's ID is 1.\\n    uint256 _feeAmount = _fundingCycle.fee == 0 || _projectId == 1\\n      ? 0\\n      : _takeFeeFrom(\\n        _fundingCycle,\\n        _withdrawnAmount,\\n        _projectOwner,\\n        string(bytes.concat('Fee from @', _handle))\\n      );\\n\\n    // Transfer any remaining balance to the project owner.\\n    Address.sendValue(_beneficiary, _withdrawnAmount - _feeAmount);\\n\\n    emit UseAllowance(\\n      _fundingCycle.id,\\n      _fundingCycle.configured,\\n      _projectId,\\n      _beneficiary,\\n      _withdrawnAmount,\\n      _feeAmount,\\n      _withdrawnAmount - _feeAmount,\\n      msg.sender\\n    );\\n\\n    return _fundingCycle.id;\\n  }\\n\\n  /**\\n    @notice\\n    Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source.\\n\\n    @dev\\n    Only a token's holder or a designated operator can redeem it.\\n\\n    @param _holder The account to redeem tokens for.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of tokens to redeem.\\n    @param _minReturnedWei The minimum amount of Wei expected in return.\\n    @param _beneficiary The address to send the ETH to. Send the address this contract to burn the count.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is provided.\\n\\n    @return claimAmount The amount of ETH that the tokens were redeemed for, in wei.\\n  */\\n  function redeemTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(_holder, _projectId, JBOperations.REDEEM)\\n    returns (uint256 claimAmount)\\n  {\\n    // Can't send claimed funds to the zero address.\\n    require(_beneficiary != address(0), '0x4c: ZERO_ADDRESS');\\n\\n    // Keep a reference to the funding cycles during which the redemption is being made.\\n    JBFundingCycle memory _fundingCycle;\\n\\n    // Record the redemption.\\n    (_fundingCycle, claimAmount, _memo) = store.recordRedemptionFor(\\n      _holder,\\n      _projectId,\\n      _tokenCount,\\n      _minReturnedWei,\\n      _beneficiary,\\n      _memo,\\n      _delegateMetadata\\n    );\\n\\n    // Send the claimed funds to the beneficiary.\\n    if (claimAmount > 0) Address.sendValue(_beneficiary, claimAmount);\\n\\n    emit RedeemTokens(\\n      _fundingCycle.id,\\n      _projectId,\\n      _holder,\\n      _fundingCycle,\\n      _beneficiary,\\n      _tokenCount,\\n      claimAmount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project owner to migrate its funds and operations to a new terminal.\\n\\n    @dev\\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project being migrated.\\n    @param _to The terminal contract that will gain the project's funds.\\n  */\\n  function migrate(uint256 _projectId, IJBTerminal _to)\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_TERMINAL)\\n  {\\n    // The terminal being migrated to must accept the same token as this terminal.\\n    require(token == _to.token(), '0x4d: INCOMPATIBLE');\\n\\n    // Record the migration in the store.\\n    uint256 _balance = store.recordMigration(_projectId);\\n\\n    if (_balance > 0)\\n      // Withdraw the balance to transfer to the new terminal;\\n      _to.addToBalanceOf{value: _balance}(_projectId, '');\\n\\n    emit Migrate(_projectId, _to, _balance, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Receives funds belonging to the specified project.\\n\\n    @param _projectId The ID of the project to which the funds received belong.\\n    @param _memo A memo to pass along to the emitted event.\\n  */\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable override {\\n    // Amount must be greater than 0.\\n    require(msg.value > 0, '0x4c: NO_OP');\\n\\n    // Record the added funds.\\n    JBFundingCycle memory _fundingCycle = store.recordAddedBalanceFor(_projectId, msg.value);\\n\\n    // Refund any held fees to make sure the project doesn't pay double for funds going in and out of the protocol.\\n    _refundHeldFees(_projectId, msg.value, _fundingCycle.fee);\\n\\n    emit AddToBalance(_projectId, msg.value, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Process any fees that are being held for the project.\\n\\n    @dev\\n    Only a project owner, an operator, or the contract's owner can process held fees.\\n\\n    @param _projectId The ID of the project whos held fees should be processed.\\n  */\\n  function processFees(uint256 _projectId)\\n    external\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.PROCESS_FEES,\\n      msg.sender == owner()\\n    )\\n    nonReentrant\\n  {\\n    // Get a reference to the project's held fees.\\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\\n\\n    // Process each fee.\\n    for (uint256 _i = 0; _i < _heldFees.length; _i++)\\n      _takeFee(_heldFees[_i].amount, _heldFees[_i].beneficiary, _heldFees[_i].memo);\\n\\n    // Delete the held fee's now that they've been processed.\\n    delete _heldFeesOf[_projectId];\\n\\n    emit ProcessFees(_projectId, _heldFees, msg.sender);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Pays out splits for a project's funding cycle configuration.\\n\\n    @param _fundingCycle The funding cycle during which the distribution is being made.\\n    @param _amount The total amount being distributed.\\n    @param _memo A memo to pass along to the emitted events.\\n\\n    @return leftoverAmount If the leftover amount if the splits don't add up to 100%.\\n  */\\n  function _distributeToPayoutSplitsOf(\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount,\\n    string memory _memo\\n  ) private returns (uint256 leftoverAmount) {\\n    // Set the leftover amount to the initial amount.\\n    leftoverAmount = _amount;\\n\\n    // Get a reference to the project's payout splits.\\n    JBSplit[] memory _splits = splitsStore.splitsOf(\\n      _fundingCycle.projectId,\\n      _fundingCycle.configured,\\n      JBSplitsGroups.ETH_PAYOUT\\n    );\\n\\n    //Transfer between all splits.\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // Get a reference to the mod being iterated on.\\n      JBSplit memory _split = _splits[_i];\\n\\n      // The amount to send towards mods. Mods percents are out of 10000000.\\n      uint256 _payoutAmount = PRBMath.mulDiv(_amount, _split.percent, 10000000);\\n\\n      if (_payoutAmount > 0) {\\n        // Transfer ETH to the mod.\\n        // If there's an allocator set, transfer to its `allocate` function.\\n        if (_split.allocator != IJBSplitAllocator(address(0))) {\\n          _split.allocator.allocate{value: _payoutAmount}(\\n            _payoutAmount,\\n            JBSplitsGroups.ETH_PAYOUT,\\n            _fundingCycle.projectId,\\n            _split.projectId,\\n            _split.beneficiary,\\n            _split.preferClaimed\\n          );\\n          // Otherwise, if a project is specified, make a payment to it.\\n        } else if (_split.projectId != 0) {\\n          // Get a reference to the Juicebox terminal being used.\\n          IJBTerminal _terminal = directory.primaryTerminalOf(_split.projectId, token);\\n\\n          // The project must have a terminal to send funds to.\\n          require(_terminal != IJBTerminal(address(0)), '0x4d: BAD_SPLIT');\\n\\n          // Save gas if this contract is being used as the terminal.\\n          if (_terminal == this) {\\n            _pay(\\n              _payoutAmount,\\n              _split.projectId,\\n              _split.beneficiary,\\n              0,\\n              _split.preferClaimed,\\n              _memo,\\n              bytes('')\\n            );\\n          } else {\\n            _terminal.pay{value: _payoutAmount}(\\n              _split.projectId,\\n              _split.beneficiary,\\n              0,\\n              _split.preferClaimed,\\n              _memo,\\n              bytes('')\\n            );\\n          }\\n        } else {\\n          // Otherwise, send the funds directly to the beneficiary.\\n          Address.sendValue(_split.beneficiary, _payoutAmount);\\n        }\\n\\n        // Subtract from the amount to be sent to the beneficiary.\\n        leftoverAmount = leftoverAmount - _payoutAmount;\\n      }\\n\\n      emit DistributeToPayoutSplit(\\n        _fundingCycle.id,\\n        _fundingCycle.projectId,\\n        _split,\\n        _payoutAmount,\\n        msg.sender\\n      );\\n    }\\n  }\\n\\n  /** \\n    @notice \\n    Takes a fee into the platform's project, which has an id of 1.\\n\\n    @param _fundingCycle The funding cycle during which the fee is being taken. \\n    @param _amount The amount to take a fee from.\\n    @param _beneficiary The address to print the platforms tokens for.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return feeAmount The amount of the fee taken.\\n  */\\n  function _takeFeeFrom(\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount,\\n    address _beneficiary,\\n    string memory _memo\\n  ) private returns (uint256 feeAmount) {\\n    // The amount of ETH from the _amount to pay as a fee.\\n    feeAmount = _amount - PRBMath.mulDiv(_amount, 200, _fundingCycle.fee + 200);\\n\\n    // Nothing to do if there's no fee to take.\\n    if (feeAmount == 0) return 0;\\n\\n    _fundingCycle.shouldHoldFees()\\n      ? _heldFeesOf[_fundingCycle.projectId].push(JBFee(feeAmount, _beneficiary, _memo)) // Take the fee.\\n      : _takeFee(feeAmount, _beneficiary, _memo);\\n  }\\n\\n  /** \\n    @notice \\n    Take a fee of the specified amount.\\n\\n    @param _amount The fee amount.\\n    @param _beneficiary The address to print the platforms tokens for.\\n    @param _memo A memo to pass along to the emitted event.\\n  */\\n  function _takeFee(\\n    uint256 _amount,\\n    address _beneficiary,\\n    string memory _memo\\n  ) private {\\n    // Get the terminal for the JuiceboxDAO project.\\n    IJBTerminal _terminal = directory.primaryTerminalOf(1, token);\\n\\n    // When processing the admin fee, save gas if the admin is using this contract as its terminal.\\n    _terminal == this // Use the local pay call.\\n      ? _pay(_amount, 1, _beneficiary, 0, false, _memo, bytes('')) // Use the external pay call of the correct terminal.\\n      : _terminal.pay{value: _amount}(1, _beneficiary, 0, false, _memo, bytes(''));\\n  }\\n\\n  /**\\n    @notice\\n    See the documentation for 'pay'.\\n  */\\n  function _pay(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  ) private returns (uint256) {\\n    // Cant send tokens to the zero address.\\n    require(_beneficiary != address(0), '0x4e: ZERO_ADDRESS');\\n\\n    JBFundingCycle memory _fundingCycle;\\n    uint256 _weight;\\n    uint256 _tokenCount;\\n\\n    // Record the payment.\\n    (_fundingCycle, _weight, _tokenCount, _memo) = store.recordPaymentFrom(\\n      msg.sender,\\n      _amount,\\n      _projectId,\\n      (_preferClaimedTokens ? 1 : 0) | uint160(_beneficiary),\\n      _minReturnedTokens,\\n      _memo,\\n      _delegateMetadata\\n    );\\n\\n    emit Pay(\\n      _fundingCycle.id,\\n      _projectId,\\n      _beneficiary,\\n      _fundingCycle,\\n      _amount,\\n      _weight,\\n      _tokenCount,\\n      _memo,\\n      msg.sender\\n    );\\n\\n    return _fundingCycle.id;\\n  }\\n\\n  /** \\n    @notice\\n    Refund fees based on the specified amount.\\n\\n    @param _projectId The project for which fees are being refunded.\\n    @param _amount The amount to base the refund on.\\n    @param _percent The current fee percent to issue a refund based on.\\n  */\\n  function _refundHeldFees(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _percent\\n  ) private {\\n    // The amount of fees that were taken from an original payout to yield the provided amount.\\n    uint256 _refundAmount = PRBMath.mulDiv(_amount, _percent + 200, 200) - _amount;\\n\\n    // Get a reference to the project's held fees.\\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\\n\\n    // Delete the current held fees.\\n    delete _heldFeesOf[_projectId];\\n\\n    // Process each fee.\\n    for (uint256 _i = 0; _i < _heldFees.length; _i++) {\\n      if (_refundAmount == 0) {\\n        _heldFeesOf[_projectId].push(_heldFees[_i]);\\n      } else if (_refundAmount >= _heldFees[_i].amount) {\\n        _refundAmount = _refundAmount - _heldFees[_i].amount;\\n      } else {\\n        _heldFeesOf[_projectId].push(\\n          JBFee(_heldFees[_i].amount - _refundAmount, _heldFees[_i].beneficiary, _heldFees[_i].memo)\\n        );\\n        _refundAmount = 0;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xae29a1f7de137a483d14bcfc5f2c49b90a35fd4fe94b4612df13d0235464b1a7\",\"license\":\"MIT\"},\"contracts/v2/JBETHPaymentTerminalStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBTokenStore.sol';\\n\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\n/**\\n  @notice\\n  This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\\n\\n  @dev \\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time.\\n\\n  Inherits from:\\n\\n  IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules.\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\ncontract JBETHPaymentTerminalStore {\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  // A modifier only allowing the associated payment terminal to access the function.\\n  modifier onlyAssociatedPaymentTerminal() {\\n    require(msg.sender == terminal, '0x3a: UNAUTHORIZED');\\n    _;\\n  }\\n\\n  event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data);\\n\\n  event DelegateDidRedeem(IJBRedemptionDelegate indexed delegate, JBDidRedeemData data);\\n\\n  /** \\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable projects;\\n\\n  /** \\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable directory;\\n\\n  /** \\n    @notice \\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable fundingCycleStore;\\n\\n  /** \\n    @notice \\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable tokenStore;\\n\\n  /** \\n    @notice \\n    The contract that exposes price feeds.\\n  */\\n  IJBPrices public immutable prices;\\n\\n  /** \\n    @notice\\n    The associated payment terminal for which this contract stores data.\\n  */\\n  address public terminal;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The amount of ETH that each project has.\\n\\n    _projectId The ID of the project to get the balance of.\\n  */\\n  mapping(uint256 => uint256) public balanceOf;\\n\\n  /**\\n    @notice \\n    The amount of overflow that a project is allowed to tap into on-demand for the specified project configuration. \\n\\n    @dev \\n    Decreases as projects use of the allowance.\\n\\n    _projectId The ID of the project to get the current overflow allowance of.\\n    _configuration The configuration of the during which the allowance applies.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) public usedOverflowAllowanceOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount for a specified project.\\n\\n    @param _projectId The ID of the project to get overflow for.\\n\\n    @return The current amount of overflow that project has.\\n  */\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _overflowDuring(_fundingCycle);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflowed ETH that can be claimed by the specified number of tokens.\\n\\n    @dev If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\\n\\n    @param _projectId The ID of the project to get a claimable amount for.\\n    @param _tokenCount The number of tokens to make the calculation with. \\n\\n    @return The amount of overflowed ETH that can be claimed.\\n  */\\n  function claimableOverflowOf(uint256 _projectId, uint256 _tokenCount)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _claimableOverflowOf(fundingCycleStore.currentOf(_projectId), _tokenCount);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _prices A contract that exposes price feeds.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n  */\\n  constructor(\\n    IJBPrices _prices,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore\\n  ) {\\n    prices = _prices;\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Records newly contributed ETH to a project.\\n\\n    @dev\\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\\n\\n    @dev \\n    Only the associated payment terminal can record a payment.\\n\\n    @param _payer The original address that sent the payment to the terminal.\\n    @param _amount The amount that is being paid.\\n    @param _projectId The ID of the project being paid.\\n    @param _preferClaimedTokensAndBeneficiary Two properties are included in this packed uint256:\\n      The first bit contains the flag indicating whether the request prefers to issue tokens claimed as ERC-20s.\\n      The remaining bits contains the address that should receive benefits from the payment.\\n\\n      This design is necessary two prevent a \\\"Stack too deep\\\" compiler error that comes up if the variables are declared seperately.\\n    @param _minReturnedTokens The minimum number of tokens expected to be minted in return.\\n    @param _memo A memo that will be included in the published event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\\n\\n    @return fundingCycle The project's funding cycle during which payment was made.\\n    @return weight The weight according to which new token supply was minted.\\n    @return tokenCount The number of tokens that were minted.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordPaymentFrom(\\n    address _payer,\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _preferClaimedTokensAndBeneficiary,\\n    uint256 _minReturnedTokens,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 weight,\\n      uint256 tokenCount,\\n      string memory memo\\n    )\\n  {\\n    // Get a reference to the current funding cycle for the project.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The project must have a funding cycle configured.\\n    require(fundingCycle.number > 0, '0x3a: NOT_FOUND');\\n\\n    // Must not be paused.\\n    require(!fundingCycle.payPaused(), '0x3b: PAUSED');\\n\\n    // Save a reference to the delegate to use.\\n    IJBPayDelegate _delegate;\\n\\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\\n    if (fundingCycle.useDataSourceForPay()) {\\n      (weight, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().payParams(\\n        JBPayParamsData(\\n          _payer,\\n          _amount,\\n          fundingCycle.weight,\\n          fundingCycle.reservedRate(),\\n          address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\\n          _memo,\\n          _delegateMetadata\\n        )\\n      );\\n      // Otherwise use the funding cycle's weight\\n    } else {\\n      weight = fundingCycle.weight;\\n      memo = _memo;\\n    }\\n\\n    // Multiply the amount by the weight to determine the amount of tokens to mint.\\n    uint256 _weightedAmount = PRBMathUD60x18.mul(_amount, weight);\\n\\n    // Add the amount to the balance of the project if needed.\\n    if (_amount > 0) balanceOf[_projectId] = balanceOf[_projectId] + _amount;\\n\\n    if (_weightedAmount > 0)\\n      tokenCount = directory.controllerOf(_projectId).mintTokensOf(\\n        _projectId,\\n        _weightedAmount,\\n        address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\\n        'ETH received',\\n        (_preferClaimedTokensAndBeneficiary & 1) == 0,\\n        fundingCycle.reservedRate()\\n      );\\n\\n    // The token count for the beneficiary must be greater than or equal to the minimum expected.\\n    require(tokenCount >= _minReturnedTokens, '0x3c: INADEQUATE');\\n\\n    // If a delegate was returned by the data source, issue a callback to it.\\n    if (_delegate != IJBPayDelegate(address(0))) {\\n      JBDidPayData memory _data = JBDidPayData(\\n        _payer,\\n        _projectId,\\n        _amount,\\n        weight,\\n        tokenCount,\\n        payable(address(uint160(_preferClaimedTokensAndBeneficiary >> 1))),\\n        memo,\\n        _delegateMetadata\\n      );\\n      _delegate.didPay(_data);\\n      emit DelegateDidPay(_delegate, _data);\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Records newly withdrawn funds for a project.\\n\\n    @dev\\n    Only the associated payment terminal can record a withdrawal.\\n\\n    @param _projectId The ID of the project that is having funds withdrawn.\\n    @param _amount The amount being withdrawn. Send as wei (18 decimals).\\n    @param _currency The expected currency of the `_amount` being tapped. This must match the project's current funding cycle's currency.\\n    @param _minReturnedWei The minimum number of wei that should be withdrawn.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal was made.\\n    @return withdrawnAmount The amount withdrawn.\\n  */\\n  function recordWithdrawalFor(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount)\\n  {\\n    // Registers the funds as withdrawn and gets the ID of the funding cycle during which this withdrawal is being made.\\n    fundingCycle = directory.controllerOf(_projectId).signalWithdrawlFrom(_projectId, _amount);\\n\\n    // Funds cannot be withdrawn if there's no funding cycle.\\n    require(fundingCycle.id > 0, '0x3d: NOT_FOUND');\\n\\n    // The funding cycle must not be configured to have withdrawals paused.\\n    require(!fundingCycle.withdrawalsPaused(), '0x3e: PAUSED');\\n\\n    // Make sure the currencies match.\\n    require(_currency == fundingCycle.currency, '0x3f: UNEXPECTED_CURRENCY');\\n\\n    // Convert the amount to wei.\\n    withdrawnAmount = PRBMathUD60x18.div(\\n      _amount,\\n      prices.priceFor(fundingCycle.currency, JBCurrencies.ETH)\\n    );\\n\\n    // The amount being withdrawn must be available.\\n    require(withdrawnAmount <= balanceOf[_projectId], '0x40: INSUFFICIENT_FUNDS');\\n\\n    // The amount being withdrawn must be at least as much as was expected.\\n    require(_minReturnedWei <= withdrawnAmount, '0x41: INADEQUATE');\\n\\n    // Removed the withdrawn funds from the project's balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] - withdrawnAmount;\\n  }\\n\\n  /** \\n    @notice \\n    Records newly used allowance funds of a project.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _terminal The terminal for the allowance.\\n    @param _amount The amount of the allowance to use.\\n    @param _currency The currency of the `_amount` value. Must match the funding cycle's currency.\\n    @param _minReturnedWei The amount of wei that is expected to be withdrawn.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal is being made.\\n    @return withdrawnAmount The amount withdrawn.\\n  */\\n  function recordUsedAllowanceOf(\\n    uint256 _projectId,\\n    IJBTerminal _terminal,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Make sure the currencies match.\\n    require(_currency == fundingCycle.currency, '0x42: UNEXPECTED_CURRENCY');\\n\\n    // Convert the amount to wei.\\n    withdrawnAmount = PRBMathUD60x18.div(\\n      _amount,\\n      prices.priceFor(fundingCycle.currency, JBCurrencies.ETH)\\n    );\\n\\n    // There must be sufficient allowance available.\\n    require(\\n      withdrawnAmount <=\\n        directory.controllerOf(_projectId).overflowAllowanceOf(\\n          _projectId,\\n          fundingCycle.configured,\\n          _terminal\\n        ) -\\n          usedOverflowAllowanceOf[_projectId][fundingCycle.configured],\\n      '0x43: NOT_ALLOWED'\\n    );\\n\\n    // The amount being withdrawn must be available.\\n    require(withdrawnAmount <= balanceOf[_projectId], '0x44: INSUFFICIENT_FUNDS');\\n\\n    // The amount being withdrawn must be at least as much as was expected.\\n    require(_minReturnedWei <= withdrawnAmount, '0x45: INADEQUATE');\\n\\n    // Store the decremented value.\\n    usedOverflowAllowanceOf[_projectId][fundingCycle.configured] =\\n      usedOverflowAllowanceOf[_projectId][fundingCycle.configured] +\\n      withdrawnAmount;\\n\\n    // Update the project's balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] - withdrawnAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly redeemed tokens of a project.\\n\\n    @dev \\n    Only the associated payment terminal can record a redemption.\\n\\n    @param _holder The account that is having its tokens redeemed.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of tokens to redeemed.\\n    @param _minReturnedWei The minimum amount of wei expected in return.\\n    @param _beneficiary The address that will benefit from the claimed amount.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\\n\\n    @return fundingCycle The funding cycle during which the redemption was made.\\n    @return claimAmount The amount of wei claimed.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordRedemptionFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 claimAmount,\\n      string memory memo\\n    )\\n  {\\n    // The holder must have the specified number of the project's tokens.\\n    require(tokenStore.balanceOf(_holder, _projectId) >= _tokenCount, '0x46: INSUFFICIENT_TOKENS');\\n\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    require(!fundingCycle.redeemPaused(), '0x47: PAUSED');\\n\\n    // Save a reference to the delegate to use.\\n    IJBRedemptionDelegate _delegate;\\n\\n    // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\\n    if (fundingCycle.useDataSourceForRedeem()) {\\n      (claimAmount, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().redeemParams(\\n        JBRedeemParamsData(\\n          _holder,\\n          _tokenCount,\\n          fundingCycle.redemptionRate(),\\n          fundingCycle.ballotRedemptionRate(),\\n          _beneficiary,\\n          _memo,\\n          _delegateMetadata\\n        )\\n      );\\n    } else {\\n      claimAmount = _claimableOverflowOf(fundingCycle, _tokenCount);\\n      memo = _memo;\\n    }\\n\\n    // The amount being claimed must be within the project's balance.\\n    require(claimAmount <= balanceOf[_projectId], '0x48: INSUFFICIENT_FUNDS');\\n\\n    // The amount being claimed must be at least as much as was expected.\\n    require(claimAmount >= _minReturnedWei, '0x49: INADEQUATE');\\n\\n    // Redeem the tokens, which burns them.\\n    if (_tokenCount > 0)\\n      directory.controllerOf(_projectId).burnTokensOf(\\n        _holder,\\n        _projectId,\\n        _tokenCount,\\n        'Redeem for ETH',\\n        true\\n      );\\n\\n    // Remove the redeemed funds from the project's balance.\\n    if (claimAmount > 0) balanceOf[_projectId] = balanceOf[_projectId] - claimAmount;\\n\\n    // If a delegate was returned by the data source, issue a callback to it.\\n    if (_delegate != IJBRedemptionDelegate(address(0))) {\\n      JBDidRedeemData memory _data = JBDidRedeemData(\\n        _holder,\\n        _projectId,\\n        _tokenCount,\\n        claimAmount,\\n        _beneficiary,\\n        memo,\\n        _delegateMetadata\\n      );\\n      _delegate.didRedeem(_data);\\n      emit DelegateDidRedeem(_delegate, _data);\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Records newly added funds for the project.\\n\\n    @dev\\n    Only the associated payment terminal can record an added balance.\\n\\n    @param _projectId The ID of the project to which the funds being added belong.\\n    @param _amount The amount added, in wei.\\n\\n    @return fundingCycle The current funding cycle for the project.\\n  */\\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount)\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Increment the balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] + _amount;\\n  }\\n\\n  /** \\n    @notice\\n    Records the migration of this terminal to another.\\n\\n    @param _projectId The ID of the project being migrated.\\n\\n    @return balance The project's current balance.\\n  */\\n  function recordMigration(uint256 _projectId)\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (uint256 balance)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    require(_fundingCycle.terminalMigrationAllowed(), '0x4a: NOT_ALLOWED');\\n\\n    // Return the current balance.\\n    balance = balanceOf[_projectId];\\n\\n    // Set the balance to 0.\\n    balanceOf[_projectId] = 0;\\n  }\\n\\n  /** \\n    @notice\\n    Allows this store to be claimed by an address so that it recognized the address as its terminal.\\n  */\\n  function claim() external {\\n    // This store can only be claimed once.\\n    require(terminal == address(0), '0x4b: ALREADY_CLAIMED');\\n\\n    // Set the terminal as the msg.sender.\\n    terminal = msg.sender;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    See docs for `claimableOverflowOf`\\n  */\\n  function _claimableOverflowOf(JBFundingCycle memory _fundingCycle, uint256 _tokenCount)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // Get the amount of current overflow.\\n    uint256 _currentOverflow = _overflowDuring(_fundingCycle);\\n\\n    // If there is no overflow, nothing is claimable.\\n    if (_currentOverflow == 0) return 0;\\n\\n    // Get the total number of tokens in circulation.\\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_fundingCycle.projectId);\\n\\n    // Get the number of reserved tokens the project has.\\n    uint256 _reservedTokenAmount = directory\\n      .controllerOf(_fundingCycle.projectId)\\n      .reservedTokenBalanceOf(_fundingCycle.projectId, _fundingCycle.reservedRate());\\n\\n    // If there are reserved tokens, add them to the total supply.\\n    if (_reservedTokenAmount > 0) _totalSupply = _totalSupply + _reservedTokenAmount;\\n\\n    // If the amount being redeemed is the the total supply, return the rest of the overflow.\\n    if (_tokenCount == _totalSupply) return _currentOverflow;\\n\\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_fundingCycle.projectId) ==\\n      JBBallotState.Active\\n      ? _fundingCycle.ballotRedemptionRate()\\n      : _fundingCycle.redemptionRate();\\n\\n    // If the redemption rate is 0, nothing is claimable.\\n    if (_redemptionRate == 0) return 0;\\n\\n    // Get a reference to the linear proportion.\\n    uint256 _base = PRBMath.mulDiv(_currentOverflow, _tokenCount, _totalSupply);\\n\\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\\n    if (_redemptionRate == 10000) return _base;\\n    return\\n      PRBMath.mulDiv(\\n        _base,\\n        _redemptionRate + PRBMath.mulDiv(_tokenCount, 10000 - _redemptionRate, _totalSupply),\\n        10000\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of ETH changes in relation to the funding cycle's currency.\\n\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n\\n    @return overflow The overflow of funds.\\n  */\\n  function _overflowDuring(JBFundingCycle memory _fundingCycle) private view returns (uint256) {\\n    // Get the current balance of the project.\\n    uint256 _balanceOf = balanceOf[_fundingCycle.projectId];\\n\\n    // If there's no balance, there's no overflow.\\n    if (_balanceOf == 0) return 0;\\n\\n    // Get a reference to the amount still withdrawable during the funding cycle.\\n    uint256 _targetRemaining = _fundingCycle.target - _fundingCycle.tapped;\\n\\n    // Convert the _targetRemaining to ETH.\\n    uint256 _ethTargetRemaining = _targetRemaining == 0\\n      ? 0 // Get the current price of ETH.\\n      : PRBMathUD60x18.div(\\n        _targetRemaining,\\n        prices.priceFor(_fundingCycle.currency, JBCurrencies.ETH)\\n      );\\n\\n    // Overflow is the balance of this project minus the amount that can still be withdrawn.\\n    return _balanceOf < _ethTargetRemaining ? 0 : _balanceOf - _ethTargetRemaining;\\n  }\\n}\\n\",\"keccak256\":\"0x3f546dfa2186421e966b46fbbfd6260a4f8108933e9df6fdc9a8de756edffc5a\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    require(\\n      _override ||\\n        msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x8b5b41ab9dfe24ec6da1cbf2de40535d1af341a2fba0d531e959e2d25a514922\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function signalWithdrawlFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe45d63615c77167a07f91175d2ce30bab2393cbb9ee4215157e65c4c10e359a0\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x8c05acec8250a632abe806d827ab70abe3cbd0a1289bdb5aa2e67f527a962ccd\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBETHPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitsStore.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBPayDelegate.sol';\\nimport './IJBTokenStore.sol';\\nimport './IJBPrices.sol';\\nimport './IJBRedemptionDelegate.sol';\\nimport './IJBController.sol';\\n\\nimport './../structs/JBFee.sol';\\n\\ninterface IJBETHPaymentTerminal {\\n  event AddToBalance(uint256 indexed projectId, uint256 amount, string memo, address caller);\\n  event Migrate(uint256 indexed projectId, IJBTerminal indexed to, uint256 amount, address caller);\\n  event DistributePayouts(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address projectOwner,\\n    uint256 amount,\\n    uint256 withdrawnAmount,\\n    uint256 feeAmount,\\n    uint256 projectOwnerDistributionAmount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event UseAllowance(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 feeAmount,\\n    uint256 transferAmount,\\n    address caller\\n  );\\n  event ProcessFees(uint256 indexed projectId, JBFee[] fees, address caller);\\n  event Pay(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    JBFundingCycle fundingCycle,\\n    uint256 amount,\\n    uint256 weight,\\n    uint256 tokenCount,\\n    string memo,\\n    address caller\\n  );\\n  event RedeemTokens(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address indexed holder,\\n    JBFundingCycle fundingCycle,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 claimedAmount,\\n    string memo,\\n    address caller\\n  );\\n  event DistributeToPayoutSplit(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    JBSplit split,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function heldFeesOf(uint256 _projectId) external view returns (JBFee[] memory);\\n\\n  function distributePayoutsOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    string memory _memo\\n  ) external returns (uint256);\\n\\n  function redeemTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _count,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external returns (uint256 claimedAmount);\\n\\n  function useAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary\\n  ) external returns (uint256 fundingCycleNumber);\\n\\n  function migrate(uint256 _projectId, IJBTerminal _to) external;\\n}\\n\",\"keccak256\":\"0x0e7c96fd42c3e54742040013adf676ca5c92e651d86bf0af4b8782239c45332b\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function state(uint256 _fundingCycleId, uint256 _configured)\\n    external\\n    view\\n    returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x8ccee1e7cfe82b4d750775d57ba901f2534d2ba2b44c339c70b4ab2ffbc82dc1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n}\\n\",\"keccak256\":\"0xe689c3a2c9e75d368de61b3344df96015bb4421b264d98056d8aa351e8faf739\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 indexed configured,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Tap(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 newTappedAmount,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed fundingCycleId, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _fundingCycleId) external view returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _fee\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n\\n  function tapFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x638e3d0ab5496f25fa48ab83998d42c01b722556ef18967d06a55daa82c1f392\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xec7fcab267fc1227d983c9420373beece78a2a4243c44bfab01d12262818ab8e\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, AggregatorV3Interface feed);\\n\\n  function TARGET_DECIMALS() external returns (uint256);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\\n\\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2309ad881e3851c6d002dfa283e562f51327ef28243ef9bf09365df3d98eda39\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _uri\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setUriOf(uint256 _projectId, string calldata _uri) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0x71aa7f550e070d6a722da7174df285ee9d32119d71a39ba51fcc7ca0ddaddef4\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xbfeeb100e450c3cf5565a53a34a693f4963f09136bfea7e050efc3f8e1dea095\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBSplitAllocator {\\n  event Allocate(\\n    uint256 indexed projectId,\\n    uint256 indexed forProjectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _group,\\n    uint256 _projectId,\\n    uint256 _forProjectId,\\n    address _beneficiary,\\n    bool _preferClaimed\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xde20db5a2df3ba856337b7ec0c9b3fc14c5cbd4eb88bba5f71f259e8e43fcd44\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x1c385537292a40b3a9e15571afab37187b89d89979a5696c472fd898dd7a6a5a\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IJBToken is IERC20 {\\n  function mint(\\n    address _account,\\n    uint256 _amount,\\n    uint256 _projectId\\n  ) external;\\n\\n  function burn(\\n    address _account,\\n    uint256 _amount,\\n    uint256 _projectId\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x7c215c3bd3e4433746518024942429a5784ab378598b38cff9891714798715ee\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unclaimedTokenBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event ChangeToken(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    address indexed owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeTokenOf(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x576e7d2209e54ff57eb39c17dbc6e5e519f91824fb67f6345576df61965137bc\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBCurrencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBCurrencies {\\n  uint256 public constant ETH = 0;\\n  uint256 public constant USD = 1;\\n}\\n\",\"keccak256\":\"0xcffe1abf317aa67cb63248ad7df797e582125a12c0eff4375f8f0b528603e162\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(uint16(_fundingCycle.metadata >> 32));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 40) & 1) == 0;\\n  }\\n\\n  function withdrawalsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 41) & 1) == 0;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 42) & 1) == 0;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 43) & 1) == 0;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 44) & 1) == 0;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 45) & 1) == 0;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 46) & 1) == 0;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 47) & 1) == 0;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 48) & 1 == 0;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 49) & 1 == 0;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 50)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bytes specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the first 8 bytes.\\n    packed = 1;\\n    // reserved rate in bits 8-15.\\n    packed |= _metadata.reservedRate << 8;\\n    // bonding curve in bits 16-23.\\n    packed |= _metadata.redemptionRate << 16;\\n    // reconfiguration bonding curve rate in bits 24-31.\\n    packed |= _metadata.ballotRedemptionRate << 24;\\n    // pause pay in bit 32.\\n    packed |= (_metadata.pausePay ? 1 : 0) << 32;\\n    // pause tap in bit 33.\\n    packed |= (_metadata.pauseWithdrawals ? 1 : 0) << 33;\\n    // pause redeem in bit 34.\\n    packed |= (_metadata.pauseRedeem ? 1 : 0) << 34;\\n    // pause mint in bit 35.\\n    packed |= (_metadata.pauseMint ? 1 : 0) << 35;\\n    // pause mint in bit 36.\\n    packed |= (_metadata.pauseBurn ? 1 : 0) << 36;\\n    // allow terminal migration in bit 37.\\n    packed |= (_metadata.allowTerminalMigration ? 1 : 0) << 37;\\n    // allow controller migration in bit 38.\\n    packed |= (_metadata.allowControllerMigration ? 1 : 0) << 38;\\n    // hold fees in bit 39.\\n    packed |= (_metadata.holdFees ? 1 : 0) << 39;\\n    // use pay data source in bit 40.\\n    packed |= (_metadata.useDataSourceForPay ? 1 : 0) << 40;\\n    // use redeem data source in bit 41.\\n    packed |= (_metadata.useDataSourceForRedeem ? 1 : 0) << 41;\\n    // data source address in bits 42-201.\\n    packed |= uint160(address(_metadata.dataSource)) << 42;\\n  }\\n}\\n\",\"keccak256\":\"0xaae1493de4b3b12f579bd45f9e6b1d1494f316c529068a189114586563fbdb4b\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant PRINT_PREMINED_TOKENS = 2;\\n  uint256 public constant REDEEM = 3;\\n  uint256 public constant MIGRATE_CONTROLLER = 4;\\n  uint256 public constant MIGRATE_TERMINAL = 5;\\n  uint256 public constant PROCESS_FEES = 6;\\n  uint256 public constant SET_HANDLE = 7;\\n  uint256 public constant SET_URI = 8;\\n  uint256 public constant CLAIM_HANDLE = 9;\\n  uint256 public constant RENEW_HANDLE = 10;\\n  uint256 public constant ISSUE = 11;\\n  uint256 public constant CHANGE_TOKEN = 12;\\n  uint256 public constant MINT = 13;\\n  uint256 public constant BURN = 14;\\n  uint256 public constant TRANSFER = 15;\\n  uint256 public constant REQUIRE_CLAIM = 16;\\n  uint256 public constant SET_CONTROLLER = 17;\\n  uint256 public constant ADD_TERMINAL = 18;\\n  uint256 public constant REMOVE_TERMINAL = 19;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 20;\\n  uint256 public constant USE_ALLOWANCE = 21;\\n  uint256 public constant SET_SPLITS = 22;\\n}\\n\",\"keccak256\":\"0xe27fa8d0343454b7932fea271dbc668eba834c2d5ffe9a63cc7f6dd4d8a1a70b\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/v2/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of ETH that was paid.\\n  uint256 amount;\\n  // The weight that was used for minting tokens.\\n  uint256 weight;\\n  // The number of tokens minted.\\n  uint256 tokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0x3fabe50ca2d00e24420061165124d1f43d8489605d84d0ab0a942a7ba8b02101\",\"license\":\"MIT\"},\"contracts/v2/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The amount of ETH being claimed.\\n  uint256 claimAmount;\\n  // The address to which the ETH will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x9415d894e263a90d824a1cde4a6f17d1a325f5183226e02b2e2318afd6103e27\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBFee {\\n  // The amount of the fee.\\n  uint256 amount;\\n  // The address that will receive the tokens that are minted as a result of the fee payment.\\n  address beneficiary;\\n  // The memo that should be emitted alongside the fee payment.\\n  string memo;\\n}\\n\",\"keccak256\":\"0x3906f32dd31e43ff70005ab0d6ab02e6151e3ad5f12d48e833210b8d92229c3f\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct JBFundingCycle {\\n  // A unique number that's incremented for each new funding cycle, starting with 1.\\n  uint256 id;\\n  // The ID of the project contract that this funding cycle belongs to.\\n  uint256 projectId;\\n  // The number of this funding cycle for the project.\\n  uint256 number;\\n  // The ID of a previous funding cycle that this one is based on.\\n  uint256 basedOn;\\n  // The time when this funding cycle was last configured.\\n  uint256 configured;\\n  // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n  uint256 weight;\\n  // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n  IJBFundingCycleBallot ballot;\\n  // The time when this funding cycle will become active.\\n  uint256 start;\\n  // The number of seconds until this funding cycle's surplus is redistributed.\\n  uint256 duration;\\n  // The amount that this funding cycle is targeting in terms of the currency.\\n  uint256 target;\\n  // The currency that the target is measured in.\\n  uint256 currency;\\n  // The percentage of each payment to send as a fee to the Juicebox admin.\\n  uint256 fee;\\n  // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n  uint256 discountRate;\\n  // The amount of available funds that have been tapped by the project in terms of the currency.\\n  uint256 tapped;\\n  // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0xe495726d5a173e13e92e7fa2f2ebb802cce2ddcbbec07a839235c1717415e19f\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The target of the funding cycle.\\n  uint256 target;\\n  // The currency of the funding cycle. 0 is ETH, 1 is USD.\\n  uint256 currency;\\n  // The duration of the funding cycle.\\n  uint256 duration;\\n  // The discount rate of the funding cycle.\\n  uint256 discountRate;\\n  // The weight of the funding cycle. Send a weight of 1 to set a minimum.\\n  uint256 weight;\\n  // The ballot of the funding cycle.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x11b640116389ca4de36d01dae260a53b372fc4a720160cd65d18562af70c3666\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the withdraw functionality should be paused during the funding cycle.\\n  bool pauseWithdrawals;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x67cc1945788c6f47dcdbe3cd94ea6fe7e0c8bb66922296e5651232f9da598400\",\"license\":\"MIT\"},\"contracts/v2/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"},\"contracts/v2/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBPayParamsData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ETH amount of the payment.\\n  uint256 amount;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the payment.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0xa8e66f087a787ef56d6c533a9e4ec871954d25642891aef48b1b8a824c07f1c1\",\"license\":\"MIT\"},\"contracts/v2/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBRedeemParamsData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The proposed number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0xa7d2c92c504a81dbf35f8620129931517de9742e0644d13dcd7d8403e71569ae\",\"license\":\"MIT\"},\"contracts/v2/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of 10000000.\\n  uint24 percent;\\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\\n  uint48 lockedUntil;\\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\\n  IJBSplitAllocator allocator;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the unstaked token prerence respected.\\n  uint56 projectId;\\n}\\n\",\"keccak256\":\"0x644dd9716b4990a57dd6726f07cf57bcb0b2bc8e7a24d40ae22e34addb373c5d\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding towards zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc6b47a506b52834c45984320f3a74bfe13a433806471cdd5570105e233c1337\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x6101406040526e042069000000000000000000000000610120523480156200002657600080fd5b5060405162004b8438038062004b84833981016040819052620000499162000153565b606085901b6001600160601b031916608052620000663362000103565b600180556001600160601b0319606085811b821660a05284811b821660c05283901b1660e05260408051634e71d92d60e01b815290516001600160a01b03831691634e71d92d91600480830192600092919082900301818387803b158015620000ce57600080fd5b505af1158015620000e3573d6000803e3d6000fd5b5050505060601b6001600160601b0319166101005250620001ec92505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600060a086880312156200016c57600080fd5b85516200017981620001d3565b60208701519095506200018c81620001d3565b60408701519094506200019f81620001d3565b6060870151909350620001b281620001d3565b6080870151909250620001c581620001d3565b809150509295509295909350565b6001600160a01b0381168114620001e957600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61486b620003196000396000818161043f015281816108e701528181612d6501526134190152600081816102f0015281816103c9015281816109b501528181610be101528181610cf8015281816118d001528181611fe5015281816121df015261276f01526000818161018101526131c901526000818161039801528181612d9001526134440152600081816102910152818161058e01528181610e49015281816115a90152818161199901528181611a5d015281816122bd0152612381015260008181610324015281816106980152818161077101528181610fa801528181611081015281816116b30152818161178c01528181611ce30152611dbc015261486b6000f3fe6080604052600436106101445760003560e01c80638da5cb5b116100c0578063c41c2f2411610074578063d930c60c11610059578063d930c60c146103ed578063f2fde38b1461040d578063fc0c546a1461042d57600080fd5b8063c41c2f2414610386578063c89e4361146103ba57600080fd5b8063ad007d63116100a5578063ad007d6314610312578063b5a6aed714610346578063b6cf978e1461036657600080fd5b80638da5cb5b146102b3578063975057e7146102de57600080fd5b80635de603141161011757806389701db5116100fc57806389701db5146102325780638af56094146102525780638b79543c1461027f57600080fd5b80635de60314146101fd578063715018a61461021d57600080fd5b806303930453146101495780632bdfe0041461016f578063405b84fa146101c857806342373472146101ea575b600080fd5b61015c610157366004613e7d565b610461565b6040519081526020015b60405180910390f35b34801561017b57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610166565b3480156101d457600080fd5b506101e86101e3366004613f25565b6104e8565b005b6101e86101f8366004613f55565b610b3f565b34801561020957600080fd5b5061015c610218366004613e64565b610cc6565b34801561022957600080fd5b506101e8610d8d565b34801561023e57600080fd5b506101e861024d366004613e64565b610e1a565b34801561025e57600080fd5b5061027261026d366004613e64565b6113d5565b60405161016691906142ed565b34801561028b57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b3480156102bf57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101a3565b3480156102ea57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b34801561031e57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b34801561035257600080fd5b5061015c610361366004613f9c565b611506565b34801561037257600080fd5b5061015c610381366004613b29565b611bf3565b34801561039257600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c657600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101a3565b3480156103f957600080fd5b5061015c610408366004613fe9565b612122565b34801561041957600080fd5b506101e8610428366004613aef565b61252c565b34801561043957600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b60006104db348a8a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061265c92505050565b9998505050505050505050565b6002600154141561055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156105e557600080fd5b505afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190613b0c565b8260053373ffffffffffffffffffffffffffffffffffffffff8416148061071257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190613d21565b806107eb57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190613d21565b610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b8373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190613b0c565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834643a20494e434f4d50415449424c4500000000000000000000000000006044820152606401610551565b6040517f6bb6a5ad000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636bb6a5ad90602401602060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190613d3e565b90508015610ae157604080517f423734720000000000000000000000000000000000000000000000000000000081526004810188905260248101919091526000604482015273ffffffffffffffffffffffffffffffffffffffff86169063423734729083906064016000604051808303818588803b158015610ac757600080fd5b505af1158015610adb573d6000803e3d6000fd5b50505050505b6040805182815233602082015273ffffffffffffffffffffffffffffffffffffffff87169188917fa7519e5f94697b7f53e97c5eb46a0c730a296ab686ab8fd333835c5f735784eb910160405180910390a350506001805550505050565b60003411610ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f307834633a204e4f5f4f500000000000000000000000000000000000000000006044820152606401610551565b6040517fe7c8e3e3000000000000000000000000000000000000000000000000000000008152600481018390523460248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e7c8e3e3906044016101e060405180830381600087803b158015610c3b57600080fd5b505af1158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190613d57565b9050610c8583348361016001516128d6565b827f4ce42b42caaa564737146f357a8fa7fe24940fac843d392a69e23b32a1d766a3348433604051610cb9939291906144f0565b60405180910390a2505050565b6040517f9cc7f708000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690639cc7f7089060240160206040518083038186803b158015610d4f57600080fd5b505afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190613d3e565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610551565b610e186000612cac565b565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610ea057600080fd5b505afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190613b0c565b816006610efa60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148080610f4957503373ffffffffffffffffffffffffffffffffffffffff8516145b8061102257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190613d21565b806110fb57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190613d21565b611161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b600260015414156111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b600260018190556000868152602091825260408082208054825181860281018601909352808352929391929091849084015b828210156112f1576000848152602090819020604080516060810182526003860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff169383019390935260028301805492939291840191611260906146bc565b80601f016020809104026020016040519081016040528092919081815260200182805461128c906146bc565b80156112d95780601f106112ae576101008083540402835291602001916112d9565b820191906000526020600020905b8154815290600101906020018083116112bc57829003601f168201915b50505050508152505081526020019060010190611200565b50505050905060005b815181101561137757611365828281518110611318576113186147a7565b602002602001015160000151838381518110611336576113366147a7565b602002602001015160200151848481518110611354576113546147a7565b602002602001015160400151612d21565b8061136f81614710565b9150506112fa565b50600086815260026020526040812061138f916137d8565b857f510aa8139782d29bd981e9143e406221386c398f4db6fb543050981d1f5ce56e82336040516113c1929190614300565b60405180910390a250506001805550505050565b606060026000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156114fb576000848152602090819020604080516060810182526003860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff16938301939093526002830180549293929184019161146a906146bc565b80601f0160208091040260200160405190810160405280929190818152602001828054611496906146bc565b80156114e35780601f106114b8576101008083540402835291602001916114e3565b820191906000526020600020905b8154815290600101906020018083116114c657829003601f168201915b5050505050815250508152602001906001019061140a565b505050509050919050565b600060026001541415611575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561160057600080fd5b505afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190613b0c565b8660153373ffffffffffffffffffffffffffffffffffffffff8416148061172d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190613d21565b8061180657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156117ce57600080fd5b505afa1580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190613d21565b61186c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b6040517f08083a81000000000000000000000000000000000000000000000000000000008152600481018a9052306024820152604481018990526064810188905260848101879052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906308083a819060a40161020060405180830381600087803b15801561191557600080fd5b505af1158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190613d74565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018e9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156119db57600080fd5b505afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613b0c565b6040517f49491987000000000000000000000000000000000000000000000000000000008152600481018e905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634949198790602401602060405180830381600087803b158015611aa157600080fd5b505af1158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190613d3e565b9050600084610160015160001480611af157508d6001145b611b4c576040517f4665652066726f6d2040000000000000000000000000000000000000000000006020820152602a8101839052611b4790869086908690604a015b604051602081830303815290604052612f12565b611b4f565b60005b9050611b648a611b5f8387614675565b61301f565b608085015185518f91907f4d0b119651438cfed12585fc57e8ec9d9cc98bb1e5da27bdc4b7419d084500c28d8886611b9c8183614675565b6040805173ffffffffffffffffffffffffffffffffffffffff9095168552602085019390935291830152606082015233608082015260a00160405180910390a450509151600180559b9a5050505050505050505050565b600060026001541415611c62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b6002600155878760033373ffffffffffffffffffffffffffffffffffffffff84161480611d5d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611d2557600080fd5b505afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190613d21565b80611e3657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611dfe57600080fd5b505afa158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e369190613d21565b611e9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b73ffffffffffffffffffffffffffffffffffffffff8716611f19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834633a205a45524f5f4144445245535300000000000000000000000000006044820152606401610551565b611fa8604051806101e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517f9225bf1a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690639225bf1a90612026908f908f908f908f908f908f908f906004016142a2565b600060405180830381600087803b15801561204057600080fd5b505af1158015612054573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261209a9190810190613da3565b98509550905084156120b0576120b0888661301f565b8b73ffffffffffffffffffffffffffffffffffffffff168b82600001517faab8cf20df3a8a65c8841921ab818fd69f2024c6ccfb8667c19c161d2f8438af848c8f8b8e336040516121069695949392919061438d565b60405180910390a4505060018055509098975050505050505050565b600060026001541415612191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026001556040517f41d0230c0000000000000000000000000000000000000000000000000000000081526004810187905260248101869052604481018590526064810184905260009081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906341d0230c9060840161020060405180830381600087803b15801561223957600080fd5b505af115801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122719190613d74565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018b9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156122ff57600080fd5b505afa158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190613b0c565b6040517f49491987000000000000000000000000000000000000000000000000000000008152600481018b905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634949198790602401602060405180830381600087803b1580156123c557600080fd5b505af11580156123d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fd9190613d3e565b905060008461016001516000148061241557508a6001145b612460576040517f4665652066726f6d2040000000000000000000000000000000000000000000006020820152602a810183905261245b90869086908690604a01611b33565b612463565b60005b905060006124bc866124758488614675565b6040517f5061796f75742066726f6d2040000000000000000000000000000000000000006020820152602d8101879052604d0160405160208183030381529060405261317e565b905080156124ce576124ce848261301f565b8b86600001517f4f97298058625e1e4cc1b7f86aa23c1d6ec6caa63932b87b289a9ea70252f777868e8987878f3360405161250f97969594939291906141d8565b60405180910390a350509251600180559998505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146125ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610551565b73ffffffffffffffffffffffffffffffffffffffff8116612650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610551565b61265981612cac565b50565b600073ffffffffffffffffffffffffffffffffffffffff86166126db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834653a205a45524f5f4144445245535300000000000000000000000000006044820152606401610551565b61276a604051806101e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329c705c7338d8d8d8c6127b95760006127bc565b60015b60ff16178d8c8c6040518863ffffffff1660e01b81526004016127e59796959493929190614237565b600060405180830381600087803b1580156127ff57600080fd5b505af1158015612813573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526128599190810190613dfe565b809950819450829550839650505050508873ffffffffffffffffffffffffffffffffffffffff168a84600001517f87791be5daaeac0e0338dfb9d98329a52c07852b9de21a9d8570e6de6b7754c2868f87878d336040516128bf969594939291906143f3565b60405180910390a450505198975050505050505050565b6000826128ef816128e88560c861465d565b60c86136cd565b6128f99190614675565b9050600060026000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612a21576000848152602090819020604080516060810182526003860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff169383019390935260028301805492939291840191612990906146bc565b80601f01602080910402602001604051908101604052809291908181526020018280546129bc906146bc565b8015612a095780601f106129de57610100808354040283529160200191612a09565b820191906000526020600020905b8154815290600101906020018083116129ec57829003601f168201915b50505050508152505081526020019060010190612930565b5050506000878152600260205260408120929350612a409291506137d8565b60005b8151811015612ca45782612b0a5760008681526002602052604090208251839083908110612a7357612a736147a7565b60209081029190910181015182546001808201855560009485529383902082516003909202019081558183015193810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9095169490941790935560408101518051919392612b02926002850192909101906137f9565b505050612c92565b818181518110612b1c57612b1c6147a7565b6020026020010151600001518310612b5e57818181518110612b4057612b406147a7565b60200260200101516000015183612b579190614675565b9250612c92565b60026000878152602001908152602001600020604051806060016040528085858581518110612b8f57612b8f6147a7565b602002602001015160000151612ba59190614675565b8152602001848481518110612bbc57612bbc6147a7565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff168152602001848481518110612bf557612bf56147a7565b60209081029190910181015160409081015190925283546001808201865560009586529482902084516003909202019081558382015194810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90961695909517909455908201518051929392612c8a92600285019201906137f9565b505050600092505b80612c9c81614710565b915050612a43565b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f862026500000000000000000000000000000000000000000000000000000000081526001600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b158015612dd457600080fd5b505afa158015612de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0c9190613b0c565b905073ffffffffffffffffffffffffffffffffffffffff81163014612eeb5760408051602081018252600080825291517f0393045300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416926303930453928892612e94926001928a9282918b91600401614338565b6020604051808303818588803b158015612ead57600080fd5b505af1158015612ec1573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612ee69190613d3e565b612f0b565b612f0b84600185600080876040518060200160405280600081525061265c565b5050505050565b6000612f318460c887610160015160c8612f2c919061465d565b6136cd565b612f3b9085614675565b905080612f4a57506000613017565b6101c0850151602f1c60011615612f6b57612f66818484612d21565b613017565b602085810151600090815260028083526040808320815160608101835286815273ffffffffffffffffffffffffffffffffffffffff898116828801908152938201898152835460018082018655948852968890208351600390980201968755935192860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169390911692909217909155905180519194613013938501929101906137f9565b5050505b949350505050565b80471015613089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610551565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146130e3576040519150601f19603f3d011682016040523d82523d6000602084013e6130e8565b606091505b5050905080613179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610551565b505050565b602083015160808401516040517f69e11cc5000000000000000000000000000000000000000000000000000000008152600481019290925260248201526001604482015282906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b15801561322057600080fd5b505afa158015613234573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261327a9190810190613be3565b905060005b81518110156136c457600082828151811061329c5761329c6147a7565b6020026020010151905060006132bf87836020015162ffffff16629896806136cd565b9050801561366c57608082015173ffffffffffffffffffffffffffffffffffffffff16156133b4576080820151602089015160a0840151606085015185516040517fc8e84e020000000000000000000000000000000000000000000000000000000081526004810187905260016024820152604481019490945266ffffffffffffff909216606484015273ffffffffffffffffffffffffffffffffffffffff908116608484015290151560a48301529091169063c8e84e0290839060c4016000604051808303818588803b15801561339657600080fd5b505af11580156133aa573d6000803e3d6000fd5b505050505061365f565b60a082015166ffffffffffffff16156136515760a08201516040517f8620265000000000000000000000000000000000000000000000000000000000815266ffffffffffffff909116600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b15801561348857600080fd5b505afa15801561349c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c09190613b0c565b905073ffffffffffffffffffffffffffffffffffffffff811661353f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307834643a204241445f53504c495400000000000000000000000000000000006044820152606401610551565b73ffffffffffffffffffffffffffffffffffffffff811630141561359757613591828460a0015166ffffffffffffff168560600151600087600001518c6040518060200160405280600081525061265c565b5061364b565b8073ffffffffffffffffffffffffffffffffffffffff166303930453838560a001518660600151600088600001518d604051806020016040528060008152506040518863ffffffff1660e01b81526004016135f79695949392919061452f565b6020604051808303818588803b15801561361057600080fd5b505af1158015613624573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136499190613d3e565b505b5061365f565b61365f82606001518261301f565b6136698186614675565b94505b602088015188516040517f890990238a14aca46c7c8272cc8161193b9583aa44c54cf65945e4441fcaf283906136a790869086903390614455565b60405180910390a3505080806136bc90614710565b91505061327f565b50509392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156137265783828161371c5761371c614778565b04925050506137d1565b838110613769576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610551565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b5080546000825560030290600052602060002090810190612659919061387d565b828054613805906146bc565b90600052602060002090601f016020900481019282613827576000855561386d565b82601f1061384057805160ff191683800117855561386d565b8280016001018555821561386d579182015b8281111561386d578251825591602001919060010190613852565b506138799291506138ca565b5090565b808211156138795760008082556001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556138c160028301826138df565b5060030161387d565b5b8082111561387957600081556001016138cb565b5080546138eb906146bc565b6000825580601f106138fb575050565b601f01602090049060005260206000209081019061265991906138ca565b600061392c61392784614617565b6145c8565b905082815283838301111561394057600080fd5b828260208301376000602084830101529392505050565b805161396281614805565b919050565b60008083601f84011261397957600080fd5b50813567ffffffffffffffff81111561399157600080fd5b6020830191508360208285010111156139a957600080fd5b9250929050565b600082601f8301126139c157600080fd5b6137d183833560208501613919565b600082601f8301126139e157600080fd5b81516139ef61392782614617565b818152846020838601011115613a0457600080fd5b61301782602083016020870161468c565b60006101e08284031215613a2857600080fd5b613a3061457b565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a0820152613a7460c08301613957565b60c082015260e08281015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c09182015191810191909152919050565b805166ffffffffffffff8116811461396257600080fd5b600060208284031215613b0157600080fd5b81356137d181614805565b600060208284031215613b1e57600080fd5b81516137d181614805565b600080600080600080600060e0888a031215613b4457600080fd5b8735613b4f81614805565b96506020880135955060408801359450606088013593506080880135613b7481614805565b925060a088013567ffffffffffffffff80821115613b9157600080fd5b613b9d8b838c016139b0565b935060c08a0135915080821115613bb357600080fd5b508801601f81018a13613bc557600080fd5b613bd48a823560208401613919565b91505092959891949750929550565b60006020808385031215613bf657600080fd5b825167ffffffffffffffff80821115613c0e57600080fd5b818501915085601f830112613c2257600080fd5b815181811115613c3457613c346147d6565b613c42848260051b016145c8565b818152848101925083850160c0808402860187018a1015613c6257600080fd5b600095505b83861015613d135780828b031215613c7e57600080fd5b613c866145a5565b8251613c9181614827565b81528288015162ffffff81168114613ca857600080fd5b8189015260408381015165ffffffffffff81168114613cc657600080fd5b908201526060613cd7848201613957565b908201526080613ce8848201613957565b9082015260a0613cf9848201613ad8565b908201528552600195909501949386019390810190613c67565b509098975050505050505050565b600060208284031215613d3357600080fd5b81516137d181614827565b600060208284031215613d5057600080fd5b5051919050565b60006101e08284031215613d6a57600080fd5b6137d18383613a15565b6000806102008385031215613d8857600080fd5b613d928484613a15565b91506101e083015190509250929050565b60008060006102208486031215613db957600080fd5b613dc38585613a15565b92506101e0840151915061020084015167ffffffffffffffff811115613de857600080fd5b613df4868287016139d0565b9150509250925092565b6000806000806102408587031215613e1557600080fd5b613e1f8686613a15565b93506101e08501519250610200850151915061022085015167ffffffffffffffff811115613e4c57600080fd5b613e58878288016139d0565b91505092959194509250565b600060208284031215613e7657600080fd5b5035919050565b60008060008060008060008060c0898b031215613e9957600080fd5b883597506020890135613eab81614805565b9650604089013595506060890135613ec281614827565b9450608089013567ffffffffffffffff80821115613edf57600080fd5b613eeb8c838d01613967565b909650945060a08b0135915080821115613f0457600080fd5b50613f118b828c01613967565b999c989b5096995094979396929594505050565b60008060408385031215613f3857600080fd5b823591506020830135613f4a81614805565b809150509250929050565b60008060408385031215613f6857600080fd5b82359150602083013567ffffffffffffffff811115613f8657600080fd5b613f92858286016139b0565b9150509250929050565b600080600080600060a08688031215613fb457600080fd5b853594506020860135935060408601359250606086013591506080860135613fdb81614805565b809150509295509295909350565b600080600080600060a0868803121561400157600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561403457600080fd5b614040888289016139b0565b9150509295509295909350565b600081518084526020808501808196508360051b8101915082860160005b858110156140cb5782840389528151805185528581015173ffffffffffffffffffffffffffffffffffffffff16868601526040908101516060918601829052906140b7818701836140d8565b9a87019a955050509084019060010161406b565b5091979650505050505050565b600081518084526140f081602086016020860161468c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015161417f60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e08181015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c090810151910152565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015285608084015260e060a084015261422060e08401866140d8565b915080841660c08401525098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015280871660608401525084608083015260e060a083015261428260e08301856140d8565b82810360c084015261429481856140d8565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015280861660808401525060e060a083015261428260e08301856140d8565b6020815260006137d1602083018461404d565b604081526000614313604083018561404d565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b86815273ffffffffffffffffffffffffffffffffffffffff86166020820152846040820152831515606082015260c06080820152600061437b60c08301856140d8565b82810360a08401526104db81856140d8565b600061028061439c838a614122565b73ffffffffffffffffffffffffffffffffffffffff8089166101e08501528761020085015286610220850152816102408501526143db828501876140d8565b92508085166102608501525050979650505050505050565b6000610280614402838a614122565b876101e084015286610200840152856102208401528061024084015261442a818401866140d8565b91505073ffffffffffffffffffffffffffffffffffffffff8316610260830152979650505050505050565b60006101008201905084511515825262ffffff602086015116602083015265ffffffffffff6040860151166040830152606085015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080880151166080850152505066ffffffffffffff60a08601511660a08301528360c083015261301760e083018473ffffffffffffffffffffffffffffffffffffffff169052565b83815260606020820152600061450960608301856140d8565b905073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b66ffffffffffffff8716815273ffffffffffffffffffffffffffffffffffffffff86166020820152846040820152831515606082015260c06080820152600061437b60c08301856140d8565b6040516101e0810167ffffffffffffffff8111828210171561459f5761459f6147d6565b60405290565b60405160c0810167ffffffffffffffff8111828210171561459f5761459f6147d6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561460f5761460f6147d6565b604052919050565b600067ffffffffffffffff821115614631576146316147d6565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000821982111561467057614670614749565b500190565b60008282101561468757614687614749565b500390565b60005b838110156146a757818101518382015260200161468f565b838111156146b6576000848401525b50505050565b600181811c908216806146d057607f821691505b6020821081141561470a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561474257614742614749565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461265957600080fd5b801515811461265957600080fdfea2646970667358221220255fba45a44616680528a6a423a6e3ddfdf64c1b466f37f9ecbe195425e0093864736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80638da5cb5b116100c0578063c41c2f2411610074578063d930c60c11610059578063d930c60c146103ed578063f2fde38b1461040d578063fc0c546a1461042d57600080fd5b8063c41c2f2414610386578063c89e4361146103ba57600080fd5b8063ad007d63116100a5578063ad007d6314610312578063b5a6aed714610346578063b6cf978e1461036657600080fd5b80638da5cb5b146102b3578063975057e7146102de57600080fd5b80635de603141161011757806389701db5116100fc57806389701db5146102325780638af56094146102525780638b79543c1461027f57600080fd5b80635de60314146101fd578063715018a61461021d57600080fd5b806303930453146101495780632bdfe0041461016f578063405b84fa146101c857806342373472146101ea575b600080fd5b61015c610157366004613e7d565b610461565b6040519081526020015b60405180910390f35b34801561017b57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610166565b3480156101d457600080fd5b506101e86101e3366004613f25565b6104e8565b005b6101e86101f8366004613f55565b610b3f565b34801561020957600080fd5b5061015c610218366004613e64565b610cc6565b34801561022957600080fd5b506101e8610d8d565b34801561023e57600080fd5b506101e861024d366004613e64565b610e1a565b34801561025e57600080fd5b5061027261026d366004613e64565b6113d5565b60405161016691906142ed565b34801561028b57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b3480156102bf57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101a3565b3480156102ea57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b34801561031e57600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b34801561035257600080fd5b5061015c610361366004613f9c565b611506565b34801561037257600080fd5b5061015c610381366004613b29565b611bf3565b34801561039257600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c657600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101a3565b3480156103f957600080fd5b5061015c610408366004613fe9565b612122565b34801561041957600080fd5b506101e8610428366004613aef565b61252c565b34801561043957600080fd5b506101a37f000000000000000000000000000000000000000000000000000000000000000081565b60006104db348a8a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061265c92505050565b9998505050505050505050565b6002600154141561055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156105e557600080fd5b505afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190613b0c565b8260053373ffffffffffffffffffffffffffffffffffffffff8416148061071257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190613d21565b806107eb57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190613d21565b610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b8373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190613b0c565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834643a20494e434f4d50415449424c4500000000000000000000000000006044820152606401610551565b6040517f6bb6a5ad000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636bb6a5ad90602401602060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190613d3e565b90508015610ae157604080517f423734720000000000000000000000000000000000000000000000000000000081526004810188905260248101919091526000604482015273ffffffffffffffffffffffffffffffffffffffff86169063423734729083906064016000604051808303818588803b158015610ac757600080fd5b505af1158015610adb573d6000803e3d6000fd5b50505050505b6040805182815233602082015273ffffffffffffffffffffffffffffffffffffffff87169188917fa7519e5f94697b7f53e97c5eb46a0c730a296ab686ab8fd333835c5f735784eb910160405180910390a350506001805550505050565b60003411610ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f307834633a204e4f5f4f500000000000000000000000000000000000000000006044820152606401610551565b6040517fe7c8e3e3000000000000000000000000000000000000000000000000000000008152600481018390523460248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e7c8e3e3906044016101e060405180830381600087803b158015610c3b57600080fd5b505af1158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190613d57565b9050610c8583348361016001516128d6565b827f4ce42b42caaa564737146f357a8fa7fe24940fac843d392a69e23b32a1d766a3348433604051610cb9939291906144f0565b60405180910390a2505050565b6040517f9cc7f708000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690639cc7f7089060240160206040518083038186803b158015610d4f57600080fd5b505afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190613d3e565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610551565b610e186000612cac565b565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610ea057600080fd5b505afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190613b0c565b816006610efa60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148080610f4957503373ffffffffffffffffffffffffffffffffffffffff8516145b8061102257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190613d21565b806110fb57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190613d21565b611161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b600260015414156111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b600260018190556000868152602091825260408082208054825181860281018601909352808352929391929091849084015b828210156112f1576000848152602090819020604080516060810182526003860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff169383019390935260028301805492939291840191611260906146bc565b80601f016020809104026020016040519081016040528092919081815260200182805461128c906146bc565b80156112d95780601f106112ae576101008083540402835291602001916112d9565b820191906000526020600020905b8154815290600101906020018083116112bc57829003601f168201915b50505050508152505081526020019060010190611200565b50505050905060005b815181101561137757611365828281518110611318576113186147a7565b602002602001015160000151838381518110611336576113366147a7565b602002602001015160200151848481518110611354576113546147a7565b602002602001015160400151612d21565b8061136f81614710565b9150506112fa565b50600086815260026020526040812061138f916137d8565b857f510aa8139782d29bd981e9143e406221386c398f4db6fb543050981d1f5ce56e82336040516113c1929190614300565b60405180910390a250506001805550505050565b606060026000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156114fb576000848152602090819020604080516060810182526003860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff16938301939093526002830180549293929184019161146a906146bc565b80601f0160208091040260200160405190810160405280929190818152602001828054611496906146bc565b80156114e35780601f106114b8576101008083540402835291602001916114e3565b820191906000526020600020905b8154815290600101906020018083116114c657829003601f168201915b5050505050815250508152602001906001019061140a565b505050509050919050565b600060026001541415611575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561160057600080fd5b505afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190613b0c565b8660153373ffffffffffffffffffffffffffffffffffffffff8416148061172d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190613d21565b8061180657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156117ce57600080fd5b505afa1580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190613d21565b61186c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b6040517f08083a81000000000000000000000000000000000000000000000000000000008152600481018a9052306024820152604481018990526064810188905260848101879052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906308083a819060a40161020060405180830381600087803b15801561191557600080fd5b505af1158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190613d74565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018e9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156119db57600080fd5b505afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613b0c565b6040517f49491987000000000000000000000000000000000000000000000000000000008152600481018e905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634949198790602401602060405180830381600087803b158015611aa157600080fd5b505af1158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190613d3e565b9050600084610160015160001480611af157508d6001145b611b4c576040517f4665652066726f6d2040000000000000000000000000000000000000000000006020820152602a8101839052611b4790869086908690604a015b604051602081830303815290604052612f12565b611b4f565b60005b9050611b648a611b5f8387614675565b61301f565b608085015185518f91907f4d0b119651438cfed12585fc57e8ec9d9cc98bb1e5da27bdc4b7419d084500c28d8886611b9c8183614675565b6040805173ffffffffffffffffffffffffffffffffffffffff9095168552602085019390935291830152606082015233608082015260a00160405180910390a450509151600180559b9a5050505050505050505050565b600060026001541415611c62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b6002600155878760033373ffffffffffffffffffffffffffffffffffffffff84161480611d5d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611d2557600080fd5b505afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190613d21565b80611e3657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611dfe57600080fd5b505afa158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e369190613d21565b611e9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610551565b73ffffffffffffffffffffffffffffffffffffffff8716611f19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834633a205a45524f5f4144445245535300000000000000000000000000006044820152606401610551565b611fa8604051806101e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517f9225bf1a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690639225bf1a90612026908f908f908f908f908f908f908f906004016142a2565b600060405180830381600087803b15801561204057600080fd5b505af1158015612054573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261209a9190810190613da3565b98509550905084156120b0576120b0888661301f565b8b73ffffffffffffffffffffffffffffffffffffffff168b82600001517faab8cf20df3a8a65c8841921ab818fd69f2024c6ccfb8667c19c161d2f8438af848c8f8b8e336040516121069695949392919061438d565b60405180910390a4505060018055509098975050505050505050565b600060026001541415612191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026001556040517f41d0230c0000000000000000000000000000000000000000000000000000000081526004810187905260248101869052604481018590526064810184905260009081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906341d0230c9060840161020060405180830381600087803b15801561223957600080fd5b505af115801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122719190613d74565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018b9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156122ff57600080fd5b505afa158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190613b0c565b6040517f49491987000000000000000000000000000000000000000000000000000000008152600481018b905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634949198790602401602060405180830381600087803b1580156123c557600080fd5b505af11580156123d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fd9190613d3e565b905060008461016001516000148061241557508a6001145b612460576040517f4665652066726f6d2040000000000000000000000000000000000000000000006020820152602a810183905261245b90869086908690604a01611b33565b612463565b60005b905060006124bc866124758488614675565b6040517f5061796f75742066726f6d2040000000000000000000000000000000000000006020820152602d8101879052604d0160405160208183030381529060405261317e565b905080156124ce576124ce848261301f565b8b86600001517f4f97298058625e1e4cc1b7f86aa23c1d6ec6caa63932b87b289a9ea70252f777868e8987878f3360405161250f97969594939291906141d8565b60405180910390a350509251600180559998505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146125ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610551565b73ffffffffffffffffffffffffffffffffffffffff8116612650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610551565b61265981612cac565b50565b600073ffffffffffffffffffffffffffffffffffffffff86166126db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834653a205a45524f5f4144445245535300000000000000000000000000006044820152606401610551565b61276a604051806101e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329c705c7338d8d8d8c6127b95760006127bc565b60015b60ff16178d8c8c6040518863ffffffff1660e01b81526004016127e59796959493929190614237565b600060405180830381600087803b1580156127ff57600080fd5b505af1158015612813573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526128599190810190613dfe565b809950819450829550839650505050508873ffffffffffffffffffffffffffffffffffffffff168a84600001517f87791be5daaeac0e0338dfb9d98329a52c07852b9de21a9d8570e6de6b7754c2868f87878d336040516128bf969594939291906143f3565b60405180910390a450505198975050505050505050565b6000826128ef816128e88560c861465d565b60c86136cd565b6128f99190614675565b9050600060026000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612a21576000848152602090819020604080516060810182526003860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff169383019390935260028301805492939291840191612990906146bc565b80601f01602080910402602001604051908101604052809291908181526020018280546129bc906146bc565b8015612a095780601f106129de57610100808354040283529160200191612a09565b820191906000526020600020905b8154815290600101906020018083116129ec57829003601f168201915b50505050508152505081526020019060010190612930565b5050506000878152600260205260408120929350612a409291506137d8565b60005b8151811015612ca45782612b0a5760008681526002602052604090208251839083908110612a7357612a736147a7565b60209081029190910181015182546001808201855560009485529383902082516003909202019081558183015193810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9095169490941790935560408101518051919392612b02926002850192909101906137f9565b505050612c92565b818181518110612b1c57612b1c6147a7565b6020026020010151600001518310612b5e57818181518110612b4057612b406147a7565b60200260200101516000015183612b579190614675565b9250612c92565b60026000878152602001908152602001600020604051806060016040528085858581518110612b8f57612b8f6147a7565b602002602001015160000151612ba59190614675565b8152602001848481518110612bbc57612bbc6147a7565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff168152602001848481518110612bf557612bf56147a7565b60209081029190910181015160409081015190925283546001808201865560009586529482902084516003909202019081558382015194810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90961695909517909455908201518051929392612c8a92600285019201906137f9565b505050600092505b80612c9c81614710565b915050612a43565b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f862026500000000000000000000000000000000000000000000000000000000081526001600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b158015612dd457600080fd5b505afa158015612de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0c9190613b0c565b905073ffffffffffffffffffffffffffffffffffffffff81163014612eeb5760408051602081018252600080825291517f0393045300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416926303930453928892612e94926001928a9282918b91600401614338565b6020604051808303818588803b158015612ead57600080fd5b505af1158015612ec1573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612ee69190613d3e565b612f0b565b612f0b84600185600080876040518060200160405280600081525061265c565b5050505050565b6000612f318460c887610160015160c8612f2c919061465d565b6136cd565b612f3b9085614675565b905080612f4a57506000613017565b6101c0850151602f1c60011615612f6b57612f66818484612d21565b613017565b602085810151600090815260028083526040808320815160608101835286815273ffffffffffffffffffffffffffffffffffffffff898116828801908152938201898152835460018082018655948852968890208351600390980201968755935192860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169390911692909217909155905180519194613013938501929101906137f9565b5050505b949350505050565b80471015613089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610551565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146130e3576040519150601f19603f3d011682016040523d82523d6000602084013e6130e8565b606091505b5050905080613179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610551565b505050565b602083015160808401516040517f69e11cc5000000000000000000000000000000000000000000000000000000008152600481019290925260248201526001604482015282906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b15801561322057600080fd5b505afa158015613234573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261327a9190810190613be3565b905060005b81518110156136c457600082828151811061329c5761329c6147a7565b6020026020010151905060006132bf87836020015162ffffff16629896806136cd565b9050801561366c57608082015173ffffffffffffffffffffffffffffffffffffffff16156133b4576080820151602089015160a0840151606085015185516040517fc8e84e020000000000000000000000000000000000000000000000000000000081526004810187905260016024820152604481019490945266ffffffffffffff909216606484015273ffffffffffffffffffffffffffffffffffffffff908116608484015290151560a48301529091169063c8e84e0290839060c4016000604051808303818588803b15801561339657600080fd5b505af11580156133aa573d6000803e3d6000fd5b505050505061365f565b60a082015166ffffffffffffff16156136515760a08201516040517f8620265000000000000000000000000000000000000000000000000000000000815266ffffffffffffff909116600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b15801561348857600080fd5b505afa15801561349c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c09190613b0c565b905073ffffffffffffffffffffffffffffffffffffffff811661353f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307834643a204241445f53504c495400000000000000000000000000000000006044820152606401610551565b73ffffffffffffffffffffffffffffffffffffffff811630141561359757613591828460a0015166ffffffffffffff168560600151600087600001518c6040518060200160405280600081525061265c565b5061364b565b8073ffffffffffffffffffffffffffffffffffffffff166303930453838560a001518660600151600088600001518d604051806020016040528060008152506040518863ffffffff1660e01b81526004016135f79695949392919061452f565b6020604051808303818588803b15801561361057600080fd5b505af1158015613624573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136499190613d3e565b505b5061365f565b61365f82606001518261301f565b6136698186614675565b94505b602088015188516040517f890990238a14aca46c7c8272cc8161193b9583aa44c54cf65945e4441fcaf283906136a790869086903390614455565b60405180910390a3505080806136bc90614710565b91505061327f565b50509392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156137265783828161371c5761371c614778565b04925050506137d1565b838110613769576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610551565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b5080546000825560030290600052602060002090810190612659919061387d565b828054613805906146bc565b90600052602060002090601f016020900481019282613827576000855561386d565b82601f1061384057805160ff191683800117855561386d565b8280016001018555821561386d579182015b8281111561386d578251825591602001919060010190613852565b506138799291506138ca565b5090565b808211156138795760008082556001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556138c160028301826138df565b5060030161387d565b5b8082111561387957600081556001016138cb565b5080546138eb906146bc565b6000825580601f106138fb575050565b601f01602090049060005260206000209081019061265991906138ca565b600061392c61392784614617565b6145c8565b905082815283838301111561394057600080fd5b828260208301376000602084830101529392505050565b805161396281614805565b919050565b60008083601f84011261397957600080fd5b50813567ffffffffffffffff81111561399157600080fd5b6020830191508360208285010111156139a957600080fd5b9250929050565b600082601f8301126139c157600080fd5b6137d183833560208501613919565b600082601f8301126139e157600080fd5b81516139ef61392782614617565b818152846020838601011115613a0457600080fd5b61301782602083016020870161468c565b60006101e08284031215613a2857600080fd5b613a3061457b565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a0820152613a7460c08301613957565b60c082015260e08281015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c09182015191810191909152919050565b805166ffffffffffffff8116811461396257600080fd5b600060208284031215613b0157600080fd5b81356137d181614805565b600060208284031215613b1e57600080fd5b81516137d181614805565b600080600080600080600060e0888a031215613b4457600080fd5b8735613b4f81614805565b96506020880135955060408801359450606088013593506080880135613b7481614805565b925060a088013567ffffffffffffffff80821115613b9157600080fd5b613b9d8b838c016139b0565b935060c08a0135915080821115613bb357600080fd5b508801601f81018a13613bc557600080fd5b613bd48a823560208401613919565b91505092959891949750929550565b60006020808385031215613bf657600080fd5b825167ffffffffffffffff80821115613c0e57600080fd5b818501915085601f830112613c2257600080fd5b815181811115613c3457613c346147d6565b613c42848260051b016145c8565b818152848101925083850160c0808402860187018a1015613c6257600080fd5b600095505b83861015613d135780828b031215613c7e57600080fd5b613c866145a5565b8251613c9181614827565b81528288015162ffffff81168114613ca857600080fd5b8189015260408381015165ffffffffffff81168114613cc657600080fd5b908201526060613cd7848201613957565b908201526080613ce8848201613957565b9082015260a0613cf9848201613ad8565b908201528552600195909501949386019390810190613c67565b509098975050505050505050565b600060208284031215613d3357600080fd5b81516137d181614827565b600060208284031215613d5057600080fd5b5051919050565b60006101e08284031215613d6a57600080fd5b6137d18383613a15565b6000806102008385031215613d8857600080fd5b613d928484613a15565b91506101e083015190509250929050565b60008060006102208486031215613db957600080fd5b613dc38585613a15565b92506101e0840151915061020084015167ffffffffffffffff811115613de857600080fd5b613df4868287016139d0565b9150509250925092565b6000806000806102408587031215613e1557600080fd5b613e1f8686613a15565b93506101e08501519250610200850151915061022085015167ffffffffffffffff811115613e4c57600080fd5b613e58878288016139d0565b91505092959194509250565b600060208284031215613e7657600080fd5b5035919050565b60008060008060008060008060c0898b031215613e9957600080fd5b883597506020890135613eab81614805565b9650604089013595506060890135613ec281614827565b9450608089013567ffffffffffffffff80821115613edf57600080fd5b613eeb8c838d01613967565b909650945060a08b0135915080821115613f0457600080fd5b50613f118b828c01613967565b999c989b5096995094979396929594505050565b60008060408385031215613f3857600080fd5b823591506020830135613f4a81614805565b809150509250929050565b60008060408385031215613f6857600080fd5b82359150602083013567ffffffffffffffff811115613f8657600080fd5b613f92858286016139b0565b9150509250929050565b600080600080600060a08688031215613fb457600080fd5b853594506020860135935060408601359250606086013591506080860135613fdb81614805565b809150509295509295909350565b600080600080600060a0868803121561400157600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561403457600080fd5b614040888289016139b0565b9150509295509295909350565b600081518084526020808501808196508360051b8101915082860160005b858110156140cb5782840389528151805185528581015173ffffffffffffffffffffffffffffffffffffffff16868601526040908101516060918601829052906140b7818701836140d8565b9a87019a955050509084019060010161406b565b5091979650505050505050565b600081518084526140f081602086016020860161468c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015161417f60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e08181015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c090810151910152565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015285608084015260e060a084015261422060e08401866140d8565b915080841660c08401525098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015280871660608401525084608083015260e060a083015261428260e08301856140d8565b82810360c084015261429481856140d8565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015280861660808401525060e060a083015261428260e08301856140d8565b6020815260006137d1602083018461404d565b604081526000614313604083018561404d565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b86815273ffffffffffffffffffffffffffffffffffffffff86166020820152846040820152831515606082015260c06080820152600061437b60c08301856140d8565b82810360a08401526104db81856140d8565b600061028061439c838a614122565b73ffffffffffffffffffffffffffffffffffffffff8089166101e08501528761020085015286610220850152816102408501526143db828501876140d8565b92508085166102608501525050979650505050505050565b6000610280614402838a614122565b876101e084015286610200840152856102208401528061024084015261442a818401866140d8565b91505073ffffffffffffffffffffffffffffffffffffffff8316610260830152979650505050505050565b60006101008201905084511515825262ffffff602086015116602083015265ffffffffffff6040860151166040830152606085015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080880151166080850152505066ffffffffffffff60a08601511660a08301528360c083015261301760e083018473ffffffffffffffffffffffffffffffffffffffff169052565b83815260606020820152600061450960608301856140d8565b905073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b66ffffffffffffff8716815273ffffffffffffffffffffffffffffffffffffffff86166020820152846040820152831515606082015260c06080820152600061437b60c08301856140d8565b6040516101e0810167ffffffffffffffff8111828210171561459f5761459f6147d6565b60405290565b60405160c0810167ffffffffffffffff8111828210171561459f5761459f6147d6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561460f5761460f6147d6565b604052919050565b600067ffffffffffffffff821115614631576146316147d6565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000821982111561467057614670614749565b500190565b60008282101561468757614687614749565b500390565b60005b838110156146a757818101518382015260200161468f565b838111156146b6576000848401525b50505050565b600181811c908216806146d057607f821691505b6020821081141561470a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561474257614742614749565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461265957600080fd5b801515811461265957600080fdfea2646970667358221220255fba45a44616680528a6a423a6e3ddfdf64c1b466f37f9ecbe195425e0093864736f6c63430008060033",
  "devdoc": {
    "details": " A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time. Inherits from: IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.",
    "kind": "dev",
    "methods": {
      "addToBalanceOf(uint256,string)": {
        "params": {
          "_memo": "A memo to pass along to the emitted event.",
          "_projectId": "The ID of the project to which the funds received belong."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers.",
          "_splitsStore": "A contract that stores splits for each project.",
          "_store": "A contract that stores the terminal's data."
        }
      },
      "delegate()": {
        "returns": {
          "_0": "The delegate address."
        }
      },
      "distributePayoutsOf(uint256,uint256,uint256,uint256,string)": {
        "details": "Payouts are sent to the preprogrammed splits. Anyone can distribute payouts on a project's behalf.",
        "params": {
          "_amount": "The amount being distributed.",
          "_currency": "The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.",
          "_minReturnedWei": "The minimum number of wei that the amount should be valued at.",
          "_projectId": "The ID of the project having its payouts distributed."
        },
        "returns": {
          "_0": "The ID of the funding cycle during which the distribution was made."
        }
      },
      "ethBalanceOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to which the balance belongs."
        },
        "returns": {
          "_0": "The ETH balance."
        }
      },
      "heldFeesOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project for which fees are being held."
        },
        "returns": {
          "_0": "An array of fees that are being held."
        }
      },
      "migrate(uint256,address)": {
        "details": "Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_projectId": "The ID of the project being migrated.",
          "_to": "The terminal contract that will gain the project's funds."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pay(uint256,address,uint256,bool,string,bytes)": {
        "details": "The msg.value is the amount of the contribution in wei.",
        "params": {
          "_beneficiary": "The address to mint tokens for and pass along to the funding cycle's data source and delegate.",
          "_delegateMetadata": "Bytes to send along to the delegate, if one is provided.",
          "_memo": "A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.",
          "_minReturnedTokens": "The minimum number of tokens expected in return.",
          "_preferClaimedTokens": "A flag indicating whether the request prefers to issue tokens unstaked rather than staked.",
          "_projectId": "The ID of the project being paid."
        },
        "returns": {
          "_0": "The number of the funding cycle that the payment was made during."
        }
      },
      "processFees(uint256)": {
        "details": "Only a project owner, an operator, or the contract's owner can process held fees.",
        "params": {
          "_projectId": "The ID of the project whos held fees should be processed."
        }
      },
      "redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)": {
        "details": "Only a token's holder or a designated operator can redeem it.",
        "params": {
          "_beneficiary": "The address to send the ETH to. Send the address this contract to burn the count.",
          "_delegateMetadata": "Bytes to send along to the delegate, if one is provided.",
          "_holder": "The account to redeem tokens for.",
          "_memo": "A memo to pass along to the emitted event.",
          "_minReturnedWei": "The minimum amount of Wei expected in return.",
          "_projectId": "The ID of the project to which the tokens being redeemed belong.",
          "_tokenCount": "The number of tokens to redeem."
        },
        "returns": {
          "claimAmount": "The amount of ETH that the tokens were redeemed for, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useAllowanceOf(uint256,uint256,uint256,uint256,address)": {
        "details": " Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_amount": "The amount of the allowance to use.",
          "_beneficiary": "The address to send the funds to.",
          "_projectId": "The ID of the project to use the allowance of."
        },
        "returns": {
          "_0": "The ID of the funding cycle during which the allowance was use."
        }
      }
    },
    "stateVariables": {
      "token": {
        "details": "ETH is represented as address 0x0000000000000000000000000000000000042069."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addToBalanceOf(uint256,string)": {
        "notice": "Receives funds belonging to the specified project."
      },
      "delegate()": {
        "notice": "An address that serves as this terminal's delegate when making requests to juicebox ecosystem contracts."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "distributePayoutsOf(uint256,uint256,uint256,uint256,string)": {
        "notice": " Distributes payouts for a project according to the constraints of its current funding cycle."
      },
      "ethBalanceOf(uint256)": {
        "notice": " The ETH balance that this terminal holds for each project."
      },
      "heldFeesOf(uint256)": {
        "notice": " The fees that are currently being held to be processed later for each project."
      },
      "migrate(uint256,address)": {
        "notice": "Allows a project owner to migrate its funds and operations to a new terminal."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "pay(uint256,address,uint256,bool,string,bytes)": {
        "notice": "Contribute ETH to a project."
      },
      "processFees(uint256)": {
        "notice": "Process any fees that are being held for the project."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)": {
        "notice": "Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source."
      },
      "splitsStore()": {
        "notice": "The contract that stores splits for each project."
      },
      "store()": {
        "notice": " The contract that stores and manages the terminal's data."
      },
      "token()": {
        "notice": " The token that this terminal accepts. "
      },
      "useAllowanceOf(uint256,uint256,uint256,uint256,address)": {
        "notice": " Allows a project to send funds from its overflow up to the preconfigured allowance."
      }
    },
    "notice": "This contract manages all inflows and outflows of funds into the Juicebox ecosystem.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/v2/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 160,
        "contract": "contracts/v2/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17440,
        "contract": "contracts/v2/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_heldFeesOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_struct(JBFee)26022_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(JBFee)26022_storage)dyn_storage": {
        "base": "t_struct(JBFee)26022_storage",
        "encoding": "dynamic_array",
        "label": "struct JBFee[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_array(t_struct(JBFee)26022_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JBFee[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(JBFee)26022_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(JBFee)26022_storage": {
        "encoding": "inplace",
        "label": "struct JBFee",
        "members": [
          {
            "astId": 26017,
            "contract": "contracts/v2/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 26019,
            "contract": "contracts/v2/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "beneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 26021,
            "contract": "contracts/v2/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "memo",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}