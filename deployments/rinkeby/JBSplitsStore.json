{
  "address": "0x703d932403408d1a4Ae3Ea2921207d2f550e2e67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "percent",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetSplit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "percent",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct JBSplit[]",
          "name": "_splits",
          "type": "tuple[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        }
      ],
      "name": "splitsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "percent",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct JBSplit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x371cc8c5ad5a6f9b5395daf0f731c5288651ca7dea828fcf3f8707ef2022b43f",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x703d932403408d1a4Ae3Ea2921207d2f550e2e67",
    "transactionIndex": 1,
    "gasUsed": "1151278",
    "logsBloom": "0x
    "blockHash": "0xc2cedc49dd6b2cd5f2d9179c72ca5ce2bedd4d62021f9eecd9f0e2ba41918fd9",
    "transactionHash": "0x371cc8c5ad5a6f9b5395daf0f731c5288651ca7dea828fcf3f8707ef2022b43f",
    "logs": [],
    "blockNumber": 9631500,
    "cumulativeGasUsed": "1204201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21c1E45E7EBC41f3ED0aB6660204d63c911c93a9",
    "0x0a75928644d0E25Dc9340c33d0D946Fabef2046C",
    "0xf4326041BE30a4b7fc4db9Bb6286fef458F71fe2"
  ],
  "solcInputHash": "5f321124cef92f5734094814cf45799b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"percent\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetSplit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"percent\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"_splits\",\"type\":\"tuple[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"}],\"name\":\"splitsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"percent\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\"}},\"set(uint256,uint256,uint256,(bool,uint24,uint48,address,address,uint56)[])\":{\"details\":\"Only the owner or operator of a project, or the current controller contract of the project, can set its splits.The new splits must include any currently set splits that are locked.\",\"params\":{\"_domain\":\"An identifier within which the splits should be considered active.\",\"_group\":\"An identifier between of splits being set. All splits within this _group must add up to within 100%.\",\"_projectId\":\"The ID of the project for which splits are being added.\",\"_splits\":\"The splits to set.\"}},\"splitsOf(uint256,uint256,uint256)\":{\"params\":{\"_domain\":\"An identifier within which the returned splits should be considered active.\",\"_group\":\"The identifying group of the splits.\",\"_projectId\":\"The ID of the project to get splits for.\"},\"returns\":{\"_0\":\"An array of all splits for the project.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"projects()\":{\"notice\":\" The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"set(uint256,uint256,uint256,(bool,uint24,uint48,address,address,uint56)[])\":{\"notice\":\" Sets a project's splits.\"},\"splitsOf(uint256,uint256,uint256)\":{\"notice\":\" Get all splits for the specified project ID, within the specified domain, for the specified group.\"}},\"notice\":\"Stores splits for each project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBSplitsStore.sol\":\"JBSplitsStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/v2/JBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './libraries/JBOperations.sol';\\n\\n// Inheritance\\nimport './interfaces/IJBSplitsStore.sol';\\nimport './interfaces/IJBDirectory.sol';\\nimport './abstract/JBOperatable.sol';\\n\\n/**\\n  @notice\\n  Stores splits for each project.\\n*/\\ncontract JBSplitsStore is IJBSplitsStore, JBOperatable {\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    All splits for each project ID's configurations.\\n\\n    _projectId is The ID of the project to get splits for.\\n    _domain is An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => JBSplit[]))) private _splitsOf;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Get all splits for the specified project ID, within the specified domain, for the specified group.\\n\\n    @param _projectId The ID of the project to get splits for.\\n    @param _domain An identifier within which the returned splits should be considered active.\\n    @param _group The identifying group of the splits.\\n\\n    @return An array of all splits for the project.\\n    */\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view override returns (JBSplit[] memory) {\\n    return _splitsOf[_projectId][_domain][_group];\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Sets a project's splits.\\n\\n    @dev\\n    Only the owner or operator of a project, or the current controller contract of the project, can set its splits.\\n\\n    @dev\\n    The new splits must include any currently set splits that are locked.\\n\\n    @param _projectId The ID of the project for which splits are being added.\\n    @param _domain An identifier within which the splits should be considered active.\\n    @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\\n    @param _splits The splits to set.\\n  */\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  )\\n    external\\n    override\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.SET_SPLITS,\\n      address(directory.controllerOf(_projectId)) == msg.sender\\n    )\\n  {\\n    // Get a reference to the project's current splits.\\n    JBSplit[] memory _currentSplits = _splitsOf[_projectId][_domain][_group];\\n\\n    // Check to see if all locked splits are included.\\n    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\\n      // If not locked, continue.\\n      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\\n\\n      // Keep a reference to whether or not the locked split being iterated on is included.\\n      bool _includesLocked = false;\\n\\n      for (uint256 _j = 0; _j < _splits.length; _j++) {\\n        // Check for sameness.\\n        if (\\n          _splits[_j].percent == _currentSplits[_i].percent &&\\n          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\\n          _splits[_j].allocator == _currentSplits[_i].allocator &&\\n          _splits[_j].projectId == _currentSplits[_i].projectId &&\\n          // Allow lock extention.\\n          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\\n        ) _includesLocked = true;\\n      }\\n      require(_includesLocked, '0x0f: SOME_LOCKED');\\n    }\\n\\n    // Delete from storage so splits can be repopulated.\\n    delete _splitsOf[_projectId][_domain][_group];\\n\\n    // Add up all the percents to make sure they cumulative are under 100%.\\n    uint256 _percentTotal = 0;\\n\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // The percent should be greater than 0.\\n      require(_splits[_i].percent > 0, '0x10: BAD_SPLIT_PERCENT');\\n\\n      // The allocator and the beneficiary shouldn't both be the zero address.\\n      require(\\n        _splits[_i].allocator != IJBSplitAllocator(address(0)) ||\\n          _splits[_i].beneficiary != address(0),\\n        '0x11: ZERO_ADDRESS'\\n      );\\n\\n      // Add to the total percents.\\n      _percentTotal = _percentTotal + _splits[_i].percent;\\n\\n      // The total percent should be at most 10000000.\\n      require(_percentTotal <= 10000000, '0x12: BAD_TOTAL_PERCENT');\\n\\n      // Push the new split into the project's list of splits.\\n      _splitsOf[_projectId][_domain][_group].push(_splits[_i]);\\n\\n      emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcf5fdc1d493b431aa2092285cbffc2098c54219d90f51709f87be13c044cc9bb\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    require(\\n      _override ||\\n        msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x8b5b41ab9dfe24ec6da1cbf2de40535d1af341a2fba0d531e959e2d25a514922\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function currencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e4385f3bc7b2c078211344a393f6f4c3256ee755d334c03e93d0483621bcfe3\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0xcc2fa4db1c2684f106e0353fad26b45fb0dc09027d3509d40d5e9fce84a07148\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x5ef8969ff2fc6c58e521f1f930e7fcf0330a421d1643d9e88ea2b30e137df553\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataCidOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0xa437875cce9e3e9da493b5109635a3f843a4de0ec08dfeedb68ad344bb14720f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBSplitAllocator {\\n  event Allocate(\\n    uint256 indexed projectId,\\n    uint256 indexed forProjectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _group,\\n    uint256 _projectId,\\n    uint256 _forProjectId,\\n    address _beneficiary,\\n    bool _preferClaimed\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xde20db5a2df3ba856337b7ec0c9b3fc14c5cbd4eb88bba5f71f259e8e43fcd44\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xe2f62536c63548587b291b2c37fd474e835df9a2a5829c7c49a3d5d280c7a2c9\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_HANDLE = 6;\\n  uint256 public constant SET_METADATA_CID = 7;\\n  uint256 public constant CLAIM_HANDLE = 8;\\n  uint256 public constant RENEW_HANDLE = 9;\\n  uint256 public constant ISSUE = 10;\\n  uint256 public constant CHANGE_TOKEN = 11;\\n  uint256 public constant MINT = 12;\\n  uint256 public constant BURN = 13;\\n  uint256 public constant TRANSFER = 14;\\n  uint256 public constant REQUIRE_CLAIM = 15;\\n  uint256 public constant SET_CONTROLLER = 16;\\n  uint256 public constant ADD_TERMINALS = 17;\\n  uint256 public constant REMOVE_TERMINAL = 18;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 19;\\n  uint256 public constant USE_ALLOWANCE = 20;\\n  uint256 public constant SET_SPLITS = 21;\\n}\\n\",\"keccak256\":\"0xb1ef002f9fe9aa4ebd36d678765e9a3d607b99ada900660e6f5d45b7e17c0053\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  // A duration has a minimum of 1000 seconds to prevent extractive miner behavior, see https://ethereum.stackexchange.com/questions/413/can-a-contract-safely-rely-on-block-timestamp.\\n  uint256 duration;\\n  // A number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  // If the number is 1000000001, the funding cycle is non-recurrin so there cannot be a next cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x34ff85de4898979b20db9c968c538588cc7acde263afc81c0b29ac2dbd821d4c\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // A number from 0-1000000001 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  // If the number is 1000000001, an non-recurring funding cycle will get made.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x448584648a8baf62f56e0cc5a434c793d172453b969360f7fdb31e612b28eab4\",\"license\":\"MIT\"},\"contracts/v2/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"},\"contracts/v2/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of 10000000.\\n  uint24 percent;\\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\\n  uint48 lockedUntil;\\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\\n  IJBSplitAllocator allocator;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the unstaked token prerence respected.\\n  uint56 projectId;\\n}\\n\",\"keccak256\":\"0x644dd9716b4990a57dd6726f07cf57bcb0b2bc8e7a24d40ae22e34addb373c5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200150d3803806200150d83398101604081905262000034916200005c565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000c9565b6000806000606084860312156200007257600080fd5b83516200007f81620000b0565b60208501519093506200009281620000b0565b6040850151909250620000a581620000b0565b809150509250925092565b6001600160a01b0381168114620000c657600080fd5b50565b60805160601c60a05160601c60c05160601c6113f16200011c60003960008181610122015261024d01526000818160af015261017301526000818160fb0152818161035e015261043701526113f16000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638b79543c116100505780638b79543c146100aa578063ad007d63146100f6578063c41c2f241461011d57600080fd5b80633e00f9801461006c57806369e11cc514610081575b600080fd5b61007f61007a366004610f88565b610144565b005b61009461008f366004610f5c565b610d62565b6040516100a191906110e4565b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a1565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156101ca57600080fd5b505afa1580156101de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102029190610f1b565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690528590601590339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561028f57600080fd5b505afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610f1b565b73ffffffffffffffffffffffffffffffffffffffff161480806102ff57503373ffffffffffffffffffffffffffffffffffffffff8516145b806103d857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610f3f565b806104b157506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561047957600080fd5b505afa15801561048d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b19190610f3f565b61051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b6000888152602081815260408083208a84528252808320898452825280832080548251818502810185019093528083529192909190849084015b828210156106165760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810462ffffff1684860152640100000000810465ffffffffffff16928401929092526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610556565b50505050905060005b81518110156108d45781818151811061063a5761063a61132d565b60200260200101516040015165ffffffffffff164210610659576108c2565b6000805b8851811015610858578383815181106106785761067861132d565b60200260200101516020015162ffffff1689828151811061069b5761069b61132d565b60200260200101516020015162ffffff1614801561071e57508383815181106106c6576106c661132d565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff168982815181106106fa576106fa61132d565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b801561078f57508383815181106107375761073761132d565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1689828151811061076b5761076b61132d565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16145b80156107e657508383815181106107a8576107a861132d565b602002602001015160a0015166ffffffffffffff168982815181106107cf576107cf61132d565b602002602001015160a0015166ffffffffffffff16145b801561083c57508383815181106107ff576107ff61132d565b60200260200101516040015165ffffffffffff168982815181106108255761082561132d565b60200260200101516040015165ffffffffffff1610155b1561084657600191505b80610850816112c5565b91505061065d565b50806108c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307830663a20534f4d455f4c4f434b45440000000000000000000000000000006044820152606401610513565b505b806108cc816112c5565b91505061061f565b506000898152602081815260408083208b845282528083208a845290915281206108fd91610e6b565b6000805b8751811015610d5557600088828151811061091e5761091e61132d565b60200260200101516020015162ffffff1611610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831303a204241445f53504c49545f50455243454e540000000000000000006044820152606401610513565b600073ffffffffffffffffffffffffffffffffffffffff168882815181106109c0576109c061132d565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16141580610a395750600073ffffffffffffffffffffffffffffffffffffffff16888281518110610a1457610a1461132d565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614155b610a9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307831313a205a45524f5f4144445245535300000000000000000000000000006044820152606401610513565b878181518110610ab157610ab161132d565b60200260200101516020015162ffffff1682610acd91906112ad565b915062989680821115610b3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831323a204241445f544f54414c5f50455243454e540000000000000000006044820152606401610513565b60008b8152602081815260408083208d845282528083208c845290915290208851899083908110610b6f57610b6f61132d565b6020908102919091018101518254600180820185556000948552938390208251600290920201805493830151604084015160608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009096169315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000ff169390931761010062ffffff90921691909102177fffff0000000000000000000000000000000000000000000000000000ffffffff1664010000000065ffffffffffff909316929092027fffff0000000000000000000000000000000000000000ffffffffffffffffffff16919091176a010000000000000000000073ffffffffffffffffffffffffffffffffffffffff9485160217815560808201519301805460a090920151939092167fffffffffff000000000000000000000000000000000000000000000000000000909116177401000000000000000000000000000000000000000066ffffffffffffff90931692909202919091179055875189908b908d907f33c56fcdc977ee383e9ac9cc97b29ca67ec657474ad88dbdabe304bdc8e5c406908c9086908110610d2457610d2461132d565b602002602001015133604051610d3b92919061119b565b60405180910390a480610d4d816112c5565b915050610901565b5050505050505050505050565b60008381526020818152604080832085845282528083208484528252808320805482518185028101850190935280835260609492939192909184015b82821015610e5e5760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810462ffffff1684860152640100000000810465ffffffffffff16928401929092526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610d9e565b5050505090509392505050565b5080546000825560020290600052602060002090810190610e8c9190610e8f565b50565b5b80821115610ef05780547fffff0000000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffff000000000000000000000000000000000000000000000000000000169055600201610e90565b5090565b8035610eff8161138b565b919050565b803566ffffffffffffff81168114610eff57600080fd5b600060208284031215610f2d57600080fd5b8151610f388161138b565b9392505050565b600060208284031215610f5157600080fd5b8151610f38816113ad565b600080600060608486031215610f7157600080fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610f9e57600080fd5b8435935060208086013593506040860135925060608087013567ffffffffffffffff80821115610fcd57600080fd5b818901915089601f830112610fe157600080fd5b813581811115610ff357610ff361135c565b611001858260051b0161125e565b818152858101925083860160c0808402860188018e101561102157600080fd5b600095505b838610156110d05780828f03121561103d57600080fd5b611045611235565b8235611050816113ad565b81528289013562ffffff8116811461106757600080fd5b818a0152604083013565ffffffffffff8116811461108457600080fd5b6040820152611094838901610ef4565b888201526110a460808401610ef4565b608082015260a06110b6818501610f04565b908201528552600195909501949387019390810190611026565b505080965050505050505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561118f5761117c83855180511515825262ffffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b9284019260c09290920191600101611100565b50909695505050505050565b60e08101611212828580511515825262ffffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b73ffffffffffffffffffffffffffffffffffffffff831660c08301529392505050565b60405160c0810167ffffffffffffffff811182821017156112585761125861135c565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156112a5576112a561135c565b604052919050565b600082198211156112c0576112c06112fe565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112f7576112f76112fe565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610e8c57600080fd5b8015158114610e8c57600080fdfea2646970667358221220b157b3229eaf4f743e0722f30bebeb822907b871c92c3d7297152dc39336fa0c64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "set(uint256,uint256,uint256,(bool,uint24,uint48,address,address,uint56)[])": {
        "details": "Only the owner or operator of a project, or the current controller contract of the project, can set its splits.The new splits must include any currently set splits that are locked.",
        "params": {
          "_domain": "An identifier within which the splits should be considered active.",
          "_group": "An identifier between of splits being set. All splits within this _group must add up to within 100%.",
          "_projectId": "The ID of the project for which splits are being added.",
          "_splits": "The splits to set."
        }
      },
      "splitsOf(uint256,uint256,uint256)": {
        "params": {
          "_domain": "An identifier within which the returned splits should be considered active.",
          "_group": "The identifying group of the splits.",
          "_projectId": "The ID of the project to get splits for."
        },
        "returns": {
          "_0": "An array of all splits for the project."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "projects()": {
        "notice": " The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "set(uint256,uint256,uint256,(bool,uint24,uint48,address,address,uint56)[])": {
        "notice": " Sets a project's splits."
      },
      "splitsOf(uint256,uint256,uint256)": {
        "notice": " Get all splits for the specified project ID, within the specified domain, for the specified group."
      }
    },
    "notice": "Stores splits for each project.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22406,
        "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
        "label": "_splitsOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(JBSplit)26207_storage)dyn_storage)))"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(JBSplit)26207_storage)dyn_storage": {
        "base": "t_struct(JBSplit)26207_storage",
        "encoding": "dynamic_array",
        "label": "struct JBSplit[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJBSplitAllocator)24980": {
        "encoding": "inplace",
        "label": "contract IJBSplitAllocator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(JBSplit)26207_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JBSplit[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(JBSplit)26207_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(JBSplit)26207_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct JBSplit[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(JBSplit)26207_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(JBSplit)26207_storage)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => struct JBSplit[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(JBSplit)26207_storage)dyn_storage))"
      },
      "t_struct(JBSplit)26207_storage": {
        "encoding": "inplace",
        "label": "struct JBSplit",
        "members": [
          {
            "astId": 26195,
            "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
            "label": "preferClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 26197,
            "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
            "label": "percent",
            "offset": 1,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 26199,
            "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
            "label": "lockedUntil",
            "offset": 4,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 26201,
            "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
            "label": "beneficiary",
            "offset": 10,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 26204,
            "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
            "label": "allocator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IJBSplitAllocator)24980"
          },
          {
            "astId": 26206,
            "contract": "contracts/v2/JBSplitsStore.sol:JBSplitsStore",
            "label": "projectId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      }
    }
  }
}
