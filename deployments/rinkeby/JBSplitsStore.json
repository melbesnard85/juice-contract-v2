{
  "address": "0xa63F15EcCA0fE86B48716CE53aAA8685A596e82f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_jbDirectory",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "indexed": false,
          "internalType": "struct Split",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetSplit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct Split[]",
          "name": "_splits",
          "type": "tuple[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        }
      ],
      "name": "splitsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct Split[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x80e4647e06a996344366ee8db23591103e65f18813d98985a3e6ae2e9fb54433",
  "receipt": {
    "to": null,
    "from": "0x754F37225CE0E30639093Af47C16ef057B544b4f",
    "contractAddress": "0xa63F15EcCA0fE86B48716CE53aAA8685A596e82f",
    "transactionIndex": 28,
    "gasUsed": "1101832",
    "logsBloom": "0x
    "blockHash": "0xb616813b663b3d8b7fb465fdd2868228355846589ed1f14b247844b6b1ece22e",
    "transactionHash": "0x80e4647e06a996344366ee8db23591103e65f18813d98985a3e6ae2e9fb54433",
    "logs": [],
    "blockNumber": 9320510,
    "cumulativeGasUsed": "5269706",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4D620E189b420249005FD38b22B1EA138cc0BeE",
    "0xf835913B60B870A3a14b6C7179fEDF0fEba49D93",
    "0x2DC1D364e52FCC7A3F3b5225813F0fcEC1ff715A"
  ],
  "solcInputHash": "096d8193c9ef3fa94853075f8aa2d2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_jbDirectory\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"indexed\":false,\"internalType\":\"struct Split\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetSplit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct Split[]\",\"name\":\"_splits\",\"type\":\"tuple[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"}],\"name\":\"splitsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct Split[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_jbDirectory\":\"The directory of terminals.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\"}},\"set(uint256,uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])\":{\"details\":\"Only the owner or operator of a project, or the current terminal of the project, can set its splits.The new splits must include any currently set splits that are locked.\",\"params\":{\"_domain\":\"An identifier within which the splits should be considered active.\",\"_group\":\"An identifier between of splits being set. All splits within this _group must add up to within 100%.\",\"_projectId\":\"The ID of the project for which splits are being added.\",\"_splits\":\"The splits to set.\"}},\"splitsOf(uint256,uint256,uint256)\":{\"params\":{\"_domain\":\"An identifier within which the returned splits should be considered active.\",\"_group\":\"The identifying group of the splits.\",\"_projectId\":\"The ID of the project to get splits for.\"},\"returns\":{\"_0\":\"An array of all splits for the project.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"directory()\":{\"notice\":\"The direct deposit terminals.\"},\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"projects()\":{\"notice\":\" The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"set(uint256,uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])\":{\"notice\":\" Sets a project's splits.\"},\"splitsOf(uint256,uint256,uint256)\":{\"notice\":\" Get all splits for the specified project ID, within the specified domain, for the specified group.\"}},\"notice\":\"Stores splits for each project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBSplitStore.sol\":\"JBSplitsStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/v2/JBSplitStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './libraries/JBOperations.sol';\\n\\n// Inheritance\\nimport './interfaces/IJBSplitsStore.sol';\\nimport './abstract/JBOperatable.sol';\\nimport './abstract/JBTerminalUtility.sol';\\n\\n/**\\n  @notice\\n  Stores splits for each project.\\n*/\\ncontract JBSplitsStore is IJBSplitsStore, JBOperatable, JBTerminalUtility {\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    All splits for each project ID's configurations.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => Split[]))) private _splitsOf;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Get all splits for the specified project ID, within the specified domain, for the specified group.\\n\\n    @param _projectId The ID of the project to get splits for.\\n    @param _domain An identifier within which the returned splits should be considered active.\\n    @param _group The identifying group of the splits.\\n\\n    @return An array of all splits for the project.\\n    */\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view override returns (Split[] memory) {\\n    return _splitsOf[_projectId][_domain][_group];\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n    @param _jbDirectory The directory of terminals.\\n    @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBDirectory _jbDirectory,\\n    IJBProjects _projects\\n  ) JBOperatable(_operatorStore) JBTerminalUtility(_jbDirectory) {\\n    projects = _projects;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Sets a project's splits.\\n\\n    @dev\\n    Only the owner or operator of a project, or the current terminal of the project, can set its splits.\\n\\n    @dev\\n    The new splits must include any currently set splits that are locked.\\n\\n    @param _projectId The ID of the project for which splits are being added.\\n    @param _domain An identifier within which the splits should be considered active.\\n    @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\\n    @param _splits The splits to set.\\n  */\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    Split[] memory _splits\\n  )\\n    external\\n    override\\n    requirePermissionAcceptingAlternateAddress(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.SET_SPLITS,\\n      address(directory.terminalOf(_projectId, address(0)))\\n    )\\n  {\\n    // Get a reference to the project's current splits.\\n    Split[] memory _currentSplits = _splitsOf[_projectId][_domain][_group];\\n\\n    // Check to see if all locked splits are included.\\n    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\\n      // If not locked, continue.\\n      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\\n\\n      // Keep a reference to whether or not the locked split being iterated on is included.\\n      bool _includesLocked = false;\\n\\n      for (uint256 _j = 0; _j < _splits.length; _j++) {\\n        // Check for sameness.\\n        if (\\n          _splits[_j].percent == _currentSplits[_i].percent &&\\n          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\\n          _splits[_j].allocator == _currentSplits[_i].allocator &&\\n          _splits[_j].projectId == _currentSplits[_i].projectId &&\\n          // Allow lock extention.\\n          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\\n        ) _includesLocked = true;\\n      }\\n      require(_includesLocked, '0x0f: SOME_LOCKED');\\n    }\\n\\n    // Delete from storage so splits can be repopulated.\\n    delete _splitsOf[_projectId][_domain][_group];\\n\\n    // Add up all the percents to make sure they cumulative are under 100%.\\n    uint256 _percentTotal = 0;\\n\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // The percent should be greater than 0.\\n      require(_splits[_i].percent > 0, '0x10: BAD_SPLIT_PERCENT');\\n\\n      // The allocator and the beneficiary shouldn't both be the zero address.\\n      require(\\n        _splits[_i].allocator != IJBSplitAllocator(address(0)) ||\\n          _splits[_i].beneficiary != address(0),\\n        '0x11: ZERO_ADDRESS'\\n      );\\n\\n      // Add to the total percents.\\n      _percentTotal = _percentTotal + _splits[_i].percent;\\n\\n      // The total percent should be less than 10000.\\n      require(_percentTotal <= 10000, '0x12: BAD_TOTAL_PERCENT');\\n\\n      // Push the new split into the project's list of splits.\\n      _splitsOf[_projectId][_domain][_group].push(_splits[_i]);\\n\\n      emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc088323699ea7b089cc638e2a414a1be586845fa62f038b778e2b2a0dbd35147\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingWildcardDomain(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAcceptingAlternateAddress(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    address _alternate\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        msg.sender == _alternate,\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /// @notice A contract storing operator assignments.\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x655a15455f818b2d070bccfc4c6f6db1c17a25df2cbbfac2d3349e1d5640d0e6\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBTerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBTerminalUtility.sol';\\n\\nabstract contract JBTerminalUtility is IJBTerminalUtility {\\n  modifier onlyTerminal(uint256 _projectId) {\\n    require(\\n      address(directory.terminalOf(_projectId, address(0))) == msg.sender,\\n      'TerminalUtility: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  // modifier onlyTerminalOrBootloader(uint256 _projectId) {\\n  //     require(\\n  //         msg.sender == address(directory.terminalOf(_projectId)) ||\\n  //             msg.sender == bootloader,\\n  //         \\\"TerminalUtility: UNAUTHORIZED\\\"\\n  //     );\\n  //     _;\\n  // }\\n\\n  /// @notice The direct deposit terminals.\\n  IJBDirectory public immutable override directory;\\n\\n  /// @notice The direct deposit terminals.\\n  // address public immutable override bootloader;\\n\\n  /** \\n      @param _directory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n    // bootloader = _bootloader;\\n  }\\n}\\n\",\"keccak256\":\"0x4e8e45e2eb66d29b359d682465a23eeaaab038af3771524bfb0e35ffc792d4b2\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\n\\ninterface IJBDirectory {\\n  event SetTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function terminalOf(uint256 _projectId, address _token) external view returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, address _terminal) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  // function setTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function transferTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x424a085a82a0fd0d3c9ea67f639ee4dbf44d9187af5e632e98490286cf8b78ee\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct OperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(OperatorData calldata _operatorData) external;\\n\\n  function setOperators(OperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0xcd7a7c0280e682eab835c2b716f5195ede3cc1358725470b0252d3e1ad49fa41\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _uri\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setUriOf(uint256 _projectId, string calldata _uri) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0x71aa7f550e070d6a722da7174df285ee9d32119d71a39ba51fcc7ca0ddaddef4\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBSplitAllocator {\\n  event Allocate(\\n    uint256 indexed projectId,\\n    uint256 indexed forProjectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _group,\\n    uint256 _projectId,\\n    uint256 _forProjectId,\\n    address _beneficiary,\\n    bool _preferUnstaked\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x6a3ac72fcb8443d3317b95a039ddb39b1e5ab26af86e0ff1f5b2ba729e571615\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nstruct Split {\\n  bool preferUnstaked;\\n  uint16 percent;\\n  uint48 lockedUntil;\\n  address payable beneficiary;\\n  IJBSplitAllocator allocator;\\n  uint56 projectId;\\n}\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    Split split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (Split[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    Split[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8c7b104ac4a8befcfa4bd15989e1ff0b7ee36c16ed88657f4b0e18092f166fdf\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBTerminal {\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTickets,\\n    bool _preferUnstakedTickets,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x9807eacb780b8a5a9c236913bd741a6386ff680d9513914900503d8754db2285\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBTerminalUtility {\\n  function directory() external view returns (IJBDirectory);\\n\\n  // function bootloader() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4bcc464fdb54b0d18eaf7b1818fdde4cb58720a9e1586aea7511ecc7d61bb90\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant CONFIGURE = 1;\\n  uint256 public constant PRINT_PREMINED_TOKENS = 2;\\n  uint256 public constant REDEEM = 3;\\n  uint256 public constant MIGRATE = 4;\\n  uint256 public constant SET_HANDLE = 5;\\n  uint256 public constant SET_URI = 6;\\n  uint256 public constant CLAIM_HANDLE = 7;\\n  uint256 public constant RENEW_HANDLE = 8;\\n  uint256 public constant ISSUE = 9;\\n  uint256 public constant STAKE = 10;\\n  uint256 public constant UNSTAKE = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant LOCK = 13;\\n  uint256 public constant SET_TERMINAL = 14;\\n  uint256 public constant USE_ALLOWANCE = 15;\\n  uint256 public constant BURN = 16;\\n  uint256 public constant MINT = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x7b48de5d74e6a38f3d8a57b5979052bd0ee55882c5d95f206992580a2e1a1d9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051620014123803806200141283398101604081905261003191610058565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526100bd565b60008060006060848603121561006d57600080fd5b8351610078816100a5565b6020850151909350610089816100a5565b604085015190925061009a816100a5565b809150509250925092565b6001600160a01b03811681146100ba57600080fd5b50565b60805160601c60a05160601c60c05160601c6113096200010960003960008181609a0152610279015260008181610122015261035801526000818160fb015261044a01526113096000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a1aa95b111610050578063a1aa95b1146100e1578063ad007d63146100f6578063c41c2f241461011d57600080fd5b806369e11cc51461006c5780638b79543c14610095575b600080fd5b61007f61007a366004610e7b565b610144565b60405161008c9190610ffe565b60405180910390f35b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6100f46100ef366004610ea7565b61024a565b005b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b60008381526020818152604080832085845282528083208484528252808320805482518185028101850190935280835260609492939192909184015b8282101561023d5760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810461ffff16848601526301000000810465ffffffffffff1692840192909252690100000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610180565b5050505090509392505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156102d057600080fd5b505afa1580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190610e3a565b6040517f532fbaee0000000000000000000000000000000000000000000000000000000081526004810186905260006024820152859060129073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063532fbaee9060440160206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190610e3a565b3373ffffffffffffffffffffffffffffffffffffffff851614806104c457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610e5e565b806104e457503373ffffffffffffffffffffffffffffffffffffffff8216145b61054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b6000888152602081815260408083208a84528252808320898452825280832080548251818502810185019093528083529192909190849084015b828210156106465760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810461ffff16848601526301000000810465ffffffffffff1692840192909252690100000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610589565b50505050905060005b81518110156109025781818151811061066a5761066a611245565b60200260200101516040015165ffffffffffff164210610689576108f0565b6000805b8851811015610886578383815181106106a8576106a8611245565b60200260200101516020015161ffff168982815181106106ca576106ca611245565b60200260200101516020015161ffff1614801561074c57508383815181106106f4576106f4611245565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1689828151811061072857610728611245565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b80156107bd575083838151811061076557610765611245565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1689828151811061079957610799611245565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16145b801561081457508383815181106107d6576107d6611245565b602002602001015160a0015166ffffffffffffff168982815181106107fd576107fd611245565b602002602001015160a0015166ffffffffffffff16145b801561086a575083838151811061082d5761082d611245565b60200260200101516040015165ffffffffffff1689828151811061085357610853611245565b60200260200101516040015165ffffffffffff1610155b1561087457600191505b8061087e816111dd565b91505061068d565b50806108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307830663a20534f4d455f4c4f434b45440000000000000000000000000000006044820152606401610546565b505b806108fa816111dd565b91505061064f565b506000898152602081815260408083208b845282528083208a8452909152812061092b91610d8a565b6000805b8751811015610d7d57600088828151811061094c5761094c611245565b60200260200101516020015161ffff16116109c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831303a204241445f53504c49545f50455243454e540000000000000000006044820152606401610546565b600073ffffffffffffffffffffffffffffffffffffffff168882815181106109ed576109ed611245565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16141580610a665750600073ffffffffffffffffffffffffffffffffffffffff16888281518110610a4157610a41611245565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614155b610acc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307831313a205a45524f5f4144445245535300000000000000000000000000006044820152606401610546565b878181518110610ade57610ade611245565b60200260200101516020015161ffff1682610af991906111c5565b9150612710821115610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831323a204241445f544f54414c5f50455243454e540000000000000000006044820152606401610546565b60008b8152602081815260408083208d845282528083208c845290915290208851899083908110610b9a57610b9a611245565b6020908102919091018101518254600180820185556000948552938390208251600290920201805493830151604084015160608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009096169315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff169390931761010061ffff90921691909102177fffffff0000000000000000000000000000000000000000000000000000ffffff16630100000065ffffffffffff909316929092027fffffff0000000000000000000000000000000000000000ffffffffffffffffff1691909117690100000000000000000073ffffffffffffffffffffffffffffffffffffffff9485160217815560808201519301805460a090920151939092167fffffffffff000000000000000000000000000000000000000000000000000000909116177401000000000000000000000000000000000000000066ffffffffffffff90931692909202919091179055875189908b908d907fbb710fc2d1bd013431de6e5eaea4fe9245f6ef5909cce6fd4878ce98d6213acc908c9086908110610d4c57610d4c611245565b602002602001015133604051610d639291906110b4565b60405180910390a480610d75816111dd565b91505061092f565b5050505050505050505050565b5080546000825560020290600052602060002090810190610dab9190610dae565b50565b5b80821115610e0f5780547fffffff00000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffff000000000000000000000000000000000000000000000000000000169055600201610daf565b5090565b8035610e1e816112a3565b919050565b803566ffffffffffffff81168114610e1e57600080fd5b600060208284031215610e4c57600080fd5b8151610e57816112a3565b9392505050565b600060208284031215610e7057600080fd5b8151610e57816112c5565b600080600060608486031215610e9057600080fd5b505081359360208301359350604090920135919050565b6000806000806080808688031215610ebe57600080fd5b8535945060208087013594506040870135935060608088013567ffffffffffffffff80821115610eed57600080fd5b818a0191508a601f830112610f0157600080fd5b813581811115610f1357610f13611274565b610f21858260051b01611176565b818152858101925083860160c08302850187018e1015610f4057600080fd5b600094505b82851015610fec5760c0818f031215610f5d57600080fd5b610f6561114d565b8135610f70816112c5565b81528188013561ffff81168114610f8657600080fd5b81890152604082013565ffffffffffff81168114610fa357600080fd5b6040820152610fb3828801610e13565b87820152610fc2898301610e13565b8982015260a0610fd3818401610e23565b908201528452600194909401939286019260c001610f45565b50999c989b5096995050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156110a85761109583855180511515825261ffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b9284019260c0929092019160010161101a565b50909695505050505050565b60e0810161112a828580511515825261ffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b73ffffffffffffffffffffffffffffffffffffffff831660c08301529392505050565b60405160c0810167ffffffffffffffff8111828210171561117057611170611274565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111bd576111bd611274565b604052919050565b600082198211156111d8576111d8611216565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561120f5761120f611216565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8015158114610dab57600080fdfea2646970667358221220ff129976df0e505e0b7f064e1b7f4ad960ddf36b8d762f90c8d1020df0e484a664736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063a1aa95b111610050578063a1aa95b1146100e1578063ad007d63146100f6578063c41c2f241461011d57600080fd5b806369e11cc51461006c5780638b79543c14610095575b600080fd5b61007f61007a366004610e7b565b610144565b60405161008c9190610ffe565b60405180910390f35b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6100f46100ef366004610ea7565b61024a565b005b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b60008381526020818152604080832085845282528083208484528252808320805482518185028101850190935280835260609492939192909184015b8282101561023d5760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810461ffff16848601526301000000810465ffffffffffff1692840192909252690100000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610180565b5050505090509392505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156102d057600080fd5b505afa1580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190610e3a565b6040517f532fbaee0000000000000000000000000000000000000000000000000000000081526004810186905260006024820152859060129073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063532fbaee9060440160206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190610e3a565b3373ffffffffffffffffffffffffffffffffffffffff851614806104c457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610e5e565b806104e457503373ffffffffffffffffffffffffffffffffffffffff8216145b61054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b6000888152602081815260408083208a84528252808320898452825280832080548251818502810185019093528083529192909190849084015b828210156106465760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810461ffff16848601526301000000810465ffffffffffff1692840192909252690100000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610589565b50505050905060005b81518110156109025781818151811061066a5761066a611245565b60200260200101516040015165ffffffffffff164210610689576108f0565b6000805b8851811015610886578383815181106106a8576106a8611245565b60200260200101516020015161ffff168982815181106106ca576106ca611245565b60200260200101516020015161ffff1614801561074c57508383815181106106f4576106f4611245565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1689828151811061072857610728611245565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b80156107bd575083838151811061076557610765611245565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1689828151811061079957610799611245565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16145b801561081457508383815181106107d6576107d6611245565b602002602001015160a0015166ffffffffffffff168982815181106107fd576107fd611245565b602002602001015160a0015166ffffffffffffff16145b801561086a575083838151811061082d5761082d611245565b60200260200101516040015165ffffffffffff1689828151811061085357610853611245565b60200260200101516040015165ffffffffffff1610155b1561087457600191505b8061087e816111dd565b91505061068d565b50806108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307830663a20534f4d455f4c4f434b45440000000000000000000000000000006044820152606401610546565b505b806108fa816111dd565b91505061064f565b506000898152602081815260408083208b845282528083208a8452909152812061092b91610d8a565b6000805b8751811015610d7d57600088828151811061094c5761094c611245565b60200260200101516020015161ffff16116109c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831303a204241445f53504c49545f50455243454e540000000000000000006044820152606401610546565b600073ffffffffffffffffffffffffffffffffffffffff168882815181106109ed576109ed611245565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16141580610a665750600073ffffffffffffffffffffffffffffffffffffffff16888281518110610a4157610a41611245565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614155b610acc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307831313a205a45524f5f4144445245535300000000000000000000000000006044820152606401610546565b878181518110610ade57610ade611245565b60200260200101516020015161ffff1682610af991906111c5565b9150612710821115610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831323a204241445f544f54414c5f50455243454e540000000000000000006044820152606401610546565b60008b8152602081815260408083208d845282528083208c845290915290208851899083908110610b9a57610b9a611245565b6020908102919091018101518254600180820185556000948552938390208251600290920201805493830151604084015160608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009096169315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff169390931761010061ffff90921691909102177fffffff0000000000000000000000000000000000000000000000000000ffffff16630100000065ffffffffffff909316929092027fffffff0000000000000000000000000000000000000000ffffffffffffffffff1691909117690100000000000000000073ffffffffffffffffffffffffffffffffffffffff9485160217815560808201519301805460a090920151939092167fffffffffff000000000000000000000000000000000000000000000000000000909116177401000000000000000000000000000000000000000066ffffffffffffff90931692909202919091179055875189908b908d907fbb710fc2d1bd013431de6e5eaea4fe9245f6ef5909cce6fd4878ce98d6213acc908c9086908110610d4c57610d4c611245565b602002602001015133604051610d639291906110b4565b60405180910390a480610d75816111dd565b91505061092f565b5050505050505050505050565b5080546000825560020290600052602060002090810190610dab9190610dae565b50565b5b80821115610e0f5780547fffffff00000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffff000000000000000000000000000000000000000000000000000000169055600201610daf565b5090565b8035610e1e816112a3565b919050565b803566ffffffffffffff81168114610e1e57600080fd5b600060208284031215610e4c57600080fd5b8151610e57816112a3565b9392505050565b600060208284031215610e7057600080fd5b8151610e57816112c5565b600080600060608486031215610e9057600080fd5b505081359360208301359350604090920135919050565b6000806000806080808688031215610ebe57600080fd5b8535945060208087013594506040870135935060608088013567ffffffffffffffff80821115610eed57600080fd5b818a0191508a601f830112610f0157600080fd5b813581811115610f1357610f13611274565b610f21858260051b01611176565b818152858101925083860160c08302850187018e1015610f4057600080fd5b600094505b82851015610fec5760c0818f031215610f5d57600080fd5b610f6561114d565b8135610f70816112c5565b81528188013561ffff81168114610f8657600080fd5b81890152604082013565ffffffffffff81168114610fa357600080fd5b6040820152610fb3828801610e13565b87820152610fc2898301610e13565b8982015260a0610fd3818401610e23565b908201528452600194909401939286019260c001610f45565b50999c989b5096995050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156110a85761109583855180511515825261ffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b9284019260c0929092019160010161101a565b50909695505050505050565b60e0810161112a828580511515825261ffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b73ffffffffffffffffffffffffffffffffffffffff831660c08301529392505050565b60405160c0810167ffffffffffffffff8111828210171561117057611170611274565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111bd576111bd611274565b604052919050565b600082198211156111d8576111d8611216565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561120f5761120f611216565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8015158114610dab57600080fdfea2646970667358221220ff129976df0e505e0b7f064e1b7f4ad960ddf36b8d762f90c8d1020df0e484a664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_jbDirectory": "The directory of terminals.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "set(uint256,uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])": {
        "details": "Only the owner or operator of a project, or the current terminal of the project, can set its splits.The new splits must include any currently set splits that are locked.",
        "params": {
          "_domain": "An identifier within which the splits should be considered active.",
          "_group": "An identifier between of splits being set. All splits within this _group must add up to within 100%.",
          "_projectId": "The ID of the project for which splits are being added.",
          "_splits": "The splits to set."
        }
      },
      "splitsOf(uint256,uint256,uint256)": {
        "params": {
          "_domain": "An identifier within which the returned splits should be considered active.",
          "_group": "The identifying group of the splits.",
          "_projectId": "The ID of the project to get splits for."
        },
        "returns": {
          "_0": "An array of all splits for the project."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "directory()": {
        "notice": "The direct deposit terminals."
      },
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "projects()": {
        "notice": " The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "set(uint256,uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])": {
        "notice": " Sets a project's splits."
      },
      "splitsOf(uint256,uint256,uint256)": {
        "notice": " Get all splits for the specified project ID, within the specified domain, for the specified group."
      }
    },
    "notice": "Stores splits for each project.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22140,
        "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
        "label": "_splitsOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Split)25138_storage)dyn_storage)))"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Split)25138_storage)dyn_storage": {
        "base": "t_struct(Split)25138_storage",
        "encoding": "dynamic_array",
        "label": "struct Split[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJBSplitAllocator)25119": {
        "encoding": "inplace",
        "label": "contract IJBSplitAllocator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(Split)25138_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Split[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Split)25138_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Split)25138_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Split[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(Split)25138_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Split)25138_storage)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => struct Split[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Split)25138_storage)dyn_storage))"
      },
      "t_struct(Split)25138_storage": {
        "encoding": "inplace",
        "label": "struct Split",
        "members": [
          {
            "astId": 25126,
            "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
            "label": "preferUnstaked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25128,
            "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
            "label": "percent",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 25130,
            "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
            "label": "lockedUntil",
            "offset": 3,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 25132,
            "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
            "label": "beneficiary",
            "offset": 9,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 25135,
            "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
            "label": "allocator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IJBSplitAllocator)25119"
          },
          {
            "astId": 25137,
            "contract": "contracts/v2/JBSplitStore.sol:JBSplitsStore",
            "label": "projectId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      }
    }
  }
}
