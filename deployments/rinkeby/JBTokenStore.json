{
  "address": "0x61d095f86c36B05446edd5a19DEAd11c703Be3F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedStakedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferUnstakedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "shouldUnstakeTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferUnstakedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTokens",
          "type": "bool"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issueFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedBalanceBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTokens",
          "type": "bool"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedTotalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOf",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4767ce8b2c563906518084430725bc4b751579936a6ad79e11a591e3e5937b07",
  "receipt": {
    "to": null,
    "from": "0x754F37225CE0E30639093Af47C16ef057B544b4f",
    "contractAddress": "0x61d095f86c36B05446edd5a19DEAd11c703Be3F0",
    "transactionIndex": 20,
    "gasUsed": "3811017",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1353825a4e67ed8c5e15943ce8c4d110abb4cd2f0ece7911d5b1bb32e705247e",
    "transactionHash": "0x4767ce8b2c563906518084430725bc4b751579936a6ad79e11a591e3e5937b07",
    "logs": [],
    "blockNumber": 9320505,
    "cumulativeGasUsed": "5710555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2DC1D364e52FCC7A3F3b5225813F0fcEC1ff715A",
    "0xC4D620E189b420249005FD38b22B1EA138cc0BeE",
    "0xf835913B60B870A3a14b6C7179fEDF0fEba49D93"
  ],
  "solcInputHash": "096d8193c9ef3fa94853075f8aa2d2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedStakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferUnstakedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldUnstakeTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferUnstakedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTokens\",\"type\":\"bool\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issueFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalanceBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTokens\",\"type\":\"bool\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTotalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Tokens can be either represented internally staked, or as unstaked ERC-20s. This contract manages these two representations and the conversion between the two.The total supply of a project's tokens and the balance of each account are calculated in this contract.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_holder\":\"The token holder to get a balance for.\",\"_projectId\":\"The project to get the `_hodler`s balance of.\"},\"returns\":{\"balance\":\"The balance.\"}},\"burnFrom(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current terminal can burn its tokens.\",\"params\":{\"_amount\":\"The amount of tokens being burned.\",\"_holder\":\"The address that owns the tokens being burned.\",\"_preferUnstakedTokens\":\"If the preference is to burn tokens that have been converted to ERC-20s.\",\"_projectId\":\"The ID of the project of the tokens being burned.\"}},\"constructor\":{\"params\":{\"_directory\":\"A directory of a project's current Juicebox terminal to receive payments in.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\"}},\"issueFor(uint256,string,string)\":{\"details\":\" Deploys an owner's Token ERC-20 token contract.\",\"params\":{\"_name\":\"The ERC-20's name.\",\"_projectId\":\"The ID of the project being issued tokens.\",\"_symbol\":\"The ERC-20's symbol.\"}},\"lockFor(address,uint256,uint256)\":{\"details\":\"Only a ticket holder or an operator can lock its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to lock.\",\"_holder\":\"The holder to lock tokens from.\",\"_projectId\":\"The ID of the project whos tokens are being locked.\"}},\"mintFor(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current terminal can mint its tokens.\",\"params\":{\"_amount\":\"The amount to mint.\",\"_holder\":\"The address receiving the new tokens.\",\"_preferUnstakedTokens\":\"Whether ERC20's should be converted automatically if they have been issued.\",\"_projectId\":\"The project to which the tokens belong.\"}},\"stakeFor(address,uint256,uint256)\":{\"details\":\"Only a ticket holder or an operator can stake its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to stake.\",\"_holder\":\"The owner of the tokens to stake.\",\"_projectId\":\"The ID of the project whos tokens are being staked.\"}},\"totalSupplyOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get the total supply of.\"},\"returns\":{\"supply\":\"The total supply.\"}},\"transferTo(address,address,uint256,uint256)\":{\"details\":\"Only a ticket holder or an operator can transfer its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to transfer.\",\"_holder\":\"The holder to transfer tokens from.\",\"_projectId\":\"The ID of the project whos tokens are being transfered.\",\"_recipient\":\"The recipient of the tokens.\"}},\"unlockFor(address,uint256,uint256)\":{\"details\":\"The address that locked the tokens must be the address that unlocks the tokens.\",\"params\":{\"_amount\":\"The amount of tokens to unlock.\",\"_holder\":\"The holder to unlock tokens from.\",\"_projectId\":\"The ID of the project whos tokens are being unlocked.\"}},\"unstakeFor(address,uint256,uint256)\":{\"details\":\"Only a token holder or an operator can unstake its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to unstake.\",\"_holder\":\"The owner of the tokens to unstake.\",\"_projectId\":\"The ID of the project whos tokens are being unstaked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\" The total balance of tokens a holder has for a specified project, including staked and unstaked tokens.\"},\"burnFrom(address,uint256,uint256,bool)\":{\"notice\":\" Burns tokens.\"},\"directory()\":{\"notice\":\"The direct deposit terminals.\"},\"issueFor(uint256,string,string)\":{\"notice\":\" Issues an owner's ERC-20 Tokens that'll be used when unstaking tokens.\"},\"lockFor(address,uint256,uint256)\":{\"notice\":\" Lock a project's tokens, preventing them from being redeemed and from converting to ERC20s.\"},\"mintFor(address,uint256,uint256,bool)\":{\"notice\":\" Mint new tokens.\"},\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"stakeFor(address,uint256,uint256)\":{\"notice\":\" Stakes ERC20 tokens by burning their supply and creating an internal staked version.\"},\"totalSupplyOf(uint256)\":{\"notice\":\" The total supply of tokens for each project, including staked and unstaked tokens.\"},\"transferTo(address,address,uint256,uint256)\":{\"notice\":\" Allows a ticket holder to transfer its tokens to another account, without unstaking to ERC-20s.\"},\"unlockFor(address,uint256,uint256)\":{\"notice\":\" Unlock a project's tokens.\"},\"unstakeFor(address,uint256,uint256)\":{\"notice\":\" Unstakes internal tokens by creating and distributing ERC20 tokens.\"}},\"notice\":\" Manage Token minting, burning, and account balances.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBTokenStore.sol\":\"JBTokenStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/v2/JBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\\n\\nimport './interfaces/IJBToken.sol';\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract JBToken is IJBToken, ERC20, ERC20Permit, Ownable {\\n  constructor(string memory _name, string memory _symbol)\\n    ERC20(_name, _symbol)\\n    ERC20Permit(_name)\\n  {}\\n\\n  function mint(address _account, uint256 _amount) external override onlyOwner {\\n    return _mint(_account, _amount);\\n  }\\n\\n  function burn(address _account, uint256 _amount) external override onlyOwner {\\n    return _burn(_account, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb2d8306cdfac694e51a30866f82eac10861422ab88825c90fb83091a82ee3928\",\"license\":\"MIT\"},\"contracts/v2/JBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './interfaces/IJBTokenStore.sol';\\nimport './abstract/JBOperatable.sol';\\nimport './abstract/JBTerminalUtility.sol';\\n\\nimport './libraries/JBOperations.sol';\\n\\nimport './JBToken.sol';\\n\\n/** \\n  @notice \\n  Manage Token minting, burning, and account balances.\\n\\n  @dev\\n  Tokens can be either represented internally staked, or as unstaked ERC-20s.\\n  This contract manages these two representations and the conversion between the two.\\n\\n  @dev\\n  The total supply of a project's tokens and the balance of each account are calculated in this contract.\\n*/\\ncontract JBTokenStore is JBTerminalUtility, JBOperatable, IJBTokenStore {\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /// @notice The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  IJBProjects public immutable override projects;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  // Each project's ERC20 Token tokens.\\n  mapping(uint256 => IJBToken) public override tokenOf;\\n\\n  // Each holder's balance of staked Tokens for each project.\\n  mapping(address => mapping(uint256 => uint256)) public override stakedBalanceOf;\\n\\n  // The total supply of staked tokens for each project.\\n  mapping(uint256 => uint256) public override stakedTotalSupplyOf;\\n\\n  // The amount of each holders tokens that are locked.\\n  mapping(address => mapping(uint256 => uint256)) public override lockedBalanceOf;\\n\\n  // The amount of each holders tokens that are locked by each address.\\n  mapping(address => mapping(address => mapping(uint256 => uint256)))\\n    public\\n    override lockedBalanceBy;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n      @notice \\n      The total supply of tokens for each project, including staked and unstaked tokens.\\n\\n      @param _projectId The ID of the project to get the total supply of.\\n\\n      @return supply The total supply.\\n    */\\n  function totalSupplyOf(uint256 _projectId) external view override returns (uint256 supply) {\\n    supply = stakedTotalSupplyOf[_projectId];\\n    IJBToken _token = tokenOf[_projectId];\\n    if (_token != IJBToken(address(0))) supply = supply + _token.totalSupply();\\n  }\\n\\n  /** \\n      @notice \\n      The total balance of tokens a holder has for a specified project, including staked and unstaked tokens.\\n\\n      @param _holder The token holder to get a balance for.\\n      @param _projectId The project to get the `_hodler`s balance of.\\n\\n      @return balance The balance.\\n    */\\n  function balanceOf(address _holder, uint256 _projectId)\\n    external\\n    view\\n    override\\n    returns (uint256 balance)\\n  {\\n    balance = stakedBalanceOf[_holder][_projectId];\\n    IJBToken _token = tokenOf[_projectId];\\n    if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_holder);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n      @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n      @param _operatorStore A contract storing operator assignments.\\n      @param _directory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n  constructor(\\n    IJBProjects _projects,\\n    IJBOperatorStore _operatorStore,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) JBTerminalUtility(_directory) {\\n    projects = _projects;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n        @notice \\n        Issues an owner's ERC-20 Tokens that'll be used when unstaking tokens.\\n\\n        @dev \\n        Deploys an owner's Token ERC-20 token contract.\\n\\n        @param _projectId The ID of the project being issued tokens.\\n        @param _name The ERC-20's name.\\n        @param _symbol The ERC-20's symbol.\\n    */\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE)\\n    returns (IJBToken token)\\n  {\\n    // There must be a name.\\n    require((bytes(_name).length > 0), 'EMPTY_NAME');\\n\\n    // There must be a symbol.\\n    require((bytes(_symbol).length > 0), 'EMPTY_SYMBOL');\\n\\n    // Only one ERC20 token can be issued.\\n    require(tokenOf[_projectId] == IJBToken(address(0)), 'ALREADY_ISSUED');\\n\\n    // Deploy the token contract.\\n    token = new JBToken(_name, _symbol);\\n\\n    // Store the token contract.\\n    tokenOf[_projectId] = token;\\n\\n    emit Issue(_projectId, token, _name, _symbol, msg.sender);\\n  }\\n\\n  /** \\n      @notice \\n      Mint new tokens.\\n\\n      @dev\\n      Only a project's current terminal can mint its tokens.\\n\\n      @param _holder The address receiving the new tokens.\\n      @param _projectId The project to which the tokens belong.\\n      @param _amount The amount to mint.\\n      @param _preferUnstakedTokens Whether ERC20's should be converted automatically if they have been issued.\\n    */\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferUnstakedTokens\\n  ) external override onlyTerminal(_projectId) {\\n    // An amount must be specified.\\n    require(_amount > 0, 'JBTokenStore::mint: NO_OP');\\n\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If there exists ERC-20 tokens and the caller prefers these unstaked tokens.\\n    bool _shouldUnstakeTokens = _preferUnstakedTokens && _token != IJBToken(address(0));\\n\\n    if (_shouldUnstakeTokens) {\\n      // Mint the equivalent amount of ERC20s.\\n      _token.mint(_holder, _amount);\\n    } else {\\n      // Add to the staked balance and total supply.\\n      stakedBalanceOf[_holder][_projectId] = stakedBalanceOf[_holder][_projectId] + _amount;\\n      stakedTotalSupplyOf[_projectId] = stakedTotalSupplyOf[_projectId] + _amount;\\n    }\\n\\n    emit Mint(\\n      _holder,\\n      _projectId,\\n      _amount,\\n      _shouldUnstakeTokens,\\n      _preferUnstakedTokens,\\n      msg.sender\\n    );\\n  }\\n\\n  /** \\n      @notice \\n      Burns tokens.\\n\\n      @dev\\n      Only a project's current terminal can burn its tokens.\\n\\n      @param _holder The address that owns the tokens being burned.\\n      @param _projectId The ID of the project of the tokens being burned.\\n      @param _amount The amount of tokens being burned.\\n      @param _preferUnstakedTokens If the preference is to burn tokens that have been converted to ERC-20s.\\n    */\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferUnstakedTokens\\n  ) external override onlyTerminal(_projectId) {\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Get a reference to the staked amount.\\n    uint256 _unlockedStakedBalance = stakedBalanceOf[_holder][_projectId] -\\n      lockedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the number of tokens there are.\\n    uint256 _unstakedBalanceOf = _token == IJBToken(address(0)) ? 0 : _token.balanceOf(_holder);\\n\\n    // There must be enough tokens.\\n    // Prevent potential overflow by not relying on addition.\\n    require(\\n      (_amount < _unstakedBalanceOf && _amount < _unlockedStakedBalance) ||\\n        (_amount >= _unstakedBalanceOf && _unlockedStakedBalance >= _amount - _unstakedBalanceOf) ||\\n        (_amount >= _unlockedStakedBalance &&\\n          _unstakedBalanceOf >= _amount - _unlockedStakedBalance),\\n      'INSUFFICIENT_FUNDS'\\n    );\\n\\n    // The amount of tokens to burn.\\n    uint256 _unstakedTokensToBurn;\\n\\n    // If there's no balance, redeem no tokens.\\n    if (_unstakedBalanceOf == 0) {\\n      _unstakedTokensToBurn = 0;\\n      // If prefer converted, redeem tokens before redeeming staked tokens.\\n    } else if (_preferUnstakedTokens) {\\n      _unstakedTokensToBurn = _unstakedBalanceOf >= _amount ? _amount : _unstakedBalanceOf;\\n      // Otherwise, redeem staked tokens before unstaked tokens.\\n    } else {\\n      _unstakedTokensToBurn = _unlockedStakedBalance >= _amount\\n        ? 0\\n        : _amount - _unlockedStakedBalance;\\n    }\\n\\n    // The amount of staked tokens to redeem.\\n    uint256 _stakedTokensToBurn = _amount - _unstakedTokensToBurn;\\n\\n    // burn the tokens.\\n    if (_unstakedTokensToBurn > 0) _token.burn(_holder, _unstakedTokensToBurn);\\n    if (_stakedTokensToBurn > 0) {\\n      // Reduce the holders balance and the total supply.\\n      stakedBalanceOf[_holder][_projectId] =\\n        stakedBalanceOf[_holder][_projectId] -\\n        _stakedTokensToBurn;\\n      stakedTotalSupplyOf[_projectId] = stakedTotalSupplyOf[_projectId] - _stakedTokensToBurn;\\n    }\\n\\n    emit Burn(\\n      _holder,\\n      _projectId,\\n      _amount,\\n      _unlockedStakedBalance,\\n      _preferUnstakedTokens,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n      @notice \\n      Stakes ERC20 tokens by burning their supply and creating an internal staked version.\\n\\n      @dev\\n      Only a ticket holder or an operator can stake its tokens.\\n\\n      @param _holder The owner of the tokens to stake.\\n      @param _projectId The ID of the project whos tokens are being staked.\\n      @param _amount The amount of tokens to stake.\\n     */\\n  function stakeFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  )\\n    external\\n    override\\n    requirePermissionAllowingWildcardDomain(_holder, _projectId, JBOperations.STAKE)\\n  {\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Tokens must have been issued.\\n    require(_token != IJBToken(address(0)), 'NOT_FOUND');\\n\\n    // Get a reference to the holder's current balance.\\n    uint256 _unstakedBalanceOf = _token.balanceOf(_holder);\\n\\n    // There must be enough balance to stake.\\n    require(_unstakedBalanceOf >= _amount, 'INSUFFICIENT_FUNDS');\\n\\n    // Burn the equivalent amount of ERC20s.\\n    _token.burn(_holder, _amount);\\n\\n    // Add the staked amount from the holder's balance.\\n    stakedBalanceOf[_holder][_projectId] = stakedBalanceOf[_holder][_projectId] + _amount;\\n\\n    // Add the staked amount from the project's total supply.\\n    stakedTotalSupplyOf[_projectId] = stakedTotalSupplyOf[_projectId] + _amount;\\n\\n    emit Stake(_holder, _projectId, _amount, msg.sender);\\n  }\\n\\n  /**\\n      @notice \\n      Unstakes internal tokens by creating and distributing ERC20 tokens.\\n\\n      @dev\\n      Only a token holder or an operator can unstake its tokens.\\n\\n      @param _holder The owner of the tokens to unstake.\\n      @param _projectId The ID of the project whos tokens are being unstaked.\\n      @param _amount The amount of tokens to unstake.\\n     */\\n  function unstakeFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  )\\n    external\\n    override\\n    requirePermissionAllowingWildcardDomain(_holder, _projectId, JBOperations.UNSTAKE)\\n  {\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Tokens must have been issued.\\n    require(_token != IJBToken(address(0)), 'NOT_FOUND');\\n\\n    // Get a reference to the amount of unstaked tokens.\\n    uint256 _unlockedStakedTokens = stakedBalanceOf[_holder][_projectId] -\\n      lockedBalanceOf[_holder][_projectId];\\n\\n    // There must be enough unlocked staked tokens to unstake.\\n    require(_unlockedStakedTokens >= _amount, 'INSUFFICIENT_FUNDS');\\n\\n    // Subtract the unstaked amount from the holder's balance.\\n    stakedBalanceOf[_holder][_projectId] = stakedBalanceOf[_holder][_projectId] - _amount;\\n\\n    // Subtract the unstaked amount from the project's total supply.\\n    stakedTotalSupplyOf[_projectId] = stakedTotalSupplyOf[_projectId] - _amount;\\n\\n    // Mint the equivalent amount of ERC20s.\\n    _token.mint(_holder, _amount);\\n\\n    emit Unstake(_holder, _projectId, _amount, msg.sender);\\n  }\\n\\n  /** \\n      @notice \\n      Lock a project's tokens, preventing them from being redeemed and from converting to ERC20s.\\n\\n      @dev\\n      Only a ticket holder or an operator can lock its tokens.\\n\\n      @param _holder The holder to lock tokens from.\\n      @param _projectId The ID of the project whos tokens are being locked.\\n      @param _amount The amount of tokens to lock.\\n    */\\n  function lockFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  )\\n    external\\n    override\\n    requirePermissionAllowingWildcardDomain(_holder, _projectId, JBOperations.LOCK)\\n  {\\n    // Amount must be greater than 0.\\n    require(_amount > 0, 'NO_OP');\\n\\n    // The holder must have enough tokens to lock.\\n    require(\\n      stakedBalanceOf[_holder][_projectId] - lockedBalanceOf[_holder][_projectId] >= _amount,\\n      'INSUFFICIENT_FUNDS'\\n    );\\n\\n    // Update the lock.\\n    lockedBalanceOf[_holder][_projectId] = lockedBalanceOf[_holder][_projectId] + _amount;\\n    lockedBalanceBy[msg.sender][_holder][_projectId] =\\n      lockedBalanceBy[msg.sender][_holder][_projectId] +\\n      _amount;\\n\\n    emit Lock(_holder, _projectId, _amount, msg.sender);\\n  }\\n\\n  /** \\n      @notice \\n      Unlock a project's tokens.\\n\\n      @dev\\n      The address that locked the tokens must be the address that unlocks the tokens.\\n\\n      @param _holder The holder to unlock tokens from.\\n      @param _projectId The ID of the project whos tokens are being unlocked.\\n      @param _amount The amount of tokens to unlock.\\n    */\\n  function unlockFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external override {\\n    // Amount must be greater than 0.\\n    require(_amount > 0, 'NO_OP');\\n\\n    // There must be enough locked tokens to unlock.\\n    require(lockedBalanceBy[msg.sender][_holder][_projectId] >= _amount, 'INSUFFICIENT_FUNDS');\\n\\n    // Update the lock.\\n    lockedBalanceOf[_holder][_projectId] = lockedBalanceOf[_holder][_projectId] - _amount;\\n    lockedBalanceBy[msg.sender][_holder][_projectId] =\\n      lockedBalanceBy[msg.sender][_holder][_projectId] -\\n      _amount;\\n\\n    emit Unlock(_holder, _projectId, _amount, msg.sender);\\n  }\\n\\n  /** \\n      @notice \\n      Allows a ticket holder to transfer its tokens to another account, without unstaking to ERC-20s.\\n\\n      @dev\\n      Only a ticket holder or an operator can transfer its tokens.\\n\\n      @param _recipient The recipient of the tokens.\\n      @param _holder The holder to transfer tokens from.\\n      @param _projectId The ID of the project whos tokens are being transfered.\\n      @param _amount The amount of tokens to transfer.\\n    */\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  )\\n    external\\n    override\\n    requirePermissionAllowingWildcardDomain(_holder, _projectId, JBOperations.TRANSFER)\\n  {\\n    // Can't transfer to the zero address.\\n    require(_recipient != address(0), 'ZERO_ADDRESS');\\n\\n    // An address can't transfer to itself.\\n    require(_holder != _recipient, 'IDENTITY');\\n\\n    // There must be an amount to transfer.\\n    require(_amount > 0, 'NO_OP');\\n\\n    // Get a reference to the amount of unlocked staked tokens.\\n    uint256 _unlockedStakedTokens = stakedBalanceOf[_holder][_projectId] -\\n      lockedBalanceOf[_holder][_projectId];\\n\\n    // There must be enough unlocked staked tokens to transfer.\\n    require(_amount <= _unlockedStakedTokens, 'INSUFFICIENT_FUNDS');\\n\\n    // Subtract from the holder.\\n    stakedBalanceOf[_holder][_projectId] = stakedBalanceOf[_holder][_projectId] - _amount;\\n\\n    // Add the tokens to the recipient.\\n    stakedBalanceOf[_recipient][_projectId] = stakedBalanceOf[_recipient][_projectId] + _amount;\\n\\n    emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xc1ea362171ed8040994f23de29cdee1b46f81e693cf6d9edb1fbf358ac307357\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingWildcardDomain(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAcceptingAlternateAddress(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    address _alternate\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        msg.sender == _alternate,\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /// @notice A contract storing operator assignments.\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x655a15455f818b2d070bccfc4c6f6db1c17a25df2cbbfac2d3349e1d5640d0e6\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBTerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBTerminalUtility.sol';\\n\\nabstract contract JBTerminalUtility is IJBTerminalUtility {\\n  modifier onlyTerminal(uint256 _projectId) {\\n    require(\\n      address(directory.terminalOf(_projectId, address(0))) == msg.sender,\\n      'TerminalUtility: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  // modifier onlyTerminalOrBootloader(uint256 _projectId) {\\n  //     require(\\n  //         msg.sender == address(directory.terminalOf(_projectId)) ||\\n  //             msg.sender == bootloader,\\n  //         \\\"TerminalUtility: UNAUTHORIZED\\\"\\n  //     );\\n  //     _;\\n  // }\\n\\n  /// @notice The direct deposit terminals.\\n  IJBDirectory public immutable override directory;\\n\\n  /// @notice The direct deposit terminals.\\n  // address public immutable override bootloader;\\n\\n  /** \\n      @param _directory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n    // bootloader = _bootloader;\\n  }\\n}\\n\",\"keccak256\":\"0x4e8e45e2eb66d29b359d682465a23eeaaab038af3771524bfb0e35ffc792d4b2\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\n\\ninterface IJBDirectory {\\n  event SetTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function terminalOf(uint256 _projectId, address _token) external view returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, address _terminal) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  // function setTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function transferTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x424a085a82a0fd0d3c9ea67f639ee4dbf44d9187af5e632e98490286cf8b78ee\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct OperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(OperatorData calldata _operatorData) external;\\n\\n  function setOperators(OperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0xcd7a7c0280e682eab835c2b716f5195ede3cc1358725470b0252d3e1ad49fa41\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _uri\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setUriOf(uint256 _projectId, string calldata _uri) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0x71aa7f550e070d6a722da7174df285ee9d32119d71a39ba51fcc7ca0ddaddef4\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBTerminal {\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTickets,\\n    bool _preferUnstakedTickets,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x9807eacb780b8a5a9c236913bd741a6386ff680d9513914900503d8754db2285\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBTerminalUtility {\\n  function directory() external view returns (IJBDirectory);\\n\\n  // function bootloader() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4bcc464fdb54b0d18eaf7b1818fdde4cb58720a9e1586aea7511ecc7d61bb90\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IJBToken is IERC20 {\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xd8522082204219f5ee9e147ffc4f7d826a0aaeffb932ea9c21e8a7a4e3182819\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool shouldUnstakeTokens,\\n    bool preferUnstakedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unlockedStakedBalance,\\n    bool preferUnstakedTokens,\\n    address caller\\n  );\\n\\n  event Stake(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Unstake(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Lock(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Unlock(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function lockedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function lockedBalanceBy(\\n    address _operator,\\n    address _holder,\\n    uint256 _projectId\\n  ) external view returns (uint256);\\n\\n  function stakedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function stakedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferUnstakedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferUnstakedTokens\\n  ) external;\\n\\n  function stakeFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function unstakeFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function lockFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function unlockFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xbe55cbf1038293ac2a89dd02e3bce54ae65a90956db3b080022576413b5c7cc5\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant CONFIGURE = 1;\\n  uint256 public constant PRINT_PREMINED_TOKENS = 2;\\n  uint256 public constant REDEEM = 3;\\n  uint256 public constant MIGRATE = 4;\\n  uint256 public constant SET_HANDLE = 5;\\n  uint256 public constant SET_URI = 6;\\n  uint256 public constant CLAIM_HANDLE = 7;\\n  uint256 public constant RENEW_HANDLE = 8;\\n  uint256 public constant ISSUE = 9;\\n  uint256 public constant STAKE = 10;\\n  uint256 public constant UNSTAKE = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant LOCK = 13;\\n  uint256 public constant SET_TERMINAL = 14;\\n  uint256 public constant USE_ALLOWANCE = 15;\\n  uint256 public constant BURN = 16;\\n  uint256 public constant MINT = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x7b48de5d74e6a38f3d8a57b5979052bd0ee55882c5d95f206992580a2e1a1d9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620045b7380380620045b783398101604081905262000034916200005d565b6001600160601b0319606091821b811660805291811b821660a0529190911b1660c052620000ca565b6000806000606084860312156200007357600080fd5b83516200008081620000b1565b60208501519093506200009381620000b1565b6040850151909250620000a681620000b1565b809150509250925092565b6001600160a01b0381168114620000c757600080fd5b50565b60805160601c60a05160601c60c05160601c61446062000157600039600081816101ed01526117240152600081816102a101528181610504015281816105d501528181610a5f01528181610b3001528181610e3a01528181610f0b0152818161180c01528181611b160152611be7015260008181610342015281816112a90152611f3101526144606000f3fe60806040523480156200001157600080fd5b50600436106200014e5760003560e01c8063a7f2a70b11620000c0578063b6f7fdb9116200008b578063ceddd3e4116200006e578063ceddd3e41462000364578063d9638321146200037b578063ea78803f146200039257600080fd5b8063b6f7fdb91462000308578063c41c2f24146200033c57600080fd5b8063a7f2a70b1462000284578063ad007d63146200029b578063b357124d14620002c3578063b656463b14620002da57600080fd5b806383e25f8a116200011e5780638ef4c80711620001015780638ef4c80714620002285780638ffe9b941462000256578063906ebd0f146200026d57600080fd5b806383e25f8a14620001d05780638b79543c14620001e757600080fd5b8062fdd58e14620001535780635030724e146200017d57806358e9a81514620001a057806375b0d9cd14620001b9575b600080fd5b6200016a62000164366004620024c0565b620003be565b6040519081526020015b60405180910390f35b6200016a6200018e36600462002596565b60026020526000908152604090205481565b620001b7620001b1366004620024ef565b620004a1565b005b6200016a620001ca36600462002596565b62000948565b620001b7620001e1366004620024ef565b620009fc565b6200020f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200162000174565b6200016a62000239366004620024c0565b600360209081526000928352604080842090915290825290205481565b620001b76200026736600462002475565b62000dd7565b620001b76200027e36600462002527565b62001267565b6200020f62000295366004620025ca565b620016f2565b6200020f7f000000000000000000000000000000000000000000000000000000000000000081565b620001b7620002d4366004620024ef565b62001ab3565b6200016a620002eb366004620024c0565b600160209081526000928352604080842090915290825290205481565b6200016a620003193660046200242f565b600460209081526000938452604080852082529284528284209052825290205481565b6200020f7f000000000000000000000000000000000000000000000000000000000000000081565b620001b76200037536600462002527565b62001eef565b620001b76200038c366004620024ef565b620021ed565b6200020f620003a336600462002596565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b038083166000908152600160209081526040808320858452825280832054918390529091205490911680156200049a576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528216906370a082319060240160206040518083038186803b1580156200045057600080fd5b505afa15801562000465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200048b9190620025b0565b62000497908362002711565b91505b5092915050565b8282600a336001600160a01b03841614806200058257506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200054757600080fd5b505afa1580156200055c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000582919062002576565b806200065357506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200061857600080fd5b505afa1580156200062d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000653919062002576565b620006a55760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b6000858152602081905260409020546001600160a01b0316806200070c5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f464f554e44000000000000000000000000000000000000000000000060448201526064016200069c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908316906370a082319060240160206040518083038186803b1580156200076b57600080fd5b505afa15801562000780573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007a69190620025b0565b905085811015620007fa5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015260248201889052831690639dc29fac90604401600060405180830381600087803b1580156200085e57600080fd5b505af115801562000873573d6000803e3d6000fd5b5050506001600160a01b03891660009081526001602090815260408083208b8452909152902054620008a89150879062002711565b6001600160a01b03891660009081526001602090815260408083208b8452825280832093909355600290522054620008e290879062002711565b600088815260026020908152604091829020929092558051888152339281019290925288916001600160a01b038b16917feb43904edee62537f8f003e791630611e9d7d8b7e0f0c038639ebe7c970dd63091015b60405180910390a35050505050505050565b60008181526002602090815260408083205491839052909120546001600160a01b03168015620009f657806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009ac57600080fd5b505afa158015620009c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e79190620025b0565b620009f3908362002711565b91505b50919050565b8282600d336001600160a01b038416148062000add57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000aa257600080fd5b505afa15801562000ab7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000add919062002576565b8062000bae57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000b7357600080fd5b505afa15801562000b88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bae919062002576565b62000bfc5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6000841162000c4e5760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f5000000000000000000000000000000000000000000000000000000060448201526064016200069c565b6001600160a01b038616600081815260036020908152604080832089845282528083205493835260018252808320898452909152902054859162000c92916200272c565b101562000ce25760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b038616600090815260036020908152604080832088845290915290205462000d1390859062002711565b6001600160a01b03871660008181526003602090815260408083208a845282528083209490945533825260048152838220928252918252828120888252909152205462000d6290859062002711565b3360008181526004602090815260408083206001600160a01b038c168085529083528184208b855283529281902094909455835188815290810192909252879290917f75784e97e4541f1b3d2c44d8c51b419e33fb6de615033cfc6e6810db54ffa4fe910160405180910390a3505050505050565b8282600c336001600160a01b038416148062000eb857506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000e7d57600080fd5b505afa15801562000e92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eb8919062002576565b8062000f8957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000f4e57600080fd5b505afa15801562000f63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f89919062002576565b62000fd75760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6001600160a01b0387166200102f5760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016200069c565b866001600160a01b0316866001600160a01b03161415620010935760405162461bcd60e51b815260206004820152600860248201527f4944454e5449545900000000000000000000000000000000000000000000000060448201526064016200069c565b60008411620010e55760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f5000000000000000000000000000000000000000000000000000000060448201526064016200069c565b6001600160a01b038616600081815260036020908152604080832089845282528083205493835260018252808320898452909152812054909162001129916200272c565b9050808511156200117d5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b0387166000908152600160209081526040808320898452909152902054620011ae9086906200272c565b6001600160a01b0380891660009081526001602081815260408084208c8552825280842095909555928c16825282528281208982529091522054620011f590869062002711565b6001600160a01b0389811660008181526001602090815260408083208c84528252918290209490945580518981523394810194909452909289928b16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f532fbaee0000000000000000000000000000000000000000000000000000000081526004810184905260006024820152839033906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063532fbaee9060440160206040518083038186803b158015620012ec57600080fd5b505afa15801562001301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001327919062002408565b6001600160a01b0316146200137f5760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016200069c565b600084815260208181526040808320546001600160a01b03898116808652600385528386208a8752855283862054908652600185528386208a87529094529184205491169291620013d0916200272c565b905060006001600160a01b0383161562001480576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528416906370a082319060240160206040518083038186803b1580156200143f57600080fd5b505afa15801562001454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200147a9190620025b0565b62001483565b60005b905080861080156200149457508186105b80620014b75750808610158015620014b75750620014b381876200272c565b8210155b80620014da5750818610158015620014da5750620014d682876200272c565b8110155b620015285760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b60008162001539575060006200157b565b85156200155a578682101562001550578162001552565b865b90506200157b565b8683101562001575576200156f83886200272c565b62001578565b60005b90505b60006200158982896200272c565b9050811562001610576040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116600483015260248201849052861690639dc29fac90604401600060405180830381600087803b158015620015f657600080fd5b505af11580156200160b573d6000803e3d6000fd5b505050505b801562001692576001600160a01b038a1660009081526001602090815260408083208c8452909152902054620016489082906200272c565b6001600160a01b038b1660009081526001602090815260408083208d8452825280832093909355600290522054620016829082906200272c565b60008a8152600260205260409020555b60408051898152602081018690528815158183015233606082015290518a916001600160a01b038d16917fa006002ee8ea1e7bacf87ae6d874d4117de99e4aa814339c9a8199bcecd97fe39181900360800190a350505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b1580156200176f57600080fd5b505afa15801562001784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017aa919062002408565b866009336001600160a01b03841614806200188a57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200184f57600080fd5b505afa15801562001864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200188a919062002576565b620018d85760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b86620019275760405162461bcd60e51b815260206004820152600a60248201527f454d5054595f4e414d450000000000000000000000000000000000000000000060448201526064016200069c565b84620019765760405162461bcd60e51b815260206004820152600c60248201527f454d5054595f53594d424f4c000000000000000000000000000000000000000060448201526064016200069c565b6000898152602081905260409020546001600160a01b031615620019dd5760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f49535355454400000000000000000000000000000000000060448201526064016200069c565b87878787604051620019ef90620023ae565b620019fe949392919062002694565b604051809103906000f08015801562001a1b573d6000803e3d6000fd5b5060008a8152602081905260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091559051919550908a907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da9062001a9f908c908c908c908c903390620026ca565b60405180910390a350505095945050505050565b8282600b336001600160a01b038416148062001b9457506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001b5957600080fd5b505afa15801562001b6e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b94919062002576565b8062001c6557506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001c2a57600080fd5b505afa15801562001c3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c65919062002576565b62001cb35760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6000858152602081905260409020546001600160a01b03168062001d1a5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f464f554e44000000000000000000000000000000000000000000000060448201526064016200069c565b6001600160a01b03871660008181526003602090815260408083208a8452825280832054938352600182528083208a8452909152812054909162001d5e916200272c565b90508581101562001db25760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b03881660009081526001602090815260408083208a845290915290205462001de39087906200272c565b6001600160a01b03891660009081526001602090815260408083208b845282528083209390935560029052205462001e1d9087906200272c565b6000888152600260205260409081902091909155517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038981166004830152602482018890528316906340c10f1990604401600060405180830381600087803b15801562001e9357600080fd5b505af115801562001ea8573d6000803e3d6000fd5b5050604080518981523360208201528a93506001600160a01b038c1692507f8b264d23b1bf5d7d34440338fbbf8e868725712186df7862503c9620ea6e9589910162000936565b6040517f532fbaee0000000000000000000000000000000000000000000000000000000081526004810184905260006024820152839033906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063532fbaee9060440160206040518083038186803b15801562001f7457600080fd5b505afa15801562001f89573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001faf919062002408565b6001600160a01b031614620020075760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016200069c565b60008311620020595760405162461bcd60e51b815260206004820152601960248201527f4a42546f6b656e53746f72653a3a6d696e743a204e4f5f4f500000000000000060448201526064016200069c565b6000848152602081905260408120546001600160a01b0316908380156200208857506001600160a01b03821615155b9050801562002114576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018790528316906340c10f1990604401600060405180830381600087803b158015620020f557600080fd5b505af11580156200210a573d6000803e3d6000fd5b505050506200218f565b6001600160a01b03871660009081526001602090815260408083208984529091529020546200214590869062002711565b6001600160a01b03881660009081526001602090815260408083208a84528252808320939093556002905220546200217f90869062002711565b6000878152600260205260409020555b60408051868152821515602082015285151581830152336060820152905187916001600160a01b038a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b600081116200223f5760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f5000000000000000000000000000000000000000000000000000000060448201526064016200069c565b3360009081526004602090815260408083206001600160a01b03871684528252808320858452909152902054811115620022bc5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b0383166000908152600360209081526040808320858452909152902054620022ed9082906200272c565b6001600160a01b03841660008181526003602090815260408083208784528252808320949094553382526004815283822092825291825282812085825290915220546200233c9082906200272c565b3360008181526004602090815260408083206001600160a01b03891680855290835281842088855283529281902094909455835185815290810192909252849290917f17a47c3640e01bce0ad23c20907bc651cab2af1b0abc543ae1da119b43de8cca910160405180910390a3505050565b611c8d806200279e83390190565b60008083601f840112620023cf57600080fd5b50813567ffffffffffffffff811115620023e857600080fd5b6020830191508360208285010111156200240157600080fd5b9250929050565b6000602082840312156200241b57600080fd5b8151620024288162002775565b9392505050565b6000806000606084860312156200244557600080fd5b8335620024528162002775565b92506020840135620024648162002775565b929592945050506040919091013590565b600080600080608085870312156200248c57600080fd5b8435620024998162002775565b93506020850135620024ab8162002775565b93969395505050506040820135916060013590565b60008060408385031215620024d457600080fd5b8235620024e18162002775565b946020939093013593505050565b6000806000606084860312156200250557600080fd5b8335620025128162002775565b95602085013595506040909401359392505050565b600080600080608085870312156200253e57600080fd5b84356200254b8162002775565b9350602085013592506040850135915060608501356200256b816200278e565b939692955090935050565b6000602082840312156200258957600080fd5b815162002428816200278e565b600060208284031215620025a957600080fd5b5035919050565b600060208284031215620025c357600080fd5b5051919050565b600080600080600060608688031215620025e357600080fd5b85359450602086013567ffffffffffffffff808211156200260357600080fd5b6200261189838a01620023bc565b909650945060408801359150808211156200262b57600080fd5b506200263a88828901620023bc565b969995985093965092949392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000620026aa6040830186886200264b565b8281036020840152620026bf8185876200264b565b979650505050505050565b606081526000620026e06060830187896200264b565b8281036020840152620026f58186886200264b565b9150506001600160a01b03831660408301529695505050505050565b6000821982111562002727576200272762002746565b500190565b60008282101562002741576200274162002746565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001600160a01b03811681146200278b57600080fd5b50565b80151581146200278b57600080fdfe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162001c8d38038062001c8d8339810160408190526200005a91620002f6565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000199565b508051620000a690600490602084019062000199565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0181905281830198909852606081019590955260808086019390935230858301528051808603909201825293909201909252805194019390932090925261010052506200013f90503362000147565b5050620003b3565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a79062000360565b90600052602060002090601f016020900481019282620001cb576000855562000216565b82601f10620001e657805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000216578251825591602001919060010190620001f9565b506200022492915062000228565b5090565b5b8082111562000224576000815560010162000229565b600082601f8301126200025157600080fd5b81516001600160401b03808211156200026e576200026e6200039d565b604051601f8301601f19908116603f011681019082821181831017156200029957620002996200039d565b81604052838152602092508683858801011115620002b657600080fd5b600091505b83821015620002da5785820183015181830184015290820190620002bb565b83821115620002ec5760008385830101525b9695505050505050565b600080604083850312156200030a57600080fd5b82516001600160401b03808211156200032257600080fd5b62000330868387016200023f565b935060208501519150808211156200034757600080fd5b5062000356858286016200023f565b9150509250929050565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e051610100516101205161188a6200040360003960006107a601526000610e1501526000610e6401526000610e3f01526000610dc301526000610dec015261188a6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a457c2d711610081578063d505accf11610066578063d505accf146102b5578063dd62ed3e146102c8578063f2fde38b1461030e57600080fd5b8063a457c2d71461028f578063a9059cbb146102a257600080fd5b80638da5cb5b116100b25780638da5cb5b1461024c57806395d89b41146102745780639dc29fac1461027c57600080fd5b8063715018a6146102315780637ecebe001461023957600080fd5b8063313ce56711610124578063395093511161010957806339509351146101d357806340c10f19146101e657806370a08231146101fb57600080fd5b8063313ce567146101bc5780633644e515146101cb57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e610321565b60405161016b9190611706565b60405180910390f35b6101876101823660046116dc565b6103b3565b604051901515815260200161016b565b6002545b60405190815260200161016b565b6101876101b736600461162d565b6103c9565b6040516012815260200161016b565b61019b61049a565b6101876101e13660046116dc565b6104a9565b6101f96101f43660046116dc565b6104f2565b005b61019b6102093660046115d8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101f9610567565b61019b6102473660046115d8565b6105da565b60065460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016b565b61015e610607565b6101f961028a3660046116dc565b610616565b61018761029d3660046116dc565b610687565b6101876102b03660046116dc565b610745565b6101f96102c3366004611669565b610752565b61019b6102d63660046115fa565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101f961031c3660046115d8565b6108dd565b606060038054610330906117a8565b80601f016020809104026020016040519081016040528092919081815260200182805461035c906117a8565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b5050505050905090565b60006103c03384846109d9565b50600192915050565b60006103d6848484610b59565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156104825760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61048f85338584036109d9565b506001949350505050565b60006104a4610dbf565b905090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916103c09185906104ed908690611779565b6109d9565b60065473ffffffffffffffffffffffffffffffffffffffff1633146105595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b6105638282610eb2565b5050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b6105d86000610fb8565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120545b92915050565b606060048054610330906117a8565b60065473ffffffffffffffffffffffffffffffffffffffff16331461067d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b610563828261102f565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548281101561072e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610479565b61073b33858584036109d9565b5060019392505050565b60006103c0338484610b59565b834211156107a25760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610479565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107d18c6111e0565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061083982611215565b905060006108498287878761127e565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c65760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610479565b6108d18a8a8a6109d9565b50505050505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146109445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b73ffffffffffffffffffffffffffffffffffffffff81166109cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610479565b6109d681610fb8565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610a615760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff8216610aea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610be25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff8216610c6b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610d075760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610d4b908490611779565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610db191815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610e0e57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b73ffffffffffffffffffffffffffffffffffffffff8216610f155760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610479565b8060026000828254610f279190611779565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610f61908490611779565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff82166110b85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156111545760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290611190908490611791565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b4c565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b6000610601611222610dbf565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061128f878787876112a6565b9150915061129c816113be565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112dd57506000905060036113b5565b8460ff16601b141580156112f557508460ff16601c14155b1561130657506000905060046113b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561135a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166113ae576000600192509250506113b5565b9150600090505b94509492505050565b60008160048111156113d2576113d2611825565b14156113db5750565b60018160048111156113ef576113ef611825565b141561143d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610479565b600281600481111561145157611451611825565b141561149f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610479565b60038160048111156114b3576114b3611825565b14156115275760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610479565b600481600481111561153b5761153b611825565b14156109d65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610479565b803573ffffffffffffffffffffffffffffffffffffffff811681146115d357600080fd5b919050565b6000602082840312156115ea57600080fd5b6115f3826115af565b9392505050565b6000806040838503121561160d57600080fd5b611616836115af565b9150611624602084016115af565b90509250929050565b60008060006060848603121561164257600080fd5b61164b846115af565b9250611659602085016115af565b9150604084013590509250925092565b600080600080600080600060e0888a03121561168457600080fd5b61168d886115af565b965061169b602089016115af565b95506040880135945060608801359350608088013560ff811681146116bf57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156116ef57600080fd5b6116f8836115af565b946020939093013593505050565b600060208083528351808285015260005b8181101561173357858101830151858201604001528201611717565b81811115611745576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561178c5761178c6117f6565b500190565b6000828210156117a3576117a36117f6565b500390565b600181811c908216806117bc57607f821691505b6020821081141561120f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220dc89ebab2d0931200723ed9f7954163d24f34c62345a1a3f4db2f5506d728e2c64736f6c63430008060033a264697066735822122054b63e5e6871c91bb3030b042a86d96ac6679596d8e2bcd6b65c894749cfa7a864736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200014e5760003560e01c8063a7f2a70b11620000c0578063b6f7fdb9116200008b578063ceddd3e4116200006e578063ceddd3e41462000364578063d9638321146200037b578063ea78803f146200039257600080fd5b8063b6f7fdb91462000308578063c41c2f24146200033c57600080fd5b8063a7f2a70b1462000284578063ad007d63146200029b578063b357124d14620002c3578063b656463b14620002da57600080fd5b806383e25f8a116200011e5780638ef4c80711620001015780638ef4c80714620002285780638ffe9b941462000256578063906ebd0f146200026d57600080fd5b806383e25f8a14620001d05780638b79543c14620001e757600080fd5b8062fdd58e14620001535780635030724e146200017d57806358e9a81514620001a057806375b0d9cd14620001b9575b600080fd5b6200016a62000164366004620024c0565b620003be565b6040519081526020015b60405180910390f35b6200016a6200018e36600462002596565b60026020526000908152604090205481565b620001b7620001b1366004620024ef565b620004a1565b005b6200016a620001ca36600462002596565b62000948565b620001b7620001e1366004620024ef565b620009fc565b6200020f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200162000174565b6200016a62000239366004620024c0565b600360209081526000928352604080842090915290825290205481565b620001b76200026736600462002475565b62000dd7565b620001b76200027e36600462002527565b62001267565b6200020f62000295366004620025ca565b620016f2565b6200020f7f000000000000000000000000000000000000000000000000000000000000000081565b620001b7620002d4366004620024ef565b62001ab3565b6200016a620002eb366004620024c0565b600160209081526000928352604080842090915290825290205481565b6200016a620003193660046200242f565b600460209081526000938452604080852082529284528284209052825290205481565b6200020f7f000000000000000000000000000000000000000000000000000000000000000081565b620001b76200037536600462002527565b62001eef565b620001b76200038c366004620024ef565b620021ed565b6200020f620003a336600462002596565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b038083166000908152600160209081526040808320858452825280832054918390529091205490911680156200049a576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528216906370a082319060240160206040518083038186803b1580156200045057600080fd5b505afa15801562000465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200048b9190620025b0565b62000497908362002711565b91505b5092915050565b8282600a336001600160a01b03841614806200058257506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200054757600080fd5b505afa1580156200055c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000582919062002576565b806200065357506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200061857600080fd5b505afa1580156200062d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000653919062002576565b620006a55760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b6000858152602081905260409020546001600160a01b0316806200070c5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f464f554e44000000000000000000000000000000000000000000000060448201526064016200069c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908316906370a082319060240160206040518083038186803b1580156200076b57600080fd5b505afa15801562000780573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007a69190620025b0565b905085811015620007fa5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015260248201889052831690639dc29fac90604401600060405180830381600087803b1580156200085e57600080fd5b505af115801562000873573d6000803e3d6000fd5b5050506001600160a01b03891660009081526001602090815260408083208b8452909152902054620008a89150879062002711565b6001600160a01b03891660009081526001602090815260408083208b8452825280832093909355600290522054620008e290879062002711565b600088815260026020908152604091829020929092558051888152339281019290925288916001600160a01b038b16917feb43904edee62537f8f003e791630611e9d7d8b7e0f0c038639ebe7c970dd63091015b60405180910390a35050505050505050565b60008181526002602090815260408083205491839052909120546001600160a01b03168015620009f657806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009ac57600080fd5b505afa158015620009c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e79190620025b0565b620009f3908362002711565b91505b50919050565b8282600d336001600160a01b038416148062000add57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000aa257600080fd5b505afa15801562000ab7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000add919062002576565b8062000bae57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000b7357600080fd5b505afa15801562000b88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bae919062002576565b62000bfc5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6000841162000c4e5760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f5000000000000000000000000000000000000000000000000000000060448201526064016200069c565b6001600160a01b038616600081815260036020908152604080832089845282528083205493835260018252808320898452909152902054859162000c92916200272c565b101562000ce25760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b038616600090815260036020908152604080832088845290915290205462000d1390859062002711565b6001600160a01b03871660008181526003602090815260408083208a845282528083209490945533825260048152838220928252918252828120888252909152205462000d6290859062002711565b3360008181526004602090815260408083206001600160a01b038c168085529083528184208b855283529281902094909455835188815290810192909252879290917f75784e97e4541f1b3d2c44d8c51b419e33fb6de615033cfc6e6810db54ffa4fe910160405180910390a3505050505050565b8282600c336001600160a01b038416148062000eb857506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000e7d57600080fd5b505afa15801562000e92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eb8919062002576565b8062000f8957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000f4e57600080fd5b505afa15801562000f63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f89919062002576565b62000fd75760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6001600160a01b0387166200102f5760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016200069c565b866001600160a01b0316866001600160a01b03161415620010935760405162461bcd60e51b815260206004820152600860248201527f4944454e5449545900000000000000000000000000000000000000000000000060448201526064016200069c565b60008411620010e55760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f5000000000000000000000000000000000000000000000000000000060448201526064016200069c565b6001600160a01b038616600081815260036020908152604080832089845282528083205493835260018252808320898452909152812054909162001129916200272c565b9050808511156200117d5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b0387166000908152600160209081526040808320898452909152902054620011ae9086906200272c565b6001600160a01b0380891660009081526001602081815260408084208c8552825280842095909555928c16825282528281208982529091522054620011f590869062002711565b6001600160a01b0389811660008181526001602090815260408083208c84528252918290209490945580518981523394810194909452909289928b16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f532fbaee0000000000000000000000000000000000000000000000000000000081526004810184905260006024820152839033906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063532fbaee9060440160206040518083038186803b158015620012ec57600080fd5b505afa15801562001301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001327919062002408565b6001600160a01b0316146200137f5760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016200069c565b600084815260208181526040808320546001600160a01b03898116808652600385528386208a8752855283862054908652600185528386208a87529094529184205491169291620013d0916200272c565b905060006001600160a01b0383161562001480576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528416906370a082319060240160206040518083038186803b1580156200143f57600080fd5b505afa15801562001454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200147a9190620025b0565b62001483565b60005b905080861080156200149457508186105b80620014b75750808610158015620014b75750620014b381876200272c565b8210155b80620014da5750818610158015620014da5750620014d682876200272c565b8110155b620015285760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b60008162001539575060006200157b565b85156200155a578682101562001550578162001552565b865b90506200157b565b8683101562001575576200156f83886200272c565b62001578565b60005b90505b60006200158982896200272c565b9050811562001610576040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116600483015260248201849052861690639dc29fac90604401600060405180830381600087803b158015620015f657600080fd5b505af11580156200160b573d6000803e3d6000fd5b505050505b801562001692576001600160a01b038a1660009081526001602090815260408083208c8452909152902054620016489082906200272c565b6001600160a01b038b1660009081526001602090815260408083208d8452825280832093909355600290522054620016829082906200272c565b60008a8152600260205260409020555b60408051898152602081018690528815158183015233606082015290518a916001600160a01b038d16917fa006002ee8ea1e7bacf87ae6d874d4117de99e4aa814339c9a8199bcecd97fe39181900360800190a350505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b1580156200176f57600080fd5b505afa15801562001784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017aa919062002408565b866009336001600160a01b03841614806200188a57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200184f57600080fd5b505afa15801562001864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200188a919062002576565b620018d85760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b86620019275760405162461bcd60e51b815260206004820152600a60248201527f454d5054595f4e414d450000000000000000000000000000000000000000000060448201526064016200069c565b84620019765760405162461bcd60e51b815260206004820152600c60248201527f454d5054595f53594d424f4c000000000000000000000000000000000000000060448201526064016200069c565b6000898152602081905260409020546001600160a01b031615620019dd5760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f49535355454400000000000000000000000000000000000060448201526064016200069c565b87878787604051620019ef90620023ae565b620019fe949392919062002694565b604051809103906000f08015801562001a1b573d6000803e3d6000fd5b5060008a8152602081905260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091559051919550908a907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da9062001a9f908c908c908c908c903390620026ca565b60405180910390a350505095945050505050565b8282600b336001600160a01b038416148062001b9457506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001b5957600080fd5b505afa15801562001b6e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b94919062002576565b8062001c6557506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001c2a57600080fd5b505afa15801562001c3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c65919062002576565b62001cb35760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6000858152602081905260409020546001600160a01b03168062001d1a5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f464f554e44000000000000000000000000000000000000000000000060448201526064016200069c565b6001600160a01b03871660008181526003602090815260408083208a8452825280832054938352600182528083208a8452909152812054909162001d5e916200272c565b90508581101562001db25760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b03881660009081526001602090815260408083208a845290915290205462001de39087906200272c565b6001600160a01b03891660009081526001602090815260408083208b845282528083209390935560029052205462001e1d9087906200272c565b6000888152600260205260409081902091909155517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038981166004830152602482018890528316906340c10f1990604401600060405180830381600087803b15801562001e9357600080fd5b505af115801562001ea8573d6000803e3d6000fd5b5050604080518981523360208201528a93506001600160a01b038c1692507f8b264d23b1bf5d7d34440338fbbf8e868725712186df7862503c9620ea6e9589910162000936565b6040517f532fbaee0000000000000000000000000000000000000000000000000000000081526004810184905260006024820152839033906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063532fbaee9060440160206040518083038186803b15801562001f7457600080fd5b505afa15801562001f89573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001faf919062002408565b6001600160a01b031614620020075760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016200069c565b60008311620020595760405162461bcd60e51b815260206004820152601960248201527f4a42546f6b656e53746f72653a3a6d696e743a204e4f5f4f500000000000000060448201526064016200069c565b6000848152602081905260408120546001600160a01b0316908380156200208857506001600160a01b03821615155b9050801562002114576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018790528316906340c10f1990604401600060405180830381600087803b158015620020f557600080fd5b505af11580156200210a573d6000803e3d6000fd5b505050506200218f565b6001600160a01b03871660009081526001602090815260408083208984529091529020546200214590869062002711565b6001600160a01b03881660009081526001602090815260408083208a84528252808320939093556002905220546200217f90869062002711565b6000878152600260205260409020555b60408051868152821515602082015285151581830152336060820152905187916001600160a01b038a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b600081116200223f5760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f5000000000000000000000000000000000000000000000000000000060448201526064016200069c565b3360009081526004602090815260408083206001600160a01b03871684528252808320858452909152902054811115620022bc5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e4453000000000000000000000000000060448201526064016200069c565b6001600160a01b0383166000908152600360209081526040808320858452909152902054620022ed9082906200272c565b6001600160a01b03841660008181526003602090815260408083208784528252808320949094553382526004815283822092825291825282812085825290915220546200233c9082906200272c565b3360008181526004602090815260408083206001600160a01b03891680855290835281842088855283529281902094909455835185815290810192909252849290917f17a47c3640e01bce0ad23c20907bc651cab2af1b0abc543ae1da119b43de8cca910160405180910390a3505050565b611c8d806200279e83390190565b60008083601f840112620023cf57600080fd5b50813567ffffffffffffffff811115620023e857600080fd5b6020830191508360208285010111156200240157600080fd5b9250929050565b6000602082840312156200241b57600080fd5b8151620024288162002775565b9392505050565b6000806000606084860312156200244557600080fd5b8335620024528162002775565b92506020840135620024648162002775565b929592945050506040919091013590565b600080600080608085870312156200248c57600080fd5b8435620024998162002775565b93506020850135620024ab8162002775565b93969395505050506040820135916060013590565b60008060408385031215620024d457600080fd5b8235620024e18162002775565b946020939093013593505050565b6000806000606084860312156200250557600080fd5b8335620025128162002775565b95602085013595506040909401359392505050565b600080600080608085870312156200253e57600080fd5b84356200254b8162002775565b9350602085013592506040850135915060608501356200256b816200278e565b939692955090935050565b6000602082840312156200258957600080fd5b815162002428816200278e565b600060208284031215620025a957600080fd5b5035919050565b600060208284031215620025c357600080fd5b5051919050565b600080600080600060608688031215620025e357600080fd5b85359450602086013567ffffffffffffffff808211156200260357600080fd5b6200261189838a01620023bc565b909650945060408801359150808211156200262b57600080fd5b506200263a88828901620023bc565b969995985093965092949392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000620026aa6040830186886200264b565b8281036020840152620026bf8185876200264b565b979650505050505050565b606081526000620026e06060830187896200264b565b8281036020840152620026f58186886200264b565b9150506001600160a01b03831660408301529695505050505050565b6000821982111562002727576200272762002746565b500190565b60008282101562002741576200274162002746565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001600160a01b03811681146200278b57600080fd5b50565b80151581146200278b57600080fdfe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162001c8d38038062001c8d8339810160408190526200005a91620002f6565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000199565b508051620000a690600490602084019062000199565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0181905281830198909852606081019590955260808086019390935230858301528051808603909201825293909201909252805194019390932090925261010052506200013f90503362000147565b5050620003b3565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a79062000360565b90600052602060002090601f016020900481019282620001cb576000855562000216565b82601f10620001e657805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000216578251825591602001919060010190620001f9565b506200022492915062000228565b5090565b5b8082111562000224576000815560010162000229565b600082601f8301126200025157600080fd5b81516001600160401b03808211156200026e576200026e6200039d565b604051601f8301601f19908116603f011681019082821181831017156200029957620002996200039d565b81604052838152602092508683858801011115620002b657600080fd5b600091505b83821015620002da5785820183015181830184015290820190620002bb565b83821115620002ec5760008385830101525b9695505050505050565b600080604083850312156200030a57600080fd5b82516001600160401b03808211156200032257600080fd5b62000330868387016200023f565b935060208501519150808211156200034757600080fd5b5062000356858286016200023f565b9150509250929050565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e051610100516101205161188a6200040360003960006107a601526000610e1501526000610e6401526000610e3f01526000610dc301526000610dec015261188a6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a457c2d711610081578063d505accf11610066578063d505accf146102b5578063dd62ed3e146102c8578063f2fde38b1461030e57600080fd5b8063a457c2d71461028f578063a9059cbb146102a257600080fd5b80638da5cb5b116100b25780638da5cb5b1461024c57806395d89b41146102745780639dc29fac1461027c57600080fd5b8063715018a6146102315780637ecebe001461023957600080fd5b8063313ce56711610124578063395093511161010957806339509351146101d357806340c10f19146101e657806370a08231146101fb57600080fd5b8063313ce567146101bc5780633644e515146101cb57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e610321565b60405161016b9190611706565b60405180910390f35b6101876101823660046116dc565b6103b3565b604051901515815260200161016b565b6002545b60405190815260200161016b565b6101876101b736600461162d565b6103c9565b6040516012815260200161016b565b61019b61049a565b6101876101e13660046116dc565b6104a9565b6101f96101f43660046116dc565b6104f2565b005b61019b6102093660046115d8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101f9610567565b61019b6102473660046115d8565b6105da565b60065460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016b565b61015e610607565b6101f961028a3660046116dc565b610616565b61018761029d3660046116dc565b610687565b6101876102b03660046116dc565b610745565b6101f96102c3366004611669565b610752565b61019b6102d63660046115fa565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101f961031c3660046115d8565b6108dd565b606060038054610330906117a8565b80601f016020809104026020016040519081016040528092919081815260200182805461035c906117a8565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b5050505050905090565b60006103c03384846109d9565b50600192915050565b60006103d6848484610b59565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156104825760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61048f85338584036109d9565b506001949350505050565b60006104a4610dbf565b905090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916103c09185906104ed908690611779565b6109d9565b60065473ffffffffffffffffffffffffffffffffffffffff1633146105595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b6105638282610eb2565b5050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b6105d86000610fb8565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120545b92915050565b606060048054610330906117a8565b60065473ffffffffffffffffffffffffffffffffffffffff16331461067d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b610563828261102f565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548281101561072e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610479565b61073b33858584036109d9565b5060019392505050565b60006103c0338484610b59565b834211156107a25760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610479565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107d18c6111e0565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061083982611215565b905060006108498287878761127e565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c65760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610479565b6108d18a8a8a6109d9565b50505050505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146109445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610479565b73ffffffffffffffffffffffffffffffffffffffff81166109cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610479565b6109d681610fb8565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610a615760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff8216610aea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610be25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff8216610c6b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610d075760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610d4b908490611779565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610db191815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610e0e57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b73ffffffffffffffffffffffffffffffffffffffff8216610f155760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610479565b8060026000828254610f279190611779565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610f61908490611779565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff82166110b85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156111545760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610479565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290611190908490611791565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b4c565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b6000610601611222610dbf565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061128f878787876112a6565b9150915061129c816113be565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112dd57506000905060036113b5565b8460ff16601b141580156112f557508460ff16601c14155b1561130657506000905060046113b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561135a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166113ae576000600192509250506113b5565b9150600090505b94509492505050565b60008160048111156113d2576113d2611825565b14156113db5750565b60018160048111156113ef576113ef611825565b141561143d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610479565b600281600481111561145157611451611825565b141561149f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610479565b60038160048111156114b3576114b3611825565b14156115275760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610479565b600481600481111561153b5761153b611825565b14156109d65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610479565b803573ffffffffffffffffffffffffffffffffffffffff811681146115d357600080fd5b919050565b6000602082840312156115ea57600080fd5b6115f3826115af565b9392505050565b6000806040838503121561160d57600080fd5b611616836115af565b9150611624602084016115af565b90509250929050565b60008060006060848603121561164257600080fd5b61164b846115af565b9250611659602085016115af565b9150604084013590509250925092565b600080600080600080600060e0888a03121561168457600080fd5b61168d886115af565b965061169b602089016115af565b95506040880135945060608801359350608088013560ff811681146116bf57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156116ef57600080fd5b6116f8836115af565b946020939093013593505050565b600060208083528351808285015260005b8181101561173357858101830151858201604001528201611717565b81811115611745576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561178c5761178c6117f6565b500190565b6000828210156117a3576117a36117f6565b500390565b600181811c908216806117bc57607f821691505b6020821081141561120f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220dc89ebab2d0931200723ed9f7954163d24f34c62345a1a3f4db2f5506d728e2c64736f6c63430008060033a264697066735822122054b63e5e6871c91bb3030b042a86d96ac6679596d8e2bcd6b65c894749cfa7a864736f6c63430008060033",
  "devdoc": {
    "details": "Tokens can be either represented internally staked, or as unstaked ERC-20s. This contract manages these two representations and the conversion between the two.The total supply of a project's tokens and the balance of each account are calculated in this contract.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_holder": "The token holder to get a balance for.",
          "_projectId": "The project to get the `_hodler`s balance of."
        },
        "returns": {
          "balance": "The balance."
        }
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "details": "Only a project's current terminal can burn its tokens.",
        "params": {
          "_amount": "The amount of tokens being burned.",
          "_holder": "The address that owns the tokens being burned.",
          "_preferUnstakedTokens": "If the preference is to burn tokens that have been converted to ERC-20s.",
          "_projectId": "The ID of the project of the tokens being burned."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A directory of a project's current Juicebox terminal to receive payments in.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "issueFor(uint256,string,string)": {
        "details": " Deploys an owner's Token ERC-20 token contract.",
        "params": {
          "_name": "The ERC-20's name.",
          "_projectId": "The ID of the project being issued tokens.",
          "_symbol": "The ERC-20's symbol."
        }
      },
      "lockFor(address,uint256,uint256)": {
        "details": "Only a ticket holder or an operator can lock its tokens.",
        "params": {
          "_amount": "The amount of tokens to lock.",
          "_holder": "The holder to lock tokens from.",
          "_projectId": "The ID of the project whos tokens are being locked."
        }
      },
      "mintFor(address,uint256,uint256,bool)": {
        "details": "Only a project's current terminal can mint its tokens.",
        "params": {
          "_amount": "The amount to mint.",
          "_holder": "The address receiving the new tokens.",
          "_preferUnstakedTokens": "Whether ERC20's should be converted automatically if they have been issued.",
          "_projectId": "The project to which the tokens belong."
        }
      },
      "stakeFor(address,uint256,uint256)": {
        "details": "Only a ticket holder or an operator can stake its tokens.",
        "params": {
          "_amount": "The amount of tokens to stake.",
          "_holder": "The owner of the tokens to stake.",
          "_projectId": "The ID of the project whos tokens are being staked."
        }
      },
      "totalSupplyOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get the total supply of."
        },
        "returns": {
          "supply": "The total supply."
        }
      },
      "transferTo(address,address,uint256,uint256)": {
        "details": "Only a ticket holder or an operator can transfer its tokens.",
        "params": {
          "_amount": "The amount of tokens to transfer.",
          "_holder": "The holder to transfer tokens from.",
          "_projectId": "The ID of the project whos tokens are being transfered.",
          "_recipient": "The recipient of the tokens."
        }
      },
      "unlockFor(address,uint256,uint256)": {
        "details": "The address that locked the tokens must be the address that unlocks the tokens.",
        "params": {
          "_amount": "The amount of tokens to unlock.",
          "_holder": "The holder to unlock tokens from.",
          "_projectId": "The ID of the project whos tokens are being unlocked."
        }
      },
      "unstakeFor(address,uint256,uint256)": {
        "details": "Only a token holder or an operator can unstake its tokens.",
        "params": {
          "_amount": "The amount of tokens to unstake.",
          "_holder": "The owner of the tokens to unstake.",
          "_projectId": "The ID of the project whos tokens are being unstaked."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": " The total balance of tokens a holder has for a specified project, including staked and unstaked tokens."
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "notice": " Burns tokens."
      },
      "directory()": {
        "notice": "The direct deposit terminals."
      },
      "issueFor(uint256,string,string)": {
        "notice": " Issues an owner's ERC-20 Tokens that'll be used when unstaking tokens."
      },
      "lockFor(address,uint256,uint256)": {
        "notice": " Lock a project's tokens, preventing them from being redeemed and from converting to ERC20s."
      },
      "mintFor(address,uint256,uint256,bool)": {
        "notice": " Mint new tokens."
      },
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "stakeFor(address,uint256,uint256)": {
        "notice": " Stakes ERC20 tokens by burning their supply and creating an internal staked version."
      },
      "totalSupplyOf(uint256)": {
        "notice": " The total supply of tokens for each project, including staked and unstaked tokens."
      },
      "transferTo(address,address,uint256,uint256)": {
        "notice": " Allows a ticket holder to transfer its tokens to another account, without unstaking to ERC-20s."
      },
      "unlockFor(address,uint256,uint256)": {
        "notice": " Unlock a project's tokens."
      },
      "unstakeFor(address,uint256,uint256)": {
        "notice": " Unstakes internal tokens by creating and distributing ERC20 tokens."
      }
    },
    "notice": " Manage Token minting, burning, and account balances.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22529,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "tokenOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(IJBToken)25242)"
      },
      {
        "astId": 22536,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "stakedBalanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 22541,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "stakedTotalSupplyOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22548,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "lockedBalanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 22557,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "lockedBalanceBy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IJBToken)25242": {
        "encoding": "inplace",
        "label": "contract IJBToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_contract(IJBToken)25242)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IJBToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IJBToken)25242"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
