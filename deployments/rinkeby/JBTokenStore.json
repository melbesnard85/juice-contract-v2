{
  "address": "0x9afc7156d8034A6Bbd4297D450f17cB4027BF9F5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unclaimedTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferClaimedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Change",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "tokensWereClaimed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferClaimedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "flag",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ShouldRequireClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBToken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issueFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requireClaimFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_flag",
          "type": "bool"
        }
      ],
      "name": "shouldRequireClaimingFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOf",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unclaimedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unclaimedTotalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0b1a2c9d291390d8f07dc8abf646d2bfd82ab40590309bc5254e1db314ae1c8",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x9afc7156d8034A6Bbd4297D450f17cB4027BF9F5",
    "transactionIndex": 0,
    "gasUsed": "3830336",
    "logsBloom": "0x
    "blockHash": "0x5115e95072e142024dc5f87443c5b3cccb26a625a3c611e8b4380a64b02cb880",
    "transactionHash": "0xd0b1a2c9d291390d8f07dc8abf646d2bfd82ab40590309bc5254e1db314ae1c8",
    "logs": [],
    "blockNumber": 9631499,
    "cumulativeGasUsed": "3830336",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21c1E45E7EBC41f3ED0aB6660204d63c911c93a9",
    "0x0a75928644d0E25Dc9340c33d0D946Fabef2046C",
    "0xf4326041BE30a4b7fc4db9Bb6286fef458F71fe2"
  ],
  "solcInputHash": "5f321124cef92f5734094814cf45799b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferClaimedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Change\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokensWereClaimed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferClaimedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ShouldRequireClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issueFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requireClaimFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"shouldRequireClaimingFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedTotalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Tokens can be either represented internally or claimed as ERC-20s. This contract manages these two representations and allows claiming.The total supply of a project's tokens and the balance of each account are calculated in this contract.Each project can bring their own token if they prefer, and swap between tokens at any time.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_holder\":\"The token holder to get a balance for.\",\"_projectId\":\"The project to get the `_hodler`s balance of.\"},\"returns\":{\"balance\":\"The balance.\"}},\"burnFrom(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current controller can burn its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to burned.\",\"_holder\":\"The address that owns the tokens being burned.\",\"_preferClaimedTokens\":\"A flag indicating if there's a preference to burn tokens that have been converted to ERC-20s.\",\"_projectId\":\"The ID of the project to which the burned tokens belong\"}},\"changeFor(uint256,address,address)\":{\"details\":\"Only a project's current controller can change its token.\",\"params\":{\"_newOwner\":\"An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\",\"_projectId\":\"The ID of the project to which the changed token belongs.\",\"_token\":\"The new token.\"}},\"claimFor(address,uint256,uint256)\":{\"details\":\"Anyone can claim tokens on behalf of a token owner.\",\"params\":{\"_amount\":\"The amount of tokens to claim.\",\"_holder\":\"The owner of the tokens to claim.\",\"_projectId\":\"The ID of the project whose tokens are being claimed.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\"}},\"issueFor(uint256,string,string)\":{\"details\":\" Deploys a project's ERC-20 token contract.Only a project's current controller can issue its token.\",\"params\":{\"_name\":\"The ERC-20's name.\",\"_projectId\":\"The ID of the project being issued tokens.\",\"_symbol\":\"The ERC-20's symbol.\"}},\"mintFor(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current controller can mint its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to mint.\",\"_holder\":\"The address receiving the new tokens.\",\"_preferClaimedTokens\":\"A flag indicating whether there's a preference for ERC20's to be claimed automatically if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens belong.\"}},\"shouldRequireClaimingFor(uint256,bool)\":{\"details\":\"Only a token holder or an operator can transfer its unclaimed tokens.\",\"params\":{\"_flag\":\"A flag indicating whether or not claiming should be required.\",\"_projectId\":\"The ID of the project being affected.\"}},\"totalSupplyOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get the total token supply of.\"},\"returns\":{\"supply\":\"The total supply.\"}},\"transferTo(address,address,uint256,uint256)\":{\"details\":\"Only a token holder or an operator can transfer its unclaimed tokens.\",\"params\":{\"_amount\":\"The amount of tokens to transfer.\",\"_holder\":\"The address to transfer tokens from.\",\"_projectId\":\"The ID of the project whose tokens are being transferred.\",\"_recipient\":\"The recipient of the tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\" The total balance of token a holder has for a specified project, including claimed and unclaimed tokens.\"},\"burnFrom(address,uint256,uint256,bool)\":{\"notice\":\" Burns tokens.\"},\"changeFor(uint256,address,address)\":{\"notice\":\" Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\"},\"claimFor(address,uint256,uint256)\":{\"notice\":\" Claims internal tokens by minting and distributing ERC20 tokens.\"},\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"issueFor(uint256,string,string)\":{\"notice\":\" Issues an owner's ERC-20 Tokens that'll be used when claiming tokens.\"},\"mintFor(address,uint256,uint256,bool)\":{\"notice\":\" Mint new tokens.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"projects()\":{\"notice\":\" The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"requireClaimFor(uint256)\":{\"notice\":\"A flag indicating if tokens are required to be issued as claimed for a particular project. _projectId The ID of the project to which the requirement applies.\"},\"shouldRequireClaimingFor(uint256,bool)\":{\"notice\":\" Allows a project to force all future mints to be claimed into the holder's wallet, or revoke the flag if it's already set.\"},\"tokenOf(uint256)\":{\"notice\":\"Each project's ERC20 Token tokens. _projectId The ID of the project to which the token belongs.\"},\"totalSupplyOf(uint256)\":{\"notice\":\" The total supply of tokens for each project, including claimed and unclaimed tokens.\"},\"transferTo(address,address,uint256,uint256)\":{\"notice\":\" Allows an unclaimed token holder to transfer them to another account, without claiming to ERC-20s.\"},\"unclaimedBalanceOf(address,uint256)\":{\"notice\":\"Each holder's balance of unclaimed Tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs.\"},\"unclaimedTotalSupplyOf(uint256)\":{\"notice\":\"The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs.\"}},\"notice\":\" Manage Token minting, burning, and account balances.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBTokenStore.sol\":\"JBTokenStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/v2/JBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './interfaces/IJBToken.sol';\\n\\n/** \\n  @notice\\n  An ERC-20 token that can be minted and burned by its owner.\\n*/\\ncontract JBToken is IJBToken, ERC20, ERC20Permit, Ownable {\\n  function totalSupply(uint256) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  function balanceOf(uint256, address _account) external view override returns (uint256) {\\n    return super.balanceOf(_account);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _name The name of the token.\\n    @param _symbol The symbol that the token should be represented by.\\n  */\\n  constructor(string memory _name, string memory _symbol)\\n    ERC20(_name, _symbol)\\n    ERC20Permit(_name)\\n  {}\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Mints more of the token.\\n\\n    @dev\\n    Only the owner of this contract cant mint more of it.\\n\\n    @param _account The account to mint the tokens for.\\n    @param _amount The amount of tokens to mint.\\n  */\\n  function mint(\\n    uint256,\\n    address _account,\\n    uint256 _amount\\n  ) external override onlyOwner {\\n    return _mint(_account, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Burn some outstanding tokens.\\n\\n    @dev\\n    Only the owner of this contract cant burn some of its supply.\\n\\n    @param _account The account to burn tokens from.\\n    @param _amount The amount of tokens to burn.\\n  */\\n  function burn(\\n    uint256,\\n    address _account,\\n    uint256 _amount\\n  ) external override onlyOwner {\\n    return _burn(_account, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Transfer ownership of this contract to another address.\\n\\n    @dev\\n    Only the owner of this contract can transfer it.\\n\\n    @dev\\n    This is necessary to override to adhere to the IJBToken interface.\\n\\n    @param _newOwner The new owner.\\n  */\\n  function transferOwnership(address _newOwner)\\n    public\\n    virtual\\n    override(Ownable, IJBToken)\\n    onlyOwner\\n  {\\n    return super.transferOwnership(_newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0x56fab4b475fd3ebe3233b19e91805700182124373ced757af6c4a05fe752a9b2\",\"license\":\"MIT\"},\"contracts/v2/JBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './interfaces/IJBTokenStore.sol';\\nimport './abstract/JBOperatable.sol';\\nimport './abstract/JBControllerUtility.sol';\\n\\nimport './libraries/JBOperations.sol';\\n\\nimport './JBToken.sol';\\n\\n/** \\n  @notice \\n  Manage Token minting, burning, and account balances.\\n\\n  @dev\\n  Tokens can be either represented internally or claimed as ERC-20s.\\n  This contract manages these two representations and allows claiming.\\n\\n  @dev\\n  The total supply of a project's tokens and the balance of each account are calculated in this contract.\\n\\n  @dev\\n  Each project can bring their own token if they prefer, and swap between tokens at any time.\\n*/\\ncontract JBTokenStore is JBControllerUtility, JBOperatable, IJBTokenStore {\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Each project's ERC20 Token tokens.\\n\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(uint256 => IJBToken) public override tokenOf;\\n\\n  /** \\n    @notice\\n    Each holder's balance of unclaimed Tokens for each project.\\n\\n    _holder The holder of balance.\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(address => mapping(uint256 => uint256)) public override unclaimedBalanceOf;\\n\\n  /** \\n    @notice\\n    The total supply of unclaimed tokens for each project.\\n\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(uint256 => uint256) public override unclaimedTotalSupplyOf;\\n\\n  /** \\n    @notice\\n    A flag indicating if tokens are required to be issued as claimed for a particular project.\\n\\n    _projectId The ID of the project to which the requirement applies.\\n  */\\n  mapping(uint256 => bool) public override requireClaimFor;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The total supply of tokens for each project, including claimed and unclaimed tokens.\\n\\n    @param _projectId The ID of the project to get the total token supply of.\\n\\n    @return supply The total supply.\\n  */\\n  function totalSupplyOf(uint256 _projectId) external view override returns (uint256 supply) {\\n    // Get a reference to the unclaimed total supply of the project.\\n    supply = unclaimedTotalSupplyOf[_projectId];\\n\\n    // Get a reference to the project's token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If the project has issued a token, add it's total supply to the total.\\n    if (_token != IJBToken(address(0))) supply = supply + _token.totalSupply(_projectId);\\n  }\\n\\n  /** \\n    @notice \\n    The total balance of token a holder has for a specified project, including claimed and unclaimed tokens.\\n\\n    @param _holder The token holder to get a balance for.\\n    @param _projectId The project to get the `_hodler`s balance of.\\n\\n    @return balance The balance.\\n  */\\n  function balanceOf(address _holder, uint256 _projectId)\\n    external\\n    view\\n    override\\n    returns (uint256 balance)\\n  {\\n    // Get a reference to the holder's unclaimed balance for the project.\\n    balance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the project's token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If the project has issued a token, add the holder's balance to the total.\\n    if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_projectId, _holder);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) JBControllerUtility(_directory) {\\n    projects = _projects;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Issues an owner's ERC-20 Tokens that'll be used when claiming tokens.\\n\\n    @dev \\n    Deploys a project's ERC-20 token contract.\\n\\n    @dev\\n    Only a project's current controller can issue its token.\\n\\n    @param _projectId The ID of the project being issued tokens.\\n    @param _name The ERC-20's name.\\n    @param _symbol The ERC-20's symbol.\\n  */\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external override onlyController(_projectId) returns (IJBToken token) {\\n    // There must be a name.\\n    require((bytes(_name).length > 0), '0x1f: EMPTY_NAME');\\n\\n    // There must be a symbol.\\n    require((bytes(_symbol).length > 0), '0x20: EMPTY_SYMBOL');\\n\\n    // Only one ERC20 token can be issued.\\n    require(tokenOf[_projectId] == IJBToken(address(0)), '0x21: ALREADY_ISSUED');\\n\\n    // Deploy the token contract.\\n    token = new JBToken(_name, _symbol);\\n\\n    // Store the token contract.\\n    tokenOf[_projectId] = token;\\n\\n    emit Issue(_projectId, token, _name, _symbol, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\\n\\n    @dev\\n    Only a project's current controller can change its token.\\n\\n    @param _projectId The ID of the project to which the changed token belongs.\\n    @param _token The new token.\\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\\n  */\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external override onlyController(_projectId) {\\n    // Get a reference to the current owner of the token.\\n    IJBToken _currentToken = tokenOf[_projectId];\\n\\n    // Store the new token.\\n    tokenOf[_projectId] = _token;\\n\\n    // If there's a current token and a new owner was provided, transfer ownership of the old token to the new owner.\\n    if (_newOwner != address(0) && _currentToken != IJBToken(address(0)))\\n      _currentToken.transferOwnership(_newOwner);\\n\\n    emit Change(_projectId, _token, _newOwner, msg.sender);\\n  }\\n\\n  /** \\n    @notice \\n    Mint new tokens.\\n\\n    @dev\\n    Only a project's current controller can mint its tokens.\\n\\n    @param _holder The address receiving the new tokens.\\n    @param _projectId The ID of the project to which the tokens belong.\\n    @param _amount The amount of tokens to mint.\\n    @param _preferClaimedTokens A flag indicating whether there's a preference for ERC20's to be claimed automatically if they have been issued.\\n  */\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external override onlyController(_projectId) {\\n    // An amount must be specified.\\n    require(_amount > 0, '0x22: NO_OP');\\n\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If there exists ERC-20 tokens and the caller prefers these claimed tokens or the project requires it.\\n    bool _shouldClaimTokens = (requireClaimFor[_projectId] || _preferClaimedTokens) &&\\n      _token != IJBToken(address(0));\\n\\n    if (_shouldClaimTokens) {\\n      // Mint the equivalent amount of ERC20s.\\n      _token.mint(_projectId, _holder, _amount);\\n    } else {\\n      // Add to the unclaimed balance and total supply.\\n      unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] + _amount;\\n      unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] + _amount;\\n    }\\n\\n    emit Mint(_holder, _projectId, _amount, _shouldClaimTokens, _preferClaimedTokens, msg.sender);\\n  }\\n\\n  /** \\n    @notice \\n    Burns tokens.\\n\\n    @dev\\n    Only a project's current controller can burn its tokens.\\n\\n    @param _holder The address that owns the tokens being burned.\\n    @param _projectId The ID of the project to which the burned tokens belong\\n    @param _amount The amount of tokens to burned.\\n    @param _preferClaimedTokens A flag indicating if there's a preference to burn tokens that have been converted to ERC-20s.\\n  */\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external override onlyController(_projectId) {\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Get a reference to the amount of unclaimed tokens.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the number of tokens there are.\\n    uint256 _claimedBalance = _token == IJBToken(address(0))\\n      ? 0\\n      : _token.balanceOf(_projectId, _holder);\\n\\n    // There must be enough tokens.\\n    // Prevent potential overflow by not relying on addition.\\n    require(\\n      (_amount < _claimedBalance && _amount < _unclaimedBalance) ||\\n        (_amount >= _claimedBalance && _unclaimedBalance >= _amount - _claimedBalance) ||\\n        (_amount >= _unclaimedBalance && _claimedBalance >= _amount - _unclaimedBalance),\\n      '0x23: INSUFFICIENT_FUNDS'\\n    );\\n\\n    // The amount of tokens to burn.\\n    uint256 _claimedTokensToBurn;\\n\\n    // If there's no balance, redeem no tokens.\\n    if (_claimedBalance == 0) {\\n      _claimedTokensToBurn = 0;\\n      // If prefer converted, redeem tokens before redeeming unclaimed tokens.\\n    } else if (_preferClaimedTokens) {\\n      _claimedTokensToBurn = _claimedBalance >= _amount ? _amount : _claimedBalance;\\n      // Otherwise, redeem unclaimed tokens before claimed tokens.\\n    } else {\\n      _claimedTokensToBurn = _unclaimedBalance >= _amount ? 0 : _amount - _unclaimedBalance;\\n    }\\n\\n    // The amount of unclaimed tokens to redeem.\\n    uint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\\n\\n    // burn the tokens.\\n    if (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\\n    if (_unclaimedTokensToBurn > 0) {\\n      // Reduce the holders balance and the total supply.\\n      unclaimedBalanceOf[_holder][_projectId] =\\n        unclaimedBalanceOf[_holder][_projectId] -\\n        _unclaimedTokensToBurn;\\n      unclaimedTotalSupplyOf[_projectId] =\\n        unclaimedTotalSupplyOf[_projectId] -\\n        _unclaimedTokensToBurn;\\n    }\\n\\n    emit Burn(_holder, _projectId, _amount, _unclaimedBalance, _preferClaimedTokens, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Claims internal tokens by minting and distributing ERC20 tokens.\\n\\n    @dev\\n    Anyone can claim tokens on behalf of a token owner.\\n\\n    @param _holder The owner of the tokens to claim.\\n    @param _projectId The ID of the project whose tokens are being claimed.\\n    @param _amount The amount of tokens to claim.\\n  */\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external override {\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Tokens must have been issued.\\n    require(_token != IJBToken(address(0)), '0x24: NOT_FOUND');\\n\\n    // Get a reference to the amount of unclaimed tokens.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // There must be enough unlocked unclaimed tokens to claim.\\n    require(_unclaimedBalance >= _amount, '0x25: INSUFFICIENT_FUNDS');\\n\\n    // Subtract the claim amount from the holder's balance.\\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\\n\\n    // Subtract the claim amount from the project's total supply.\\n    unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _amount;\\n\\n    // Mint the equivalent amount of ERC20s.\\n    _token.mint(_projectId, _holder, _amount);\\n\\n    emit Claim(_holder, _projectId, _amount, msg.sender);\\n  }\\n\\n  /** \\n    @notice \\n    Allows an unclaimed token holder to transfer them to another account, without claiming to ERC-20s.\\n\\n    @dev\\n    Only a token holder or an operator can transfer its unclaimed tokens.\\n\\n    @param _recipient The recipient of the tokens.\\n    @param _holder The address to transfer tokens from.\\n    @param _projectId The ID of the project whose tokens are being transferred.\\n    @param _amount The amount of tokens to transfer.\\n  */\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external override requirePermission(_holder, _projectId, JBOperations.TRANSFER) {\\n    // Can't transfer to the zero address.\\n    require(_recipient != address(0), '0x26: ZERO_ADDRESS');\\n\\n    // An address can't transfer to itself.\\n    require(_holder != _recipient, '0x27: IDENTITY');\\n\\n    // There must be an amount to transfer.\\n    require(_amount > 0, '0x28: NO_OP');\\n\\n    // Get a reference to the amount of unclaimed tokens.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // There must be enough unclaimed tokens to transfer.\\n    require(_amount <= _unclaimedBalance, '0x29: INSUFFICIENT_FUNDS');\\n\\n    // Subtract from the holder.\\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\\n\\n    // Add the tokens to the recipient.\\n    unclaimedBalanceOf[_recipient][_projectId] =\\n      unclaimedBalanceOf[_recipient][_projectId] +\\n      _amount;\\n\\n    emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\\n  }\\n\\n  /** \\n    @notice \\n    Allows a project to force all future mints to be claimed into the holder's wallet, or revoke the flag if it's already set.\\n\\n    @dev\\n    Only a token holder or an operator can transfer its unclaimed tokens.\\n\\n    @param _projectId The ID of the project being affected.\\n    @param _flag A flag indicating whether or not claiming should be required.\\n  */\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag)\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.REQUIRE_CLAIM)\\n  {\\n    // Get a reference to the project's ERC20 tokens.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Tokens must have been issued.\\n    require(_token != IJBToken(address(0)), '0x2a: NOT_FOUND');\\n\\n    // Store the flag.\\n    requireClaimFor[_projectId] = _flag;\\n\\n    emit ShouldRequireClaim(_projectId, _flag, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x8864cea601506d01ee639670ff7262c15dfa65ec5c02549bc2c0e3f13729b7d4\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBControllerUtility.sol';\\n\\n/** \\n  @notice\\n  Provides tools for contracts that has functionality that can only be accessed by a project's controller.\\n*/\\nabstract contract JBControllerUtility is IJBControllerUtility {\\n  modifier onlyController(uint256 _projectId) {\\n    require(address(directory.controllerOf(_projectId)) == msg.sender, '0x4f: UNAUTHORIZED');\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n  }\\n}\\n\",\"keccak256\":\"0xf756edf53b6d9810fcf76faeeecaa00da0caba904a36cba3468e4f13e6f6ec94\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    require(\\n      _override ||\\n        msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x8b5b41ab9dfe24ec6da1cbf2de40535d1af341a2fba0d531e959e2d25a514922\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function currencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e4385f3bc7b2c078211344a393f6f4c3256ee755d334c03e93d0483621bcfe3\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBControllerUtility {\\n  function directory() external view returns (IJBDirectory);\\n}\\n\",\"keccak256\":\"0xb280df3e7bd6abc2fb533073a806a9b3edfea8f5be2791c6eb1767c79dd98f88\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0xcc2fa4db1c2684f106e0353fad26b45fb0dc09027d3509d40d5e9fce84a07148\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x5ef8969ff2fc6c58e521f1f930e7fcf0330a421d1643d9e88ea2b30e137df553\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataCidOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0xa437875cce9e3e9da493b5109635a3f843a4de0ec08dfeedb68ad344bb14720f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xe2f62536c63548587b291b2c37fd474e835df9a2a5829c7c49a3d5d280c7a2c9\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(uint256 _projectId, address _account) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xbe143668f21d389bb89e1a3a4d50a5fd21fac9c13f53b92fe96d672c4aa4d8cd\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unclaimedTokenBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    address indexed owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7beba1de2a273359c50194b00ffc083b010e80e3478bfa265a6a2403b766957f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_HANDLE = 6;\\n  uint256 public constant SET_METADATA_CID = 7;\\n  uint256 public constant CLAIM_HANDLE = 8;\\n  uint256 public constant RENEW_HANDLE = 9;\\n  uint256 public constant ISSUE = 10;\\n  uint256 public constant CHANGE_TOKEN = 11;\\n  uint256 public constant MINT = 12;\\n  uint256 public constant BURN = 13;\\n  uint256 public constant TRANSFER = 14;\\n  uint256 public constant REQUIRE_CLAIM = 15;\\n  uint256 public constant SET_CONTROLLER = 16;\\n  uint256 public constant ADD_TERMINALS = 17;\\n  uint256 public constant REMOVE_TERMINAL = 18;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 19;\\n  uint256 public constant USE_ALLOWANCE = 20;\\n  uint256 public constant SET_SPLITS = 21;\\n}\\n\",\"keccak256\":\"0xb1ef002f9fe9aa4ebd36d678765e9a3d607b99ada900660e6f5d45b7e17c0053\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  // A duration has a minimum of 1000 seconds to prevent extractive miner behavior, see https://ethereum.stackexchange.com/questions/413/can-a-contract-safely-rely-on-block-timestamp.\\n  uint256 duration;\\n  // A number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  // If the number is 1000000001, the funding cycle is non-recurrin so there cannot be a next cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x34ff85de4898979b20db9c968c538588cc7acde263afc81c0b29ac2dbd821d4c\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // A number from 0-1000000001 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  // If the number is 1000000001, an non-recurring funding cycle will get made.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x448584648a8baf62f56e0cc5a434c793d172453b969360f7fdb31e612b28eab4\",\"license\":\"MIT\"},\"contracts/v2/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620046253803806200462583398101604081905262000034916200005a565b6001600160601b0319606091821b811660805292811b831660a0521b1660c052620000c7565b6000806000606084860312156200007057600080fd5b83516200007d81620000ae565b60208501519093506200009081620000ae565b6040850151909250620000a381620000ae565b809150509250925092565b6001600160a01b0381168114620000c457600080fd5b50565b60805160601c60a05160601c60c05160601c6144e66200013f600039600081816102180152611c790152600081816102ab01528181610b1a01528181610bf801528181611d880152611e660152600081816102d3015281816104a8015281816110570152818161155b01526118e101526144e66000f3fe60806040523480156200001157600080fd5b5060043610620001145760003560e01c80638ffe9b9411620000a3578063c41c2f24116200006e578063c41c2f2414620002cd578063ceddd3e414620002f5578063ea78803f146200030c578063ff0186c5146200034557600080fd5b80638ffe9b941462000260578063906ebd0f1462000277578063a7f2a70b146200028e578063ad007d6314620002a557600080fd5b80636607955d11620000e45780636607955d14620001ad57806375b0d9cd14620001c45780637b4d8e2c14620001db5780638b79543c146200021257600080fd5b8062fdd58e14620001195780631412884f14620001435780635287af37146200016657806357e4c7781462000194575b600080fd5b620001306200012a3660046200211f565b6200035c565b6040519081526020015b60405180910390f35b6200013062000154366004620021f5565b60026020526000908152604090205481565b62000130620001773660046200211f565b600160209081526000928352604080842090915290825290205481565b620001ab620001a53660046200225c565b62000460565b005b620001ab620001be3660046200214e565b62000703565b62000130620001d5366004620021f5565b620009af565b62000201620001ec366004620021f5565b60036020526000908152604090205460ff1681565b60405190151581526020016200013a565b6200023a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016200013a565b620001ab62000271366004620020d4565b62000a9d565b620001ab6200028836600462002186565b6200100f565b6200023a6200029f366004620022a3565b62001510565b6200023a7f000000000000000000000000000000000000000000000000000000000000000081565b6200023a7f000000000000000000000000000000000000000000000000000000000000000081565b620001ab6200030636600462002186565b62001899565b6200023a6200031d366004620021f5565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620001ab6200035636600462002229565b62001c4a565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083208584528252808320549183905290912054909116801562000459576040517f3656eec20000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8581166024830152821690633656eec29060440160206040518083038186803b1580156200040f57600080fd5b505afa15801562000424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044a91906200220f565b620004569083620023f7565b91505b5092915050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015620004eb57600080fd5b505afa15801562000500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005269190620020ad565b73ffffffffffffffffffffffffffffffffffffffff1614620005a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a4544000000000000000000000000000060448201526064015b60405180910390fd5b6000848152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff8581167fffffffffffffffffffffffff000000000000000000000000000000000000000083161790925581169083161580159062000621575073ffffffffffffffffffffffffffffffffffffffff811615155b15620006ab576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015282169063f2fde38b90602401600060405180830381600087803b1580156200069157600080fd5b505af1158015620006a6573d6000803e3d6000fd5b505050505b60405133815273ffffffffffffffffffffffffffffffffffffffff808516919086169087907e45654e5ed9a54d60a4e759354328d3559ebe4018601dbf8031f665715070d49060200160405180910390a45050505050565b60008281526020819052604090205473ffffffffffffffffffffffffffffffffffffffff168062000791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307832343a204e4f545f464f554e4400000000000000000000000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320868452909152902054828110156200082e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307832353a20494e53554646494349454e545f46554e445300000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083208784529091529020546200086c90849062002412565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600160209081526040808320888452825280832093909355600290522054620008b390849062002412565b6000858152600260205260409081902091909155517f836a10400000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff86811660248301526044820185905283169063836a104090606401600060405180830381600087803b1580156200093d57600080fd5b505af115801562000952573d6000803e3d6000fd5b50506040805186815233602082015287935073ffffffffffffffffffffffffffffffffffffffff891692507fb6fe5ce185a3773d47e919f57c7edfd102c91cb7833b2be405c4de89d9980fd7910160405180910390a35050505050565b600081815260026020908152604080832054918390529091205473ffffffffffffffffffffffffffffffffffffffff16801562000a97576040517fbd85b0390000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063bd85b0399060240160206040518083038186803b15801562000a4d57600080fd5b505afa15801562000a62573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a8891906200220f565b62000a949083620023f7565b91505b50919050565b8282600e3373ffffffffffffffffffffffffffffffffffffffff8416148062000b9857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000b5d57600080fd5b505afa15801562000b72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b989190620021d5565b8062000c7657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000c3b57600080fd5b505afa15801562000c50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c769190620021d5565b62000cde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff871662000d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307832363a205a45524f5f4144445245535300000000000000000000000000006044820152606401620005a0565b8673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141562000df5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f307832373a204944454e544954590000000000000000000000000000000000006044820152606401620005a0565b6000841162000e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f307832383a204e4f5f4f500000000000000000000000000000000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff861660009081526001602090815260408083208884529091529020548085111562000efe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307832393a20494e53554646494349454e545f46554e445300000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260016020908152604080832089845290915290205462000f3c90869062002412565b73ffffffffffffffffffffffffffffffffffffffff80891660009081526001602081815260408084208c8552825280842095909555928c1682528252828120898252909152205462000f90908690620023f7565b73ffffffffffffffffffffffffffffffffffffffff89811660008181526001602090815260408083208c84528252918290209490945580518981523394810194909452909289928b16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200109a57600080fd5b505afa158015620010af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010d59190620020ad565b73ffffffffffffffffffffffffffffffffffffffff161462001154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a454400000000000000000000000000006044820152606401620005a0565b6000848152602081815260408083205473ffffffffffffffffffffffffffffffffffffffff89811685526001845282852089865290935290832054911691821562001249576040517f3656eec20000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff8981166024830152841690633656eec29060440160206040518083038186803b1580156200120857600080fd5b505afa1580156200121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200124391906200220f565b6200124c565b60005b905080861080156200125d57508186105b806200128057508086101580156200128057506200127c818762002412565b8210155b80620012a35750818610158015620012a357506200129f828762002412565b8110155b6200130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307832333a20494e53554646494349454e545f46554e445300000000000000006044820152606401620005a0565b6000816200131c575060006200135e565b85156200133d578682101562001333578162001335565b865b90506200135e565b86831015620013585762001352838862002412565b6200135b565b60005b90505b60006200136c828962002412565b9050811562001407576040517f9eea5f66000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8b8116602483015260448201849052861690639eea5f6690606401600060405180830381600087803b158015620013ed57600080fd5b505af115801562001402573d6000803e3d6000fd5b505050505b8015620014a35773ffffffffffffffffffffffffffffffffffffffff8a1660009081526001602090815260408083208c84529091529020546200144c90829062002412565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526001602090815260408083208d84528252808320939093556002905220546200149390829062002412565b60008a8152600260205260409020555b60408051898152602081018690528815158183015233606082015290518a9173ffffffffffffffffffffffffffffffffffffffff8d16917fa006002ee8ea1e7bacf87ae6d874d4117de99e4aa814339c9a8199bcecd97fe39181900360800190a350505050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690526000908690339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200159e57600080fd5b505afa158015620015b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015d99190620020ad565b73ffffffffffffffffffffffffffffffffffffffff161462001658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a454400000000000000000000000000006044820152606401620005a0565b84620016c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307831663a20454d5054595f4e414d45000000000000000000000000000000006044820152606401620005a0565b826200172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307832303a20454d5054595f53594d424f4c00000000000000000000000000006044820152606401620005a0565b60008781526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1615620017b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f307832313a20414c52454144595f4953535545440000000000000000000000006044820152606401620005a0565b85858585604051620017ca9062002053565b620017d994939291906200236d565b604051809103906000f080158015620017f6573d6000803e3d6000fd5b506000888152602081905260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915590519193509088907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da9062001887908a908a908a908a903390620023a3565b60405180910390a35095945050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200192457600080fd5b505afa15801562001939573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200195f9190620020ad565b73ffffffffffffffffffffffffffffffffffffffff1614620019de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a454400000000000000000000000000006044820152606401620005a0565b6000831162001a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f307832323a204e4f5f4f500000000000000000000000000000000000000000006044820152606401620005a0565b60008481526020818152604080832054600390925282205473ffffffffffffffffffffffffffffffffffffffff909116919060ff168062001a885750835b801562001aaa575073ffffffffffffffffffffffffffffffffffffffff821615155b9050801562001b4a576040517f836a10400000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905283169063836a104090606401600060405180830381600087803b15801562001b2b57600080fd5b505af115801562001b40573d6000803e3d6000fd5b5050505062001bdf565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260016020908152604080832089845290915290205462001b88908690620023f7565b73ffffffffffffffffffffffffffffffffffffffff881660009081526001602090815260408083208a845282528083209390935560029052205462001bcf908690620023f7565b6000878152600260205260409020555b604080518681528215156020820152851515818301523360608201529051879173ffffffffffffffffffffffffffffffffffffffff8a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801562001cd157600080fd5b505afa15801562001ce6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d0c9190620020ad565b82600f3373ffffffffffffffffffffffffffffffffffffffff8416148062001e0657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001dcb57600080fd5b505afa15801562001de0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e069190620021d5565b8062001ee457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001ea957600080fd5b505afa15801562001ebe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ee49190620021d5565b62001f4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401620005a0565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff168062001fda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307832613a204e4f545f464f554e4400000000000000000000000000000000006044820152606401620005a0565b60008681526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515908117909155915133815288917f91c234a3a3ebdc00c9bbd80f24661ca100d784b6d9f53923b3a693344719e08c910160405180910390a3505050505050565b612020806200249183390190565b60008083601f8401126200207457600080fd5b50813567ffffffffffffffff8111156200208d57600080fd5b602083019150836020828501011115620020a657600080fd5b9250929050565b600060208284031215620020c057600080fd5b8151620020cd816200245b565b9392505050565b60008060008060808587031215620020eb57600080fd5b8435620020f8816200245b565b935060208501356200210a816200245b565b93969395505050506040820135916060013590565b600080604083850312156200213357600080fd5b823562002140816200245b565b946020939093013593505050565b6000806000606084860312156200216457600080fd5b833562002171816200245b565b95602085013595506040909401359392505050565b600080600080608085870312156200219d57600080fd5b8435620021aa816200245b565b935060208501359250604085013591506060850135620021ca8162002481565b939692955090935050565b600060208284031215620021e857600080fd5b8151620020cd8162002481565b6000602082840312156200220857600080fd5b5035919050565b6000602082840312156200222257600080fd5b5051919050565b600080604083850312156200223d57600080fd5b823591506020830135620022518162002481565b809150509250929050565b6000806000606084860312156200227257600080fd5b83359250602084013562002286816200245b565b9150604084013562002298816200245b565b809150509250925092565b600080600080600060608688031215620022bc57600080fd5b85359450602086013567ffffffffffffffff80821115620022dc57600080fd5b620022ea89838a0162002061565b909650945060408801359150808211156200230457600080fd5b50620023138882890162002061565b969995985093965092949392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6040815260006200238360408301868862002324565b82810360208401526200239881858762002324565b979650505050505050565b606081526000620023b960608301878962002324565b8281036020840152620023ce81868862002324565b91505073ffffffffffffffffffffffffffffffffffffffff831660408301529695505050505050565b600082198211156200240d576200240d6200242c565b500190565b6000828210156200242757620024276200242c565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146200247e57600080fd5b50565b80151581146200247e57600080fdfe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162002020380380620020208339810160408190526200005a91620002f6565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000199565b508051620000a690600490602084019062000199565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0181905281830198909852606081019590955260808086019390935230858301528051808603909201825293909201909252805194019390932090925261010052506200013f90503362000147565b5050620003b3565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a79062000360565b90600052602060002090601f016020900481019282620001cb576000855562000216565b82601f10620001e657805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000216578251825591602001919060010190620001f9565b506200022492915062000228565b5090565b5b8082111562000224576000815560010162000229565b600082601f8301126200025157600080fd5b81516001600160401b03808211156200026e576200026e6200039d565b604051601f8301601f19908116603f011681019082821181831017156200029957620002996200039d565b81604052838152602092508683858801011115620002b657600080fd5b600091505b83821015620002da5785820183015181830184015290820190620002bb565b83821115620002ec5760008385830101525b9695505050505050565b600080604083850312156200030a57600080fd5b82516001600160401b03808211156200032257600080fd5b62000330868387016200023f565b935060208501519150808211156200034757600080fd5b5062000356858286016200023f565b9150509250929050565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e0516101005161012051611c1d6200040360003960006108c801526000610f6301526000610fb201526000610f8d01526000610f1101526000610f3a0152611c1d6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80637ecebe00116100d8578063a457c2d71161008c578063d505accf11610066578063d505accf14610301578063dd62ed3e14610314578063f2fde38b1461035a57600080fd5b8063a457c2d7146102c8578063a9059cbb146102db578063bd85b039146102ee57600080fd5b80638da5cb5b116100bd5780638da5cb5b1461028557806395d89b41146102ad5780639eea5f66146102b557600080fd5b80637ecebe001461025f578063836a10401461027257600080fd5b80633644e5151161012f5780633950935111610114578063395093511461020c57806370a082311461021f578063715018a61461025557600080fd5b80633644e515146101f15780633656eec2146101f957600080fd5b806318160ddd1161016057806318160ddd146101bd57806323b872dd146101cf578063313ce567146101e257600080fd5b806306fdde031461017c578063095ea7b31461019a575b600080fd5b61018461036d565b6040516101919190611a99565b60405180910390f35b6101ad6101a8366004611a0e565b6103ff565b6040519015158152602001610191565b6002545b604051908152602001610191565b6101ad6101dd36600461195f565b610415565b60405160128152602001610191565b6101c1610500565b6101c1610207366004611a51565b61050f565b6101ad61021a366004611a0e565b61053d565b6101c161022d366004611911565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61025d610586565b005b6101c161026d366004611911565b610613565b61025d610280366004611a74565b610640565b60065460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b6101846106d0565b61025d6102c3366004611a74565b6106df565b6101ad6102d6366004611a0e565b61076a565b6101ad6102e9366004611a0e565b610842565b6101c16102fc366004611a38565b61084f565b61025d61030f36600461199b565b61085a565b6101c161032236600461192c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61025d610368366004611911565b610a19565b60606003805461037c90611b3b565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890611b3b565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b5050505050905090565b600061040c338484610aa6565b50600192915050565b6000610422848484610c59565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156104e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104f58533858403610aa6565b506001949350505050565b600061050a610f0d565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260408120545b9392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161040c918590610581908690611b0c565b610aa6565b60065473ffffffffffffffffffffffffffffffffffffffff163314610607576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6106116000611000565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120545b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146106c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6106cb8282611077565b505050565b60606004805461037c90611b3b565b60065473ffffffffffffffffffffffffffffffffffffffff163314610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6106cb8282611197565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548281101561082b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016104df565b6108383385858403610aa6565b5060019392505050565b600061040c338484610c59565b600061063a60025490565b834211156108c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104df565b60007f00000000000000000000000000000000000000000000000000000000000000008888886108f38c611384565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061095b826113b9565b9050600061096b82878787611422565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104df565b610a0d8a8a8a610aa6565b50505050505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff163314610a9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b610aa38161144a565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8216610beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610cfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8216610d9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610e55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610e99908490611b0c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eff91815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610f5c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff82166110f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104df565b80600260008282546111069190611b0c565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290611140908490611b0c565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821661123a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156112f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040812083830390556002805484929061132c908490611b24565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b600061063a6113c6610f0d565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061143387878787611577565b915091506114408161168f565b5095945050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146114cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b73ffffffffffffffffffffffffffffffffffffffff811661156e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104df565b610aa381611000565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115ae5750600090506003611686565b8460ff16601b141580156115c657508460ff16601c14155b156115d75750600090506004611686565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561162b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661167f57600060019250925050611686565b9150600090505b94509492505050565b60008160048111156116a3576116a3611bb8565b14156116ac5750565b60018160048111156116c0576116c0611bb8565b1415611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104df565b600281600481111561173c5761173c611bb8565b14156117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104df565b60038160048111156117b8576117b8611bb8565b1415611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104df565b600481600481111561185a5761185a611bb8565b1415610aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104df565b803573ffffffffffffffffffffffffffffffffffffffff8116811461190c57600080fd5b919050565b60006020828403121561192357600080fd5b610536826118e8565b6000806040838503121561193f57600080fd5b611948836118e8565b9150611956602084016118e8565b90509250929050565b60008060006060848603121561197457600080fd5b61197d846118e8565b925061198b602085016118e8565b9150604084013590509250925092565b600080600080600080600060e0888a0312156119b657600080fd5b6119bf886118e8565b96506119cd602089016118e8565b95506040880135945060608801359350608088013560ff811681146119f157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611a2157600080fd5b611a2a836118e8565b946020939093013593505050565b600060208284031215611a4a57600080fd5b5035919050565b60008060408385031215611a6457600080fd5b82359150611956602084016118e8565b600080600060608486031215611a8957600080fd5b8335925061198b602085016118e8565b600060208083528351808285015260005b81811015611ac657858101830151858201604001528201611aaa565b81811115611ad8576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115611b1f57611b1f611b89565b500190565b600082821015611b3657611b36611b89565b500390565b600181811c90821680611b4f57607f821691505b602082108114156113b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220d1e7b3785a15351cd07ec030b9a2548efd004e5e617cc85a511a4ca13afbd60d64736f6c63430008060033a26469706673582212206dc06efb47e1ce3d5adb938a9a3ca4a07f2a942ee085b8a3a81ea615e9d664ce64736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001145760003560e01c80638ffe9b9411620000a3578063c41c2f24116200006e578063c41c2f2414620002cd578063ceddd3e414620002f5578063ea78803f146200030c578063ff0186c5146200034557600080fd5b80638ffe9b941462000260578063906ebd0f1462000277578063a7f2a70b146200028e578063ad007d6314620002a557600080fd5b80636607955d11620000e45780636607955d14620001ad57806375b0d9cd14620001c45780637b4d8e2c14620001db5780638b79543c146200021257600080fd5b8062fdd58e14620001195780631412884f14620001435780635287af37146200016657806357e4c7781462000194575b600080fd5b620001306200012a3660046200211f565b6200035c565b6040519081526020015b60405180910390f35b6200013062000154366004620021f5565b60026020526000908152604090205481565b62000130620001773660046200211f565b600160209081526000928352604080842090915290825290205481565b620001ab620001a53660046200225c565b62000460565b005b620001ab620001be3660046200214e565b62000703565b62000130620001d5366004620021f5565b620009af565b62000201620001ec366004620021f5565b60036020526000908152604090205460ff1681565b60405190151581526020016200013a565b6200023a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016200013a565b620001ab62000271366004620020d4565b62000a9d565b620001ab6200028836600462002186565b6200100f565b6200023a6200029f366004620022a3565b62001510565b6200023a7f000000000000000000000000000000000000000000000000000000000000000081565b6200023a7f000000000000000000000000000000000000000000000000000000000000000081565b620001ab6200030636600462002186565b62001899565b6200023a6200031d366004620021f5565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620001ab6200035636600462002229565b62001c4a565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083208584528252808320549183905290912054909116801562000459576040517f3656eec20000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8581166024830152821690633656eec29060440160206040518083038186803b1580156200040f57600080fd5b505afa15801562000424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044a91906200220f565b620004569083620023f7565b91505b5092915050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015620004eb57600080fd5b505afa15801562000500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005269190620020ad565b73ffffffffffffffffffffffffffffffffffffffff1614620005a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a4544000000000000000000000000000060448201526064015b60405180910390fd5b6000848152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff8581167fffffffffffffffffffffffff000000000000000000000000000000000000000083161790925581169083161580159062000621575073ffffffffffffffffffffffffffffffffffffffff811615155b15620006ab576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015282169063f2fde38b90602401600060405180830381600087803b1580156200069157600080fd5b505af1158015620006a6573d6000803e3d6000fd5b505050505b60405133815273ffffffffffffffffffffffffffffffffffffffff808516919086169087907e45654e5ed9a54d60a4e759354328d3559ebe4018601dbf8031f665715070d49060200160405180910390a45050505050565b60008281526020819052604090205473ffffffffffffffffffffffffffffffffffffffff168062000791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307832343a204e4f545f464f554e4400000000000000000000000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320868452909152902054828110156200082e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307832353a20494e53554646494349454e545f46554e445300000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083208784529091529020546200086c90849062002412565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600160209081526040808320888452825280832093909355600290522054620008b390849062002412565b6000858152600260205260409081902091909155517f836a10400000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff86811660248301526044820185905283169063836a104090606401600060405180830381600087803b1580156200093d57600080fd5b505af115801562000952573d6000803e3d6000fd5b50506040805186815233602082015287935073ffffffffffffffffffffffffffffffffffffffff891692507fb6fe5ce185a3773d47e919f57c7edfd102c91cb7833b2be405c4de89d9980fd7910160405180910390a35050505050565b600081815260026020908152604080832054918390529091205473ffffffffffffffffffffffffffffffffffffffff16801562000a97576040517fbd85b0390000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063bd85b0399060240160206040518083038186803b15801562000a4d57600080fd5b505afa15801562000a62573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a8891906200220f565b62000a949083620023f7565b91505b50919050565b8282600e3373ffffffffffffffffffffffffffffffffffffffff8416148062000b9857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000b5d57600080fd5b505afa15801562000b72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b989190620021d5565b8062000c7657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000c3b57600080fd5b505afa15801562000c50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c769190620021d5565b62000cde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff871662000d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307832363a205a45524f5f4144445245535300000000000000000000000000006044820152606401620005a0565b8673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141562000df5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f307832373a204944454e544954590000000000000000000000000000000000006044820152606401620005a0565b6000841162000e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f307832383a204e4f5f4f500000000000000000000000000000000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff861660009081526001602090815260408083208884529091529020548085111562000efe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307832393a20494e53554646494349454e545f46554e445300000000000000006044820152606401620005a0565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260016020908152604080832089845290915290205462000f3c90869062002412565b73ffffffffffffffffffffffffffffffffffffffff80891660009081526001602081815260408084208c8552825280842095909555928c1682528252828120898252909152205462000f90908690620023f7565b73ffffffffffffffffffffffffffffffffffffffff89811660008181526001602090815260408083208c84528252918290209490945580518981523394810194909452909289928b16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200109a57600080fd5b505afa158015620010af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010d59190620020ad565b73ffffffffffffffffffffffffffffffffffffffff161462001154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a454400000000000000000000000000006044820152606401620005a0565b6000848152602081815260408083205473ffffffffffffffffffffffffffffffffffffffff89811685526001845282852089865290935290832054911691821562001249576040517f3656eec20000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff8981166024830152841690633656eec29060440160206040518083038186803b1580156200120857600080fd5b505afa1580156200121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200124391906200220f565b6200124c565b60005b905080861080156200125d57508186105b806200128057508086101580156200128057506200127c818762002412565b8210155b80620012a35750818610158015620012a357506200129f828762002412565b8110155b6200130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307832333a20494e53554646494349454e545f46554e445300000000000000006044820152606401620005a0565b6000816200131c575060006200135e565b85156200133d578682101562001333578162001335565b865b90506200135e565b86831015620013585762001352838862002412565b6200135b565b60005b90505b60006200136c828962002412565b9050811562001407576040517f9eea5f66000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8b8116602483015260448201849052861690639eea5f6690606401600060405180830381600087803b158015620013ed57600080fd5b505af115801562001402573d6000803e3d6000fd5b505050505b8015620014a35773ffffffffffffffffffffffffffffffffffffffff8a1660009081526001602090815260408083208c84529091529020546200144c90829062002412565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526001602090815260408083208d84528252808320939093556002905220546200149390829062002412565b60008a8152600260205260409020555b60408051898152602081018690528815158183015233606082015290518a9173ffffffffffffffffffffffffffffffffffffffff8d16917fa006002ee8ea1e7bacf87ae6d874d4117de99e4aa814339c9a8199bcecd97fe39181900360800190a350505050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690526000908690339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200159e57600080fd5b505afa158015620015b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015d99190620020ad565b73ffffffffffffffffffffffffffffffffffffffff161462001658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a454400000000000000000000000000006044820152606401620005a0565b84620016c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307831663a20454d5054595f4e414d45000000000000000000000000000000006044820152606401620005a0565b826200172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307832303a20454d5054595f53594d424f4c00000000000000000000000000006044820152606401620005a0565b60008781526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1615620017b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f307832313a20414c52454144595f4953535545440000000000000000000000006044820152606401620005a0565b85858585604051620017ca9062002053565b620017d994939291906200236d565b604051809103906000f080158015620017f6573d6000803e3d6000fd5b506000888152602081905260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915590519193509088907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da9062001887908a908a908a908a903390620023a3565b60405180910390a35095945050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156200192457600080fd5b505afa15801562001939573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200195f9190620020ad565b73ffffffffffffffffffffffffffffffffffffffff1614620019de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a454400000000000000000000000000006044820152606401620005a0565b6000831162001a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f307832323a204e4f5f4f500000000000000000000000000000000000000000006044820152606401620005a0565b60008481526020818152604080832054600390925282205473ffffffffffffffffffffffffffffffffffffffff909116919060ff168062001a885750835b801562001aaa575073ffffffffffffffffffffffffffffffffffffffff821615155b9050801562001b4a576040517f836a10400000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905283169063836a104090606401600060405180830381600087803b15801562001b2b57600080fd5b505af115801562001b40573d6000803e3d6000fd5b5050505062001bdf565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260016020908152604080832089845290915290205462001b88908690620023f7565b73ffffffffffffffffffffffffffffffffffffffff881660009081526001602090815260408083208a845282528083209390935560029052205462001bcf908690620023f7565b6000878152600260205260409020555b604080518681528215156020820152851515818301523360608201529051879173ffffffffffffffffffffffffffffffffffffffff8a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801562001cd157600080fd5b505afa15801562001ce6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d0c9190620020ad565b82600f3373ffffffffffffffffffffffffffffffffffffffff8416148062001e0657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001dcb57600080fd5b505afa15801562001de0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e069190620021d5565b8062001ee457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562001ea957600080fd5b505afa15801562001ebe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ee49190620021d5565b62001f4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401620005a0565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff168062001fda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307832613a204e4f545f464f554e4400000000000000000000000000000000006044820152606401620005a0565b60008681526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515908117909155915133815288917f91c234a3a3ebdc00c9bbd80f24661ca100d784b6d9f53923b3a693344719e08c910160405180910390a3505050505050565b612020806200249183390190565b60008083601f8401126200207457600080fd5b50813567ffffffffffffffff8111156200208d57600080fd5b602083019150836020828501011115620020a657600080fd5b9250929050565b600060208284031215620020c057600080fd5b8151620020cd816200245b565b9392505050565b60008060008060808587031215620020eb57600080fd5b8435620020f8816200245b565b935060208501356200210a816200245b565b93969395505050506040820135916060013590565b600080604083850312156200213357600080fd5b823562002140816200245b565b946020939093013593505050565b6000806000606084860312156200216457600080fd5b833562002171816200245b565b95602085013595506040909401359392505050565b600080600080608085870312156200219d57600080fd5b8435620021aa816200245b565b935060208501359250604085013591506060850135620021ca8162002481565b939692955090935050565b600060208284031215620021e857600080fd5b8151620020cd8162002481565b6000602082840312156200220857600080fd5b5035919050565b6000602082840312156200222257600080fd5b5051919050565b600080604083850312156200223d57600080fd5b823591506020830135620022518162002481565b809150509250929050565b6000806000606084860312156200227257600080fd5b83359250602084013562002286816200245b565b9150604084013562002298816200245b565b809150509250925092565b600080600080600060608688031215620022bc57600080fd5b85359450602086013567ffffffffffffffff80821115620022dc57600080fd5b620022ea89838a0162002061565b909650945060408801359150808211156200230457600080fd5b50620023138882890162002061565b969995985093965092949392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6040815260006200238360408301868862002324565b82810360208401526200239881858762002324565b979650505050505050565b606081526000620023b960608301878962002324565b8281036020840152620023ce81868862002324565b91505073ffffffffffffffffffffffffffffffffffffffff831660408301529695505050505050565b600082198211156200240d576200240d6200242c565b500190565b6000828210156200242757620024276200242c565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146200247e57600080fd5b50565b80151581146200247e57600080fdfe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162002020380380620020208339810160408190526200005a91620002f6565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000199565b508051620000a690600490602084019062000199565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0181905281830198909852606081019590955260808086019390935230858301528051808603909201825293909201909252805194019390932090925261010052506200013f90503362000147565b5050620003b3565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a79062000360565b90600052602060002090601f016020900481019282620001cb576000855562000216565b82601f10620001e657805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000216578251825591602001919060010190620001f9565b506200022492915062000228565b5090565b5b8082111562000224576000815560010162000229565b600082601f8301126200025157600080fd5b81516001600160401b03808211156200026e576200026e6200039d565b604051601f8301601f19908116603f011681019082821181831017156200029957620002996200039d565b81604052838152602092508683858801011115620002b657600080fd5b600091505b83821015620002da5785820183015181830184015290820190620002bb565b83821115620002ec5760008385830101525b9695505050505050565b600080604083850312156200030a57600080fd5b82516001600160401b03808211156200032257600080fd5b62000330868387016200023f565b935060208501519150808211156200034757600080fd5b5062000356858286016200023f565b9150509250929050565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e0516101005161012051611c1d6200040360003960006108c801526000610f6301526000610fb201526000610f8d01526000610f1101526000610f3a0152611c1d6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80637ecebe00116100d8578063a457c2d71161008c578063d505accf11610066578063d505accf14610301578063dd62ed3e14610314578063f2fde38b1461035a57600080fd5b8063a457c2d7146102c8578063a9059cbb146102db578063bd85b039146102ee57600080fd5b80638da5cb5b116100bd5780638da5cb5b1461028557806395d89b41146102ad5780639eea5f66146102b557600080fd5b80637ecebe001461025f578063836a10401461027257600080fd5b80633644e5151161012f5780633950935111610114578063395093511461020c57806370a082311461021f578063715018a61461025557600080fd5b80633644e515146101f15780633656eec2146101f957600080fd5b806318160ddd1161016057806318160ddd146101bd57806323b872dd146101cf578063313ce567146101e257600080fd5b806306fdde031461017c578063095ea7b31461019a575b600080fd5b61018461036d565b6040516101919190611a99565b60405180910390f35b6101ad6101a8366004611a0e565b6103ff565b6040519015158152602001610191565b6002545b604051908152602001610191565b6101ad6101dd36600461195f565b610415565b60405160128152602001610191565b6101c1610500565b6101c1610207366004611a51565b61050f565b6101ad61021a366004611a0e565b61053d565b6101c161022d366004611911565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61025d610586565b005b6101c161026d366004611911565b610613565b61025d610280366004611a74565b610640565b60065460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b6101846106d0565b61025d6102c3366004611a74565b6106df565b6101ad6102d6366004611a0e565b61076a565b6101ad6102e9366004611a0e565b610842565b6101c16102fc366004611a38565b61084f565b61025d61030f36600461199b565b61085a565b6101c161032236600461192c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61025d610368366004611911565b610a19565b60606003805461037c90611b3b565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890611b3b565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b5050505050905090565b600061040c338484610aa6565b50600192915050565b6000610422848484610c59565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156104e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104f58533858403610aa6565b506001949350505050565b600061050a610f0d565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260408120545b9392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161040c918590610581908690611b0c565b610aa6565b60065473ffffffffffffffffffffffffffffffffffffffff163314610607576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6106116000611000565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120545b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146106c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6106cb8282611077565b505050565b60606004805461037c90611b3b565b60065473ffffffffffffffffffffffffffffffffffffffff163314610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6106cb8282611197565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548281101561082b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016104df565b6108383385858403610aa6565b5060019392505050565b600061040c338484610c59565b600061063a60025490565b834211156108c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104df565b60007f00000000000000000000000000000000000000000000000000000000000000008888886108f38c611384565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061095b826113b9565b9050600061096b82878787611422565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104df565b610a0d8a8a8a610aa6565b50505050505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff163314610a9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b610aa38161144a565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8216610beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610cfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8216610d9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610e55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610e99908490611b0c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eff91815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610f5c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff82166110f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104df565b80600260008282546111069190611b0c565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290611140908490611b0c565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821661123a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156112f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040812083830390556002805484929061132c908490611b24565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b600061063a6113c6610f0d565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061143387878787611577565b915091506114408161168f565b5095945050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146114cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b73ffffffffffffffffffffffffffffffffffffffff811661156e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104df565b610aa381611000565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115ae5750600090506003611686565b8460ff16601b141580156115c657508460ff16601c14155b156115d75750600090506004611686565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561162b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661167f57600060019250925050611686565b9150600090505b94509492505050565b60008160048111156116a3576116a3611bb8565b14156116ac5750565b60018160048111156116c0576116c0611bb8565b1415611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104df565b600281600481111561173c5761173c611bb8565b14156117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104df565b60038160048111156117b8576117b8611bb8565b1415611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104df565b600481600481111561185a5761185a611bb8565b1415610aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104df565b803573ffffffffffffffffffffffffffffffffffffffff8116811461190c57600080fd5b919050565b60006020828403121561192357600080fd5b610536826118e8565b6000806040838503121561193f57600080fd5b611948836118e8565b9150611956602084016118e8565b90509250929050565b60008060006060848603121561197457600080fd5b61197d846118e8565b925061198b602085016118e8565b9150604084013590509250925092565b600080600080600080600060e0888a0312156119b657600080fd5b6119bf886118e8565b96506119cd602089016118e8565b95506040880135945060608801359350608088013560ff811681146119f157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611a2157600080fd5b611a2a836118e8565b946020939093013593505050565b600060208284031215611a4a57600080fd5b5035919050565b60008060408385031215611a6457600080fd5b82359150611956602084016118e8565b600080600060608486031215611a8957600080fd5b8335925061198b602085016118e8565b600060208083528351808285015260005b81811015611ac657858101830151858201604001528201611aaa565b81811115611ad8576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115611b1f57611b1f611b89565b500190565b600082821015611b3657611b36611b89565b500390565b600181811c90821680611b4f57607f821691505b602082108114156113b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220d1e7b3785a15351cd07ec030b9a2548efd004e5e617cc85a511a4ca13afbd60d64736f6c63430008060033a26469706673582212206dc06efb47e1ce3d5adb938a9a3ca4a07f2a942ee085b8a3a81ea615e9d664ce64736f6c63430008060033",
  "devdoc": {
    "details": "Tokens can be either represented internally or claimed as ERC-20s. This contract manages these two representations and allows claiming.The total supply of a project's tokens and the balance of each account are calculated in this contract.Each project can bring their own token if they prefer, and swap between tokens at any time.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_holder": "The token holder to get a balance for.",
          "_projectId": "The project to get the `_hodler`s balance of."
        },
        "returns": {
          "balance": "The balance."
        }
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "details": "Only a project's current controller can burn its tokens.",
        "params": {
          "_amount": "The amount of tokens to burned.",
          "_holder": "The address that owns the tokens being burned.",
          "_preferClaimedTokens": "A flag indicating if there's a preference to burn tokens that have been converted to ERC-20s.",
          "_projectId": "The ID of the project to which the burned tokens belong"
        }
      },
      "changeFor(uint256,address,address)": {
        "details": "Only a project's current controller can change its token.",
        "params": {
          "_newOwner": "An address to transfer the current token's ownership to. This is optional, but it cannot be done later.",
          "_projectId": "The ID of the project to which the changed token belongs.",
          "_token": "The new token."
        }
      },
      "claimFor(address,uint256,uint256)": {
        "details": "Anyone can claim tokens on behalf of a token owner.",
        "params": {
          "_amount": "The amount of tokens to claim.",
          "_holder": "The owner of the tokens to claim.",
          "_projectId": "The ID of the project whose tokens are being claimed."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "issueFor(uint256,string,string)": {
        "details": " Deploys a project's ERC-20 token contract.Only a project's current controller can issue its token.",
        "params": {
          "_name": "The ERC-20's name.",
          "_projectId": "The ID of the project being issued tokens.",
          "_symbol": "The ERC-20's symbol."
        }
      },
      "mintFor(address,uint256,uint256,bool)": {
        "details": "Only a project's current controller can mint its tokens.",
        "params": {
          "_amount": "The amount of tokens to mint.",
          "_holder": "The address receiving the new tokens.",
          "_preferClaimedTokens": "A flag indicating whether there's a preference for ERC20's to be claimed automatically if they have been issued.",
          "_projectId": "The ID of the project to which the tokens belong."
        }
      },
      "shouldRequireClaimingFor(uint256,bool)": {
        "details": "Only a token holder or an operator can transfer its unclaimed tokens.",
        "params": {
          "_flag": "A flag indicating whether or not claiming should be required.",
          "_projectId": "The ID of the project being affected."
        }
      },
      "totalSupplyOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get the total token supply of."
        },
        "returns": {
          "supply": "The total supply."
        }
      },
      "transferTo(address,address,uint256,uint256)": {
        "details": "Only a token holder or an operator can transfer its unclaimed tokens.",
        "params": {
          "_amount": "The amount of tokens to transfer.",
          "_holder": "The address to transfer tokens from.",
          "_projectId": "The ID of the project whose tokens are being transferred.",
          "_recipient": "The recipient of the tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": " The total balance of token a holder has for a specified project, including claimed and unclaimed tokens."
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "notice": " Burns tokens."
      },
      "changeFor(uint256,address,address)": {
        "notice": " Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed."
      },
      "claimFor(address,uint256,uint256)": {
        "notice": " Claims internal tokens by minting and distributing ERC20 tokens."
      },
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "issueFor(uint256,string,string)": {
        "notice": " Issues an owner's ERC-20 Tokens that'll be used when claiming tokens."
      },
      "mintFor(address,uint256,uint256,bool)": {
        "notice": " Mint new tokens."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "projects()": {
        "notice": " The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "requireClaimFor(uint256)": {
        "notice": "A flag indicating if tokens are required to be issued as claimed for a particular project. _projectId The ID of the project to which the requirement applies."
      },
      "shouldRequireClaimingFor(uint256,bool)": {
        "notice": " Allows a project to force all future mints to be claimed into the holder's wallet, or revoke the flag if it's already set."
      },
      "tokenOf(uint256)": {
        "notice": "Each project's ERC20 Token tokens. _projectId The ID of the project to which the token belongs."
      },
      "totalSupplyOf(uint256)": {
        "notice": " The total supply of tokens for each project, including claimed and unclaimed tokens."
      },
      "transferTo(address,address,uint256,uint256)": {
        "notice": " Allows an unclaimed token holder to transfer them to another account, without claiming to ERC-20s."
      },
      "unclaimedBalanceOf(address,uint256)": {
        "notice": "Each holder's balance of unclaimed Tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs."
      },
      "unclaimedTotalSupplyOf(uint256)": {
        "notice": "The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs."
      }
    },
    "notice": " Manage Token minting, burning, and account balances.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22855,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "tokenOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(IJBToken)25146)"
      },
      {
        "astId": 22863,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "unclaimedBalanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 22869,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "unclaimedTotalSupplyOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22875,
        "contract": "contracts/v2/JBTokenStore.sol:JBTokenStore",
        "label": "requireClaimFor",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJBToken)25146": {
        "encoding": "inplace",
        "label": "contract IJBToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(IJBToken)25146)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IJBToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IJBToken)25146"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}