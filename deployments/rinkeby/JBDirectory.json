{
  "address": "0xf835913B60B870A3a14b6C7179fEDF0fEba49D93",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBTerminal",
          "name": "terminal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetTerminal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "addTerminalOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "isTerminalOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "terminalOf",
      "outputs": [
        {
          "internalType": "contract IJBTerminal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "terminalsOf",
      "outputs": [
        {
          "internalType": "contract IJBTerminal[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "transferTerminalOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22b177db51308de9527c86c3082d8c83c2453d36392965a5e76fba4c35956a7e",
  "receipt": {
    "to": null,
    "from": "0x754F37225CE0E30639093Af47C16ef057B544b4f",
    "contractAddress": "0xf835913B60B870A3a14b6C7179fEDF0fEba49D93",
    "transactionIndex": 38,
    "gasUsed": "393079",
    "logsBloom": "0x
    "blockHash": "0x17373ad9ea3cf92a2d01b3ba7d0c78154ed7ab7b6bc6441da27671f47043bb52",
    "transactionHash": "0x22b177db51308de9527c86c3082d8c83c2453d36392965a5e76fba4c35956a7e",
    "logs": [],
    "blockNumber": 9320475,
    "cumulativeGasUsed": "10054344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2DC1D364e52FCC7A3F3b5225813F0fcEC1ff715A",
    "0xC4D620E189b420249005FD38b22B1EA138cc0BeE"
  ],
  "solcInputHash": "096d8193c9ef3fa94853075f8aa2d2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetTerminal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"addTerminalOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"isTerminalOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"terminalOf\",\"outputs\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"terminalsOf\",\"outputs\":[{\"internalType\":\"contract IJBTerminal[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"transferTerminalOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"terminalOf(uint256,address)\":{\"notice\":\"For each project ID, the juicebox terminal that the direct payment addresses are proxies for.\"}},\"notice\":\"Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBDirectory.sol\":\"JBDirectory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/v2/JBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './interfaces/IJBTerminal.sol';\\nimport './interfaces/IJBDirectory.sol';\\nimport './abstract/JBOperatable.sol';\\n\\n/**\\n  @notice\\n  Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.\\n*/\\ncontract JBDirectory is IJBDirectory, JBOperatable {\\n  // --- public immutable stored properties --- //\\n\\n  /// @notice The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  IJBProjects public immutable override projects;\\n\\n  /// @notice For each project ID, the juicebox terminal that the direct payment addresses are proxies for.\\n  mapping(uint256 => IJBTerminal[]) private _terminalsOf;\\n\\n  // --- public stored properties --- //\\n\\n  /// @notice For each project ID, the juicebox terminal that the direct payment addresses are proxies for.\\n  mapping(uint256 => mapping(address => IJBTerminal)) public override terminalOf;\\n\\n  // --- external transactions --- //\\n  function terminalsOf(uint256 _projectId) external view override returns (IJBTerminal[] memory) {\\n    return _terminalsOf[_projectId];\\n  }\\n\\n  function isTerminalOf(uint256 _projectId, address _terminal) public view override returns (bool) {\\n    for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++)\\n      if (address(_terminalsOf[_projectId][_i]) == _terminal) return true;\\n\\n    return false;\\n  }\\n\\n  /** \\n      @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n  constructor(IJBProjects _projects, IJBOperatorStore _operatorStore) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n  }\\n\\n  // /**\\n  //   @notice\\n  //   Update the juicebox terminal that payments to direct payment addresses will be forwarded for the specified project ID.\\n\\n  //   @param _projectId The ID of the project to set a new terminal for.\\n  //   @param _terminal The new terminal to set.\\n  // */\\n  // function setTerminalOf(uint256 _projectId, IJBTerminal _terminal)\\n  //     external\\n  //     override\\n  // {\\n  // }\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external override {\\n    // 1. make sure the terminal has been allowed.\\n    // 2. make sure the msg.sender is either the project owner.\\n    // 3. add the terminal to the list of terminals.\\n\\n    // Either:\\n    // - case 1: the current terminal hasn't been set yet and the msg sender is the terminal being set's data authority.\\n    // - case 2: the current terminal's data authority is setting a new terminal.\\n    require(\\n      // case 1.\\n      ((_terminalsOf[_projectId].length == 0) && msg.sender == address(_terminal)) ||\\n        // case 2.\\n        isTerminalOf(_projectId, msg.sender),\\n      'UNAUTHORIZED'\\n    );\\n\\n    // // The project must exist.\\n    // require(projects.exists(_projectId), 'NOT_FOUND');\\n\\n    // Can't set the zero address.\\n    require(_terminal != IJBTerminal(address(0)), 'ZERO_ADDRESS');\\n\\n    // If the terminal is already set, nothing to do.\\n    if (isTerminalOf(_projectId, address(_terminal))) return;\\n\\n    // Set the new terminal.\\n    _terminalsOf[_projectId].push(_terminal);\\n\\n    emit SetTerminal(_projectId, _terminal, msg.sender);\\n  }\\n\\n  function transferTerminalOf(uint256 _projectId, IJBTerminal _terminal) external override {\\n    // 1. make sure the terminal has been allowed.\\n    // 2. make sure the msg.sender is a current terminal.\\n    // 3. add the terminal to the list of terminals.\\n    // 4. remove the calling terminal from the list of terminals.\\n  }\\n}\\n\",\"keccak256\":\"0x4715c7a394fc1c3ca59f2be2ff624393b12154292cd3e1e4466ede545814d8a9\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingWildcardDomain(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAcceptingAlternateAddress(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    address _alternate\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        msg.sender == _alternate,\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /// @notice A contract storing operator assignments.\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x655a15455f818b2d070bccfc4c6f6db1c17a25df2cbbfac2d3349e1d5640d0e6\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\n\\ninterface IJBDirectory {\\n  event SetTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function terminalOf(uint256 _projectId, address _token) external view returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, address _terminal) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  // function setTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function transferTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x424a085a82a0fd0d3c9ea67f639ee4dbf44d9187af5e632e98490286cf8b78ee\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct OperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(OperatorData calldata _operatorData) external;\\n\\n  function setOperators(OperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0xcd7a7c0280e682eab835c2b716f5195ede3cc1358725470b0252d3e1ad49fa41\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _uri\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setUriOf(uint256 _projectId, string calldata _uri) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0x71aa7f550e070d6a722da7174df285ee9d32119d71a39ba51fcc7ca0ddaddef4\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBTerminal {\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTickets,\\n    bool _preferUnstakedTickets,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x9807eacb780b8a5a9c236913bd741a6386ff680d9513914900503d8754db2285\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516106ec3803806106ec83398101604081905261002f9161004e565b6001600160601b0319606091821b811660805291901b1660a0526100a0565b6000806040838503121561006157600080fd5b825161006c81610088565b602084015190925061007d81610088565b809150509250929050565b6001600160a01b038116811461009d57600080fd5b50565b60805160601c60a05160601c6106216100cb600039600061012a0152600061015101526106216000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638b79543c1161005b5780638b79543c14610125578063ad007d631461014c578063d175415314610173578063dc30d7f21461019357600080fd5b8063532fbaee146100825780636e49181f146100ed5780636eba4a0d14610110575b600080fd5b6100c36100903660046104ad565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101006100fb3660046104ad565b6101a5565b60405190151581526020016100e4565b61012361011e3660046104ad565b610249565b005b6100c37f000000000000000000000000000000000000000000000000000000000000000081565b6100c37f000000000000000000000000000000000000000000000000000000000000000081565b610186610181366004610494565b61041d565b6040516100e491906104dd565b6101236101a13660046104ad565b5050565b6000805b60008481526020819052604090205481101561023d578273ffffffffffffffffffffffffffffffffffffffff1660008086815260200190815260200160002082815481106101f9576101f9610597565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561022b576001915050610243565b8061023581610537565b9150506101a9565b50600090505b92915050565b60008281526020819052604090205415801561027a57503373ffffffffffffffffffffffffffffffffffffffff8216145b8061028a575061028a82336101a5565b6102f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016102ec565b61037c82826101a5565b15610385575050565b60008281526020818152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915133815284917f6780b115550b4a9f66ac0fa6f3eed2769911165bc5d87ad966769dbbbfae1dbe910160405180910390a35050565b6000818152602081815260409182902080548351818402810184019094528084526060939283018282801561048857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161045d575b50505050509050919050565b6000602082840312156104a657600080fd5b5035919050565b600080604083850312156104c057600080fd5b8235915060208301356104d2816105c6565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561052b57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016104f9565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610590577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105e857600080fd5b5056fea26469706673582212204c6007d87adf2b20b07f545ab05d4f6beb8e2441b104021a1ea4aba12d5ca0e864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638b79543c1161005b5780638b79543c14610125578063ad007d631461014c578063d175415314610173578063dc30d7f21461019357600080fd5b8063532fbaee146100825780636e49181f146100ed5780636eba4a0d14610110575b600080fd5b6100c36100903660046104ad565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101006100fb3660046104ad565b6101a5565b60405190151581526020016100e4565b61012361011e3660046104ad565b610249565b005b6100c37f000000000000000000000000000000000000000000000000000000000000000081565b6100c37f000000000000000000000000000000000000000000000000000000000000000081565b610186610181366004610494565b61041d565b6040516100e491906104dd565b6101236101a13660046104ad565b5050565b6000805b60008481526020819052604090205481101561023d578273ffffffffffffffffffffffffffffffffffffffff1660008086815260200190815260200160002082815481106101f9576101f9610597565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561022b576001915050610243565b8061023581610537565b9150506101a9565b50600090505b92915050565b60008281526020819052604090205415801561027a57503373ffffffffffffffffffffffffffffffffffffffff8216145b8061028a575061028a82336101a5565b6102f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016102ec565b61037c82826101a5565b15610385575050565b60008281526020818152604080832080546001810182559084529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915133815284917f6780b115550b4a9f66ac0fa6f3eed2769911165bc5d87ad966769dbbbfae1dbe910160405180910390a35050565b6000818152602081815260409182902080548351818402810184019094528084526060939283018282801561048857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161045d575b50505050509050919050565b6000602082840312156104a657600080fd5b5035919050565b600080604083850312156104c057600080fd5b8235915060208301356104d2816105c6565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561052b57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016104f9565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610590577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105e857600080fd5b5056fea26469706673582212204c6007d87adf2b20b07f545ab05d4f6beb8e2441b104021a1ea4aba12d5ca0e864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "terminalOf(uint256,address)": {
        "notice": "For each project ID, the juicebox terminal that the direct payment addresses are proxies for."
      }
    },
    "notice": "Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16783,
        "contract": "contracts/v2/JBDirectory.sol:JBDirectory",
        "label": "_terminalsOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_array(t_contract(IJBTerminal)25212)dyn_storage)"
      },
      {
        "astId": 16792,
        "contract": "contracts/v2/JBDirectory.sol:JBDirectory",
        "label": "terminalOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_contract(IJBTerminal)25212))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IJBTerminal)25212)dyn_storage": {
        "base": "t_contract(IJBTerminal)25212",
        "encoding": "dynamic_array",
        "label": "contract IJBTerminal[]",
        "numberOfBytes": "32"
      },
      "t_contract(IJBTerminal)25212": {
        "encoding": "inplace",
        "label": "contract IJBTerminal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IJBTerminal)25212)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IJBTerminal)",
        "numberOfBytes": "32",
        "value": "t_contract(IJBTerminal)25212"
      },
      "t_mapping(t_uint256,t_array(t_contract(IJBTerminal)25212)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IJBTerminal[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IJBTerminal)25212)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_contract(IJBTerminal)25212))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => contract IJBTerminal))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(IJBTerminal)25212)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
