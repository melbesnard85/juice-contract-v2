{
  "address": "0xf56adc723D82218E86d5b5075d8c7B35F7B3625f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "_fundingCycleStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBTokenStore",
          "name": "_tokenStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBSplitsStore",
          "name": "_splitsStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "BurnTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectOwnerTokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeReservedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "indexed": false,
          "internalType": "struct Split",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeToReservedTokenSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "shouldReserveTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MintTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IJBTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct OverflowAllowance",
          "name": "allowance",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetOverflowAllowance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTokens",
          "type": "bool"
        }
      ],
      "name": "burnTokensOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "distributeReservedTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycleStore",
      "outputs": [
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_handle",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct FundingCycleProperties",
          "name": "_properties",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct FundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IJBTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OverflowAllowance[]",
          "name": "_overflowAllowances",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct Split[]",
          "name": "_payoutSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct Split[]",
          "name": "_reservedTokenSplits",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IJBTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "launchProjectFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTokens",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldReserveTokens",
          "type": "bool"
        }
      ],
      "name": "mintTokensOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBTerminal",
          "name": "",
          "type": "address"
        }
      ],
      "name": "overflowAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct FundingCycleProperties",
          "name": "_properties",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct FundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IJBTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OverflowAllowance[]",
          "name": "_overflowAllowances",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct Split[]",
          "name": "_payoutSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct Split[]",
          "name": "_reservedTokenSplits",
          "type": "tuple[]"
        }
      ],
      "name": "reconfigureFundingCyclesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservedRate",
          "type": "uint256"
        }
      ],
      "name": "reservedTokenBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitsStore",
      "outputs": [
        {
          "internalType": "contract IJBSplitsStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "swapTerminal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenStore",
      "outputs": [
        {
          "internalType": "contract IJBTokenStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf1387fe9d179d001e12d1333db4cc209fb8815a39d21283ead16c8d626800cf",
  "receipt": {
    "to": null,
    "from": "0x754F37225CE0E30639093Af47C16ef057B544b4f",
    "contractAddress": "0xf56adc723D82218E86d5b5075d8c7B35F7B3625f",
    "transactionIndex": 25,
    "gasUsed": "3179084",
    "logsBloom": "0x
    "blockHash": "0x6d7826cec46e90abf96458c82f41a34f7183c8834fd28f94de0ced649e68ed59",
    "transactionHash": "0xbf1387fe9d179d001e12d1333db4cc209fb8815a39d21283ead16c8d626800cf",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 9320511,
        "transactionHash": "0xbf1387fe9d179d001e12d1333db4cc209fb8815a39d21283ead16c8d626800cf",
        "address": "0xf56adc723D82218E86d5b5075d8c7B35F7B3625f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000754f37225ce0e30639093af47c16ef057b544b4f"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x6d7826cec46e90abf96458c82f41a34f7183c8834fd28f94de0ced649e68ed59"
      }
    ],
    "blockNumber": 9320511,
    "cumulativeGasUsed": "8768712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4D620E189b420249005FD38b22B1EA138cc0BeE",
    "0x2DC1D364e52FCC7A3F3b5225813F0fcEC1ff715A",
    "0x7Bf5Aa19778644B314fFC6f781c6f89CD873E71c",
    "0x61d095f86c36B05446edd5a19DEAd11c703Be3F0",
    "0xa63F15EcCA0fE86B48716CE53aAA8685A596e82f",
    "0xf835913B60B870A3a14b6C7179fEDF0fEba49D93"
  ],
  "solcInputHash": "096d8193c9ef3fa94853075f8aa2d2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"_fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBTokenStore\",\"name\":\"_tokenStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"_splitsStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectOwnerTokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeReservedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"indexed\":false,\"internalType\":\"struct Split\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeToReservedTokenSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldReserveTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OverflowAllowance\",\"name\":\"allowance\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetOverflowAllowance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTokens\",\"type\":\"bool\"}],\"name\":\"burnTokensOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"distributeReservedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycleStore\",\"outputs\":[{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_handle\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct FundingCycleProperties\",\"name\":\"_properties\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct FundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OverflowAllowance[]\",\"name\":\"_overflowAllowances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct Split[]\",\"name\":\"_payoutSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct Split[]\",\"name\":\"_reservedTokenSplits\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"launchProjectFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldReserveTokens\",\"type\":\"bool\"}],\"name\":\"mintTokensOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBTerminal\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"overflowAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct FundingCycleProperties\",\"name\":\"_properties\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct FundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OverflowAllowance[]\",\"name\":\"_overflowAllowances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct Split[]\",\"name\":\"_payoutSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct Split[]\",\"name\":\"_reservedTokenSplits\",\"type\":\"tuple[]\"}],\"name\":\"reconfigureFundingCyclesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedRate\",\"type\":\"uint256\"}],\"name\":\"reservedTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitsStore\",\"outputs\":[{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"swapTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStore\",\"outputs\":[{\"internalType\":\"contract IJBTokenStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnTokensOf(address,uint256,uint256,string,bool)\":{\"details\":\"Only a token's holder or a designated operator can burn it.\",\"params\":{\"_holder\":\"The account that is having its tokens burned.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_preferUnstakedTokens\":\"Whether ERC20's should be burned first if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens being burned belong.\",\"_tokenCount\":\"The number of tokens to burn.\"}},\"constructor\":{\"params\":{\"_directory\":\"The directory of terminals.\",\"_fundingCycleStore\":\"The contract storing all funding cycle configurations.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\",\"_splitsStore\":\"The contract that stores splits for each project.\",\"_tokenStore\":\"The contract that manages token minting and burning.\"}},\"distributeReservedTokensOf(uint256,string)\":{\"params\":{\"_memo\":\"A memo to leave with the emitted event.\",\"_projectId\":\"The ID of the project to which the reserved tokens belong.\"},\"returns\":{\"_0\":\"The amount of reserved tokens that were minted.\"}},\"launchProjectFor(bytes32,string,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[],address)\":{\"details\":\"Each operation withing this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf. A project owner will be able to reconfigure the funding cycle's properties as long as it has not yet received a payment._properties.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals)._properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time._properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent cycle. This has no effect for a project's first funding cycle._properties.discountRate A number from 0-200 (0-20%) indicating how many tokens will be minted as a result of a contribution made to this funding cycle compared to one made to the project's next funding cycle. If it's 0 (0%), each funding cycle's will have equal weight. If the number is 100 (10%), a contribution to the next funding cycle will only mint 90% of tokens that a contribution of the same amount made during the current funding cycle mints. If the number is 200 (20%), the difference will be 20%.  There's a special case: If the number is 201, the funding cycle will be non-recurring and one-time only._properties.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface._metadata.reservedRate A number from 0-200 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits._metadata.redemptionRate The rate from 0-200 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate._metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot._metadata.pausePay Whether or not the pay functionality should be paused during this cycle._metadata.pauseWithdraw Whether or not the withdraw functionality should be paused during this cycle._metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle._metadata.pauseMint Whether or not the mint functionality should be paused during this cycle._metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle._metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment._metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption._metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.\",\"params\":{\"_handle\":\"The project's unique handle. This can be updated any time by the owner of the project.\",\"_metadata\":\"A struct specifying the TerminalV2 specific params that a funding cycle can have.\",\"_overflowAllowances\":\"The amount, in wei (18 decimals), of ETH that a project can use from its own overflow on-demand.\",\"_payoutSplits\":\"Any payout splits to set.\",\"_properties\":\"The funding cycle configuration properties. These properties will remain fixed for the duration of the funding cycle.\",\"_reservedTokenSplits\":\"Any reserved token splits to set.\",\"_uri\":\"A link to associate with the project. This can be updated any time by the owner of the project.\"}},\"mintTokensOf(uint256,uint256,address,string,bool,bool)\":{\"details\":\"Only a project's owner or a designated operator can mint it.\",\"params\":{\"_beneficiary\":\"The account that the tokens are being minted for.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_preferUnstakedTokens\":\"Whether ERC20's should be burned first if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens being burned belong.\",\"_tokenCount\":\"The amount of tokens to mint.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[])\":{\"details\":\"Only a project's owner or a designated operator can configure its funding cycles._properties.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals)._properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time._properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent cycle. This has no effect for a project's first funding cycle._properties.discountRate A number from 0-200 (0-20%) indicating how many tokens will be minted as a result of a contribution made to this funding cycle compared to one made to the project's next funding cycle. If it's 0 (0%), each funding cycle's will have equal weight. If the number is 100 (10%), a contribution to the next funding cycle will only mint 90% of tokens that a contribution of the same amount made during the current funding cycle mints. If the number is 200 (20%), the difference will be 20%.  There's a special case: If the number is 201, the funding cycle will be non-recurring and one-time only._properties.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface._metadata.reservedRate A number from 0-200 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits._metadata.redemptionRate The rate from 0-200 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate._metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot._metadata.pausePay Whether or not the pay functionality should be paused during this cycle._metadata.pauseWithdraw Whether or not the withdraw functionality should be paused during this cycle._metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle._metadata.pauseMint Whether or not the mint functionality should be paused during this cycle._metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle._metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment._metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption._metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.\",\"params\":{\"_metadata\":\"A struct specifying the TerminalV2 specific params that a funding cycle can have.\",\"_overflowAllowances\":\"The amount, in wei (18 decimals), of ETH that a project can use from its own overflow on-demand.\",\"_payoutSplits\":\"Any payout splits to set.\",\"_projectId\":\"The ID of the project whos funding cycles are being reconfigured.\",\"_properties\":\"The funding cycle configuration properties. These properties will remain fixed for the duration of the funding cycle.\",\"_reservedTokenSplits\":\"Any reserved token splits to set.\"},\"returns\":{\"_0\":\"The ID of the funding cycle that was successfully configured.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reservedTokenBalanceOf(uint256,uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get a reserved token balance of.\",\"_reservedRate\":\"The reserved rate to use when making the calculation.\"},\"returns\":{\"_0\":\"The current amount of reserved tokens.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"fee\":{\"details\":\" Out of 200.\"},\"overflowAllowanceOf\":{\"details\":\"[_projectId][_configuration][_terminal] _projectId The ID of the project to get the current overflow allowance of. _configuration The configuration of the during which the allowance applies. _terminal The terminal managing the overflow.\",\"return\":\"The current overflow allowance for the specified project configuration. Decreases as projects use of the allowance.\",\"returns\":{\"_0\":\"The current overflow allowance for the specified project configuration. Decreases as projects use of the allowance.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"burnTokensOf(address,uint256,uint256,string,bool)\":{\"notice\":\"Burns a token holder's supply.\"},\"directory()\":{\"notice\":\"The directory of terminals.\"},\"distributeReservedTokensOf(uint256,string)\":{\"notice\":\"Mints and distributes all outstanding reserved tokens for a project.\"},\"fee()\":{\"notice\":\" The platform fee percent.\"},\"fundingCycleStore()\":{\"notice\":\" The contract storing all funding cycle configurations.\"},\"launchProjectFor(bytes32,string,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[],address)\":{\"notice\":\"Creates a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any splits.\"},\"mintTokensOf(uint256,uint256,address,string,bool,bool)\":{\"notice\":\"Mint new token supply into an account.\"},\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"overflowAllowanceOf(uint256,uint256,address)\":{\"notice\":\" The amount of overflow that a project is allowed to tap into on-demand.\"},\"projects()\":{\"notice\":\" The Projects contract which mints ERC-721's that represent project ownership.\"},\"reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[])\":{\"notice\":\"Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot.\"},\"reservedTokenBalanceOf(uint256,uint256)\":{\"notice\":\"Gets the amount of reserved tokens that a project has available to distribute.\"},\"splitsStore()\":{\"notice\":\" The contract that stores splits for each project.\"},\"tokenStore()\":{\"notice\":\" The contract that manages token minting and burning.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBController.sol\":\"JBController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"@paulrberg/contracts/math/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\",\"keccak256\":\"0xcf4e9eaa70b33ae4e949fb9c48ad13737dd807030e5555aca515dc555e10c9e4\",\"license\":\"UNLICENSED\"},\"contracts/v2/JBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\n\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\n// Inheritance\\nimport './interfaces/IJBController.sol';\\nimport './abstract/JBOperatable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract JBController is IJBController, JBOperatable, Ownable, ReentrancyGuard {\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for FundingCycle;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  // The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that\\n  // still need to have reserves minted against them.\\n  mapping(uint256 => int256) private _processedTokenTrackerOf;\\n\\n  //*********************************************************************//\\n  // --------------- public immutable stored properties ---------------- //\\n  //*********************************************************************//\\n\\n  /** \\n      @notice \\n      The Projects contract which mints ERC-721's that represent project ownership.\\n    */\\n  IJBProjects public immutable override projects;\\n\\n  /** \\n      @notice \\n      The contract storing all funding cycle configurations.\\n    */\\n  IJBFundingCycleStore public immutable override fundingCycleStore;\\n\\n  /** \\n      @notice \\n      The contract that manages token minting and burning.\\n    */\\n  IJBTokenStore public immutable override tokenStore;\\n\\n  /** \\n      @notice \\n      The contract that stores splits for each project.\\n    */\\n  IJBSplitsStore public immutable override splitsStore;\\n\\n  /** \\n      @notice\\n      The directory of terminals.\\n    */\\n  IJBDirectory public immutable override directory;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n      @notice \\n      The amount of overflow that a project is allowed to tap into on-demand.\\n\\n      @dev\\n      [_projectId][_configuration][_terminal]\\n\\n      _projectId The ID of the project to get the current overflow allowance of.\\n      _configuration The configuration of the during which the allowance applies.\\n      _terminal The terminal managing the overflow.\\n\\n      @return The current overflow allowance for the specified project configuration. Decreases as projects use of the allowance.\\n    */\\n  mapping(uint256 => mapping(uint256 => mapping(IJBTerminal => uint256)))\\n    public\\n    override overflowAllowanceOf;\\n\\n  /** \\n      @notice \\n      The platform fee percent.\\n\\n      @dev \\n      Out of 200.\\n    */\\n  uint256 public override fee = 10;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n      @notice\\n      Gets the amount of reserved tokens that a project has available to distribute.\\n\\n      @param _projectId The ID of the project to get a reserved token balance of.\\n      @param _reservedRate The reserved rate to use when making the calculation.\\n\\n      @return The current amount of reserved tokens.\\n    */\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return\\n      _reservedTokenAmountFrom(\\n        _processedTokenTrackerOf[_projectId],\\n        _reservedRate,\\n        tokenStore.totalSupplyOf(_projectId)\\n      );\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------------- constructor -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n      @param _operatorStore A contract storing operator assignments.\\n      @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n      @param _fundingCycleStore The contract storing all funding cycle configurations.\\n      @param _tokenStore The contract that manages token minting and burning.\\n      @param _splitsStore The contract that stores splits for each project.\\n      @param _directory The directory of terminals.\\n    */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore,\\n    IJBSplitsStore _splitsStore,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n    splitsStore = _splitsStore;\\n    directory = _directory;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- external transactions ----------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n      @notice\\n      Creates a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any splits.\\n\\n      @dev\\n      Each operation withing this transaction can be done in sequence separately.\\n\\n      @dev\\n      Anyone can deploy a project on an owner's behalf.\\n\\n      @dev \\n      A project owner will be able to reconfigure the funding cycle's properties as long as it has not yet received a payment.\\n\\n      @param _handle The project's unique handle. This can be updated any time by the owner of the project.\\n      @param _uri A link to associate with the project. This can be updated any time by the owner of the project.\\n      @param _properties The funding cycle configuration properties. These properties will remain fixed for the duration of the funding cycle.\\n        @dev _properties.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals).\\n        @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\\n        @dev _properties.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time.\\n        @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent cycle. This has no effect for a project's first funding cycle.\\n        @dev _properties.discountRate A number from 0-200 (0-20%) indicating how many tokens will be minted as a result of a contribution made to this funding cycle compared to one made to the project's next funding cycle.\\n          If it's 0 (0%), each funding cycle's will have equal weight.\\n          If the number is 100 (10%), a contribution to the next funding cycle will only mint 90% of tokens that a contribution of the same amount made during the current funding cycle mints.\\n          If the number is 200 (20%), the difference will be 20%. \\n          There's a special case: If the number is 201, the funding cycle will be non-recurring and one-time only.\\n        @dev _properties.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface.\\n      @param _metadata A struct specifying the TerminalV2 specific params that a funding cycle can have.\\n        @dev _metadata.reservedRate A number from 0-200 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits.\\n        @dev _metadata.redemptionRate The rate from 0-200 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow.\\n          The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk\\n          where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate.\\n        @dev _metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot.\\n        @dev _metadata.pausePay Whether or not the pay functionality should be paused during this cycle.\\n        @dev _metadata.pauseWithdraw Whether or not the withdraw functionality should be paused during this cycle.\\n        @dev _metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle.\\n        @dev _metadata.pauseMint Whether or not the mint functionality should be paused during this cycle.\\n        @dev _metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle.\\n        @dev _metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment.\\n        @dev _metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption.\\n        @dev _metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.\\n      @param _overflowAllowances The amount, in wei (18 decimals), of ETH that a project can use from its own overflow on-demand.\\n      @param _payoutSplits Any payout splits to set.\\n      @param _reservedTokenSplits Any reserved token splits to set.\\n    */\\n  function launchProjectFor(\\n    bytes32 _handle,\\n    string calldata _uri,\\n    FundingCycleProperties calldata _properties,\\n    FundingCycleMetadata calldata _metadata,\\n    OverflowAllowance[] memory _overflowAllowances,\\n    Split[] memory _payoutSplits,\\n    Split[] memory _reservedTokenSplits,\\n    IJBTerminal _terminal\\n  ) external override {\\n    // Make sure the metadata is validated and packed into a uint256.\\n    uint256 _packedMetadata = _validateAndPackFundingCycleMetadata(_metadata);\\n\\n    // Create the project for the owner. This this contract as the project's terminal,\\n    // which will give it exclusive access to manage the project's funding cycles and tokens.\\n    uint256 _projectId = projects.createFor(msg.sender, _handle, _uri);\\n\\n    _configure(\\n      _projectId,\\n      _properties,\\n      _packedMetadata,\\n      _overflowAllowances,\\n      _payoutSplits,\\n      _reservedTokenSplits,\\n      true\\n    );\\n\\n    directory.addTerminalOf(_projectId, _terminal);\\n  }\\n\\n  /**\\n      @notice\\n      Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or\\n      sets the properties of the proposed funding cycle that will take effect once the current one expires\\n      if it is approved by the current funding cycle's ballot.\\n\\n      @dev\\n      Only a project's owner or a designated operator can configure its funding cycles.\\n\\n      @param _projectId The ID of the project whos funding cycles are being reconfigured.\\n      @param _properties The funding cycle configuration properties. These properties will remain fixed for the duration of the funding cycle.\\n        @dev _properties.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals).\\n        @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\\n        @dev _properties.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time.\\n        @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent cycle. This has no effect for a project's first funding cycle.\\n        @dev _properties.discountRate A number from 0-200 (0-20%) indicating how many tokens will be minted as a result of a contribution made to this funding cycle compared to one made to the project's next funding cycle.\\n          If it's 0 (0%), each funding cycle's will have equal weight.\\n          If the number is 100 (10%), a contribution to the next funding cycle will only mint 90% of tokens that a contribution of the same amount made during the current funding cycle mints.\\n          If the number is 200 (20%), the difference will be 20%. \\n          There's a special case: If the number is 201, the funding cycle will be non-recurring and one-time only.\\n        @dev _properties.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface.\\n      @param _metadata A struct specifying the TerminalV2 specific params that a funding cycle can have.\\n        @dev _metadata.reservedRate A number from 0-200 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits.\\n        @dev _metadata.redemptionRate The rate from 0-200 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow.\\n          The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk\\n          where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate.\\n        @dev _metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot.\\n        @dev _metadata.pausePay Whether or not the pay functionality should be paused during this cycle.\\n        @dev _metadata.pauseWithdraw Whether or not the withdraw functionality should be paused during this cycle.\\n        @dev _metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle.\\n        @dev _metadata.pauseMint Whether or not the mint functionality should be paused during this cycle.\\n        @dev _metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle.\\n        @dev _metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment.\\n        @dev _metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption.\\n        @dev _metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.\\n      @param _overflowAllowances The amount, in wei (18 decimals), of ETH that a project can use from its own overflow on-demand.\\n      @param _payoutSplits Any payout splits to set.\\n      @param _reservedTokenSplits Any reserved token splits to set.\\n\\n      @return The ID of the funding cycle that was successfully configured.\\n    */\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    FundingCycleProperties calldata _properties,\\n    FundingCycleMetadata calldata _metadata,\\n    OverflowAllowance[] memory _overflowAllowances,\\n    Split[] memory _payoutSplits,\\n    Split[] memory _reservedTokenSplits\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CONFIGURE)\\n    returns (uint256)\\n  {\\n    // Make sure the metadata is validated and packed into a uint256.\\n    uint256 _packedMetadata = _validateAndPackFundingCycleMetadata(_metadata);\\n\\n    // All reserved tokens must be minted before configuring.\\n    if (uint256(_processedTokenTrackerOf[_projectId]) != tokenStore.totalSupplyOf(_projectId))\\n      _distributeReservedTokensOf(_projectId, '');\\n\\n    // Configure the active project if its tokens have yet to be minted.\\n    bool _shouldConfigureActive = tokenStore.totalSupplyOf(_projectId) == 0;\\n\\n    return\\n      _configure(\\n        _projectId,\\n        _properties,\\n        _packedMetadata,\\n        _overflowAllowances,\\n        _payoutSplits,\\n        _reservedTokenSplits,\\n        _shouldConfigureActive\\n      );\\n  }\\n\\n  function withdrawFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    override\\n    returns (FundingCycle memory)\\n  {\\n    return fundingCycleStore.tapFrom(_projectId, _amount);\\n  }\\n\\n  /**\\n      @notice\\n      Mint new token supply into an account.\\n\\n      @dev\\n      Only a project's owner or a designated operator can mint it.\\n\\n      @param _projectId The ID of the project to which the tokens being burned belong.\\n      @param _tokenCount The amount of tokens to mint.\\n      @param _beneficiary The account that the tokens are being minted for.\\n      @param _memo A memo to pass along to the emitted event.\\n      @param _preferUnstakedTokens Whether ERC20's should be burned first if they have been issued.\\n\\n    */\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferUnstakedTokens,\\n    bool _shouldReserveTokens\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MINT)\\n  {\\n    // Can't send to the zero address.\\n    require(_beneficiary != address(0), 'ZERO_ADDRESS');\\n\\n    // There should be tokens to mint.\\n    require(_tokenCount > 0, 'NO_OP');\\n\\n    // Get a reference to the project's current funding cycle.\\n    FundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    require(_fundingCycle.mintPaused(), 'PAUSED');\\n\\n    if (_shouldReserveTokens && _fundingCycle.reservedRate() == 200) {\\n      // Subtract the total weighted amount from the tracker so the full reserved token amount can be printed later.\\n      _processedTokenTrackerOf[_projectId] =\\n        _processedTokenTrackerOf[_projectId] -\\n        int256(_tokenCount);\\n    } else {\\n      if (!_shouldReserveTokens)\\n        // Set the minted tokens as processed so that reserved tokens cant be minted against them.\\n        _processedTokenTrackerOf[_projectId] =\\n          _processedTokenTrackerOf[_projectId] +\\n          int256(_tokenCount);\\n\\n      // Redeem the tokens, which burns them.\\n      tokenStore.mintFor(_beneficiary, _projectId, _tokenCount, _preferUnstakedTokens);\\n    }\\n\\n    emit MintTokens(_beneficiary, _projectId, _tokenCount, _memo, _shouldReserveTokens, msg.sender);\\n  }\\n\\n  /**\\n      @notice\\n      Burns a token holder's supply.\\n\\n      @dev\\n      Only a token's holder or a designated operator can burn it.\\n\\n      @param _holder The account that is having its tokens burned.\\n      @param _projectId The ID of the project to which the tokens being burned belong.\\n      @param _tokenCount The number of tokens to burn.\\n      @param _memo A memo to pass along to the emitted event.\\n      @param _preferUnstakedTokens Whether ERC20's should be burned first if they have been issued.\\n\\n    */\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferUnstakedTokens\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermissionAllowingWildcardDomain(_holder, _projectId, JBOperations.BURN)\\n  {\\n    // There should be tokens to burn\\n    require(_tokenCount > 0, 'NO_OP');\\n\\n    // Get a reference to the project's current funding cycle.\\n    FundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    require(_fundingCycle.burnPaused(), 'PAUSED');\\n\\n    // Update the token tracker so that reserved tokens will still be correctly mintable.\\n    _subtractFromTokenTrackerOf(_projectId, _tokenCount);\\n\\n    // Burn the tokens.\\n    tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferUnstakedTokens);\\n\\n    emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\\n  }\\n\\n  /**\\n      @notice\\n      Mints and distributes all outstanding reserved tokens for a project.\\n\\n      @param _projectId The ID of the project to which the reserved tokens belong.\\n      @param _memo A memo to leave with the emitted event.\\n\\n      @return The amount of reserved tokens that were minted.\\n    */\\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    return _distributeReservedTokensOf(_projectId, _memo);\\n  }\\n\\n  function swapTerminal(IJBTerminal _terminal) external override nonReentrant {\\n    /// move overflow allowance from msg.sender to _terminal;\\n    ///\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n      @notice\\n      Validate and pack the funding cycle metadata.\\n\\n      @param _metadata The metadata to validate and pack.\\n\\n      @return packed The packed uint256 of all metadata params. The first 8 bytes specify the version.\\n     */\\n  function _validateAndPackFundingCycleMetadata(FundingCycleMetadata memory _metadata)\\n    private\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // The reserved project token rate must be less than or equal to 200.\\n    require(_metadata.reservedRate <= 200, 'BAD_RESERVED_RATE');\\n\\n    // The redemption rate must be between 0 and 200.\\n    require(_metadata.redemptionRate <= 200, 'BAD_REDEMPTION_RATE');\\n\\n    // The ballot redemption rate must be less than or equal to 200.\\n    require(_metadata.ballotRedemptionRate <= 200, 'BAD_BALLOT_REDEMPTION_RATE');\\n\\n    // version 1 in the first 8 bytes.\\n    packed = 1;\\n    // reserved rate in bits 8-15.\\n    packed |= _metadata.reservedRate << 8;\\n    // bonding curve in bits 16-23.\\n    packed |= _metadata.redemptionRate << 16;\\n    // reconfiguration bonding curve rate in bits 24-31.\\n    packed |= _metadata.ballotRedemptionRate << 24;\\n    // pause pay in bit 32.\\n    packed |= (_metadata.pausePay ? 1 : 0) << 32;\\n    // pause tap in bit 33.\\n    packed |= (_metadata.pauseWithdraw ? 1 : 0) << 33;\\n    // pause redeem in bit 34.\\n    packed |= (_metadata.pauseRedeem ? 1 : 0) << 34;\\n    // pause mint in bit 35.\\n    packed |= (_metadata.pauseMint ? 1 : 0) << 35;\\n    // pause mint in bit 36.\\n    packed |= (_metadata.pauseBurn ? 1 : 0) << 36;\\n    // use pay data source in bit 37.\\n    packed |= (_metadata.useDataSourceForPay ? 1 : 0) << 37;\\n    // use redeem data source in bit 38.\\n    packed |= (_metadata.useDataSourceForRedeem ? 1 : 0) << 38;\\n    // data source address in bits 39-198.\\n    packed |= uint160(address(_metadata.dataSource)) << 39;\\n  }\\n\\n  /**\\n      @notice \\n      See docs for `distributeReservedTokens`\\n    */\\n  function _distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    private\\n    returns (uint256 count)\\n  {\\n    // Get the current funding cycle to read the reserved rate from.\\n    FundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // There aren't any reserved tokens to mint and distribute if there is no funding cycle.\\n    if (_fundingCycle.number == 0) return 0;\\n\\n    // Get a reference to new total supply of tokens before minting reserved tokens.\\n    uint256 _totalTokens = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get a reference to the number of tokens that need to be minted.\\n    count = _reservedTokenAmountFrom(\\n      _processedTokenTrackerOf[_projectId],\\n      _fundingCycle.reservedRate(),\\n      _totalTokens\\n    );\\n\\n    // Set the tracker to be the new total supply.\\n    _processedTokenTrackerOf[_projectId] = int256(_totalTokens + count);\\n\\n    // Get a reference to the project owner.\\n    address _owner = projects.ownerOf(_projectId);\\n\\n    // Distribute tokens to splits and get a reference to the leftover amount to mint after all splits have gotten their share.\\n    uint256 _leftoverTokenCount = count == 0\\n      ? 0\\n      : _distributeToReservedTokenSplitsOf(_fundingCycle, count);\\n\\n    // Mint any leftover tokens to the project owner.\\n    if (_leftoverTokenCount > 0) tokenStore.mintFor(_owner, _projectId, _leftoverTokenCount, false);\\n\\n    emit DistributeReservedTokens(\\n      _fundingCycle.id,\\n      _projectId,\\n      _owner,\\n      count,\\n      _leftoverTokenCount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n      @notice\\n      Distributed tokens to the splits according to the specified funding cycle configuration.\\n\\n      @param _fundingCycle The funding cycle to base the token distribution on.\\n      @param _amount The total amount of tokens to mint.\\n\\n      @return leftoverAmount If the splits percents dont add up to 100%, the leftover amount is returned.\\n    */\\n  function _distributeToReservedTokenSplitsOf(FundingCycle memory _fundingCycle, uint256 _amount)\\n    private\\n    returns (uint256 leftoverAmount)\\n  {\\n    // Set the leftover amount to the initial amount.\\n    leftoverAmount = _amount;\\n\\n    // TODO: changing _splits to \\\"_receipients\\\" or ... ?\\n    // Get a reference to the project's reserved token splits.\\n    Split[] memory _splits = splitsStore.splitsOf(\\n      _fundingCycle.projectId,\\n      _fundingCycle.configured,\\n      2\\n    );\\n\\n    //Transfer between all splits.\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // Get a reference to the split being iterated on.\\n      Split memory _split = _splits[_i];\\n\\n      // The amount to send towards the split. Split percents are out of 10000.\\n      uint256 _tokenCount = PRBMath.mulDiv(_amount, _split.percent, 10000);\\n\\n      // Mints tokens for the split if needed.\\n      if (_tokenCount > 0)\\n        tokenStore.mintFor(\\n          // If a projectId is set in the split, set the project's owner as the beneficiary.\\n          // Otherwise use the split's beneficiary.\\n          _split.projectId != 0 ? projects.ownerOf(_split.projectId) : _split.beneficiary,\\n          _fundingCycle.projectId,\\n          _tokenCount,\\n          _split.preferUnstaked\\n        );\\n\\n      // If there's an allocator set, trigger its `allocate` function.\\n      if (_split.allocator != IJBSplitAllocator(address(0)))\\n        _split.allocator.allocate(\\n          _tokenCount,\\n          2,\\n          _fundingCycle.projectId,\\n          _split.projectId,\\n          _split.beneficiary,\\n          _split.preferUnstaked\\n        );\\n\\n      // Subtract from the amount to be sent to the beneficiary.\\n      leftoverAmount = leftoverAmount - _tokenCount;\\n\\n      emit DistributeToReservedTokenSplit(\\n        _fundingCycle.id,\\n        _fundingCycle.projectId,\\n        _split,\\n        _tokenCount,\\n        msg.sender\\n      );\\n    }\\n  }\\n\\n  /** \\n      @notice\\n      Subtracts the provided value from the processed token tracker.\\n\\n      @dev\\n      Necessary to account for both positive and negative values.\\n\\n      @param _projectId The ID of the project that is having its tracker subtracted from.\\n      @param _amount The amount to subtract.\\n\\n    */\\n  function _subtractFromTokenTrackerOf(uint256 _projectId, uint256 _amount) private {\\n    // Get a reference to the processed token tracker for the project.\\n    int256 _processedTokenTracker = _processedTokenTrackerOf[_projectId];\\n\\n    // Subtract the count from the processed token tracker.\\n    // If there are at least as many processed tokens as the specified amount,\\n    // the processed token tracker of the project will be positive. Otherwise it will be negative.\\n    _processedTokenTrackerOf[_projectId] = _processedTokenTracker < 0 // If the tracker is negative, add the count and reverse it.\\n      ? -int256(uint256(-_processedTokenTracker) + _amount) // the tracker is less than the count, subtract it from the count and reverse it.\\n      : _processedTokenTracker < int256(_amount)\\n      ? -(int256(_amount) - _processedTokenTracker) // simply subtract otherwise.\\n      : _processedTokenTracker - int256(_amount);\\n  }\\n\\n  /**\\n      @notice\\n      Gets the amount of reserved tokens currently tracked for a project given a reserved rate.\\n\\n      @param _processedTokenTracker The tracker to make the calculation with.\\n      @param _reservedRate The reserved rate to use to make the calculation.\\n      @param _totalEligibleTokens The total amount to make the calculation with.\\n\\n      @return amount reserved token amount.\\n    */\\n  function _reservedTokenAmountFrom(\\n    int256 _processedTokenTracker,\\n    uint256 _reservedRate,\\n    uint256 _totalEligibleTokens\\n  ) private pure returns (uint256) {\\n    // Get a reference to the amount of tokens that are unprocessed.\\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker >= 0 // preconfigure tokens shouldn't contribute to the reserved token amount.\\n      ? _totalEligibleTokens - uint256(_processedTokenTracker)\\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\\n\\n    // If there are no unprocessed tokens, return.\\n    if (_unprocessedTokenBalanceOf == 0) return 0;\\n\\n    // If all tokens are reserved, return the full unprocessed amount.\\n    if (_reservedRate == 200) return _unprocessedTokenBalanceOf;\\n\\n    return\\n      PRBMath.mulDiv(_unprocessedTokenBalanceOf, 200, 200 - _reservedRate) -\\n      _unprocessedTokenBalanceOf;\\n  }\\n\\n  /** \\n      @notice \\n      Configures a funding cycle and stores information pertinent to the configuration.\\n\\n      @dev\\n      See the docs for `launchProject` and `configureFundingCycles`.\\n    */\\n  function _configure(\\n    uint256 _projectId,\\n    FundingCycleProperties calldata _properties,\\n    uint256 _packedMetadata,\\n    OverflowAllowance[] memory _overflowAllowances,\\n    Split[] memory _payoutSplits,\\n    Split[] memory _reservedTokenSplits,\\n    bool _shouldConfigureActive\\n  ) private returns (uint256) {\\n    // Configure the funding cycle's properties.\\n    FundingCycle memory _fundingCycle = fundingCycleStore.configureFor(\\n      _projectId,\\n      _properties,\\n      _packedMetadata,\\n      fee,\\n      _shouldConfigureActive\\n    );\\n\\n    // Set payout splits if there are any.\\n    if (_payoutSplits.length > 0)\\n      splitsStore.set(_projectId, _fundingCycle.configured, 1, _payoutSplits);\\n\\n    // Set token splits if there are any.\\n    if (_reservedTokenSplits.length > 0)\\n      splitsStore.set(_projectId, _fundingCycle.configured, 2, _reservedTokenSplits);\\n\\n    for (uint256 _i; _i < _overflowAllowances.length; _i++) {\\n      OverflowAllowance memory _allowance = _overflowAllowances[_i];\\n\\n      // Set the overflow allowance if the value is different from the currently set value.\\n      if (\\n        _allowance.amount !=\\n        overflowAllowanceOf[_projectId][_fundingCycle.configured][_allowance.terminal]\\n      ) {\\n        overflowAllowanceOf[_projectId][_fundingCycle.configured][_allowance.terminal] = _allowance\\n          .amount;\\n\\n        emit SetOverflowAllowance(_projectId, _fundingCycle.configured, _allowance, msg.sender);\\n      }\\n    }\\n\\n    // // Set the project's terminal to be this terminal if it's not yet set.\\n    // if (directory.terminalOf(_projectId) == IJBTerminal(address(0)))\\n    //     directory.setTerminalOf(_projectId, paymentTerminal);\\n\\n    return _fundingCycle.id;\\n  }\\n}\\n\",\"keccak256\":\"0x92450c1b75eafe1231f662fc8351906b2b7e916d7ef25083eda92458255f48f5\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingWildcardDomain(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAcceptingAlternateAddress(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    address _alternate\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        msg.sender == _alternate,\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /// @notice A contract storing operator assignments.\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x655a15455f818b2d070bccfc4c6f6db1c17a25df2cbbfac2d3349e1d5640d0e6\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTokenStore.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBSplitsStore.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBOperatorStore.sol';\\nimport './IJBFundingCycleDataSource.sol';\\nimport './IJBPrices.sol';\\n\\nstruct FundingCycleMetadata {\\n  uint256 reservedRate;\\n  uint256 redemptionRate;\\n  uint256 ballotRedemptionRate;\\n  bool pausePay;\\n  bool pauseWithdraw;\\n  bool pauseRedeem;\\n  bool pauseMint;\\n  bool pauseBurn;\\n  bool useDataSourceForPay;\\n  bool useDataSourceForRedeem;\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\\nstruct OverflowAllowance {\\n  IJBTerminal terminal;\\n  uint256 amount;\\n}\\n\\ninterface IJBController {\\n  event SetOverflowAllowance(\\n    uint256 indexed projectId,\\n    uint256 indexed configuration,\\n    OverflowAllowance allowance,\\n    address caller\\n  );\\n  event DistributeReservedTokens(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    uint256 count,\\n    uint256 projectOwnerTokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeToReservedTokenSplit(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    Split split,\\n    uint256 tokenCount,\\n    address caller\\n  );\\n\\n  event MintTokens(\\n    address indexed beneficiary,\\n    uint256 indexed projectId,\\n    uint256 indexed count,\\n    string memo,\\n    bool shouldReserveTokens,\\n    address caller\\n  );\\n\\n  event BurnTokens(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 count,\\n    string memo,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function tokenStore() external view returns (IJBTokenStore);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function fee() external view returns (uint256);\\n\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function launchProjectFor(\\n    bytes32 _handle,\\n    string calldata _uri,\\n    FundingCycleProperties calldata _properties,\\n    FundingCycleMetadata calldata _metadata,\\n    OverflowAllowance[] memory _overflowAllowance,\\n    Split[] memory _payoutSplits,\\n    Split[] memory _reservedTokenSplits,\\n    IJBTerminal _terminal\\n  ) external;\\n\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    FundingCycleProperties calldata _properties,\\n    FundingCycleMetadata calldata _metadata,\\n    OverflowAllowance[] memory _overflowAllowance,\\n    Split[] memory _payoutSplits,\\n    Split[] memory _reservedTokenSplits\\n  ) external returns (uint256);\\n\\n  function withdrawFrom(uint256 _projectId, uint256 _amount) external returns (FundingCycle memory);\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferUnstakedTokens,\\n    bool _shouldReserveTokens\\n  ) external;\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferUnstakedTokens\\n  ) external;\\n\\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    external\\n    returns (uint256 amount);\\n\\n  function swapTerminal(IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x04e49d0b65c33511d543fa1339c21b93c7109ab2b5e4a07a1f39d0699ca4a063\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\n\\ninterface IJBDirectory {\\n  event SetTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function terminalOf(uint256 _projectId, address _token) external view returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, address _terminal) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  // function setTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function transferTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x424a085a82a0fd0d3c9ea67f639ee4dbf44d9187af5e632e98490286cf8b78ee\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum BallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function state(uint256 _fundingCycleId, uint256 _configured) external view returns (BallotState);\\n}\\n\",\"keccak256\":\"0xd521aeeb37058a6ec07ad82f52f25eb6c3318e17b24584cd90d07a49521ec201\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nstruct PayDataParam {\\n  address payer;\\n  uint256 amount;\\n  uint256 weight;\\n  uint256 reservedRate;\\n  address beneficiary;\\n  string memo;\\n  bytes _delegateMetadata;\\n}\\n\\nstruct RedeemDataParam {\\n  address holder;\\n  uint256 count;\\n  uint256 redemptionRate;\\n  uint256 ballotRedemptionRate;\\n  address beneficiary;\\n  string memo;\\n  bytes delegateMetadata;\\n}\\n\\ninterface IJBFundingCycleDataSource {\\n  function payData(PayDataParam calldata _param)\\n    external\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n\\n  function redeemData(RedeemDataParam calldata _param)\\n    external\\n    returns (\\n      uint256 amount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n}\\n\",\"keccak256\":\"0xe21112088b6c6bc098c52be5a4f1301a727779fb6846c348bdbe0b406ad6705e\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct FundingCycle {\\n  // A unique number that's incremented for each new funding cycle, starting with 1.\\n  uint256 id;\\n  // The ID of the project contract that this funding cycle belongs to.\\n  uint256 projectId;\\n  // The number of this funding cycle for the project.\\n  uint256 number;\\n  // The ID of a previous funding cycle that this one is based on.\\n  uint256 basedOn;\\n  // The time when this funding cycle was last configured.\\n  uint256 configured;\\n  // The number of cycles that this configuration should last for before going back to the last permanent cycle. A value of 0 is a permanent cycle.\\n  uint256 cycleLimit;\\n  // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n  uint256 weight;\\n  // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n  IJBFundingCycleBallot ballot;\\n  // The time when this funding cycle will become active.\\n  uint256 start;\\n  // The number of seconds until this funding cycle's surplus is redistributed.\\n  uint256 duration;\\n  // The amount that this funding cycle is targeting in terms of the currency.\\n  uint256 target;\\n  // The currency that the target is measured in.\\n  uint256 currency;\\n  // The percentage of each payment to send as a fee to the Juicebox admin.\\n  uint256 fee;\\n  // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n  uint256 discountRate;\\n  // The amount of available funds that have been tapped by the project in terms of the currency.\\n  uint256 tapped;\\n  // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n  uint256 metadata;\\n}\\n\\nstruct FundingCycleProperties {\\n  uint256 target;\\n  uint256 currency;\\n  uint256 duration;\\n  uint256 cycleLimit;\\n  uint256 discountRate;\\n  IJBFundingCycleBallot ballot;\\n}\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 reconfigured,\\n    FundingCycleProperties properties,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Tap(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 newTappedAmount,\\n    address caller\\n  );\\n\\n  event Init(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 indexed number,\\n    uint256 basedOn,\\n    uint256 weight,\\n    uint256 start\\n  );\\n\\n  function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n  function BASE_WEIGHT() external view returns (uint256);\\n\\n  function MAX_CYCLE_LIMIT() external view returns (uint256);\\n\\n  function get(uint256 _fundingCycleId) external view returns (FundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (FundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (FundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (BallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    FundingCycleProperties calldata _properties,\\n    uint256 _metadata,\\n    uint256 _fee,\\n    bool _configureActiveFundingCycle\\n  ) external returns (FundingCycle memory fundingCycle);\\n\\n  function tapFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (FundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x9ce073b868628fa57d5c067a0f10d9a8649bea04cfa6b06aaafdf70acd453298\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct OperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(OperatorData calldata _operatorData) external;\\n\\n  function setOperators(OperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0xcd7a7c0280e682eab835c2b716f5195ede3cc1358725470b0252d3e1ad49fa41\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct DidPayParam {\\n  address payer;\\n  uint256 projectId;\\n  uint256 amount;\\n  uint256 weight;\\n  uint256 count;\\n  address beneficiary;\\n  string memo;\\n  bytes delegateMetadata;\\n}\\n\\ninterface IJBPayDelegate {\\n  function didPay(DidPayParam calldata _param) external;\\n}\\n\",\"keccak256\":\"0x69c4f7b7244d10e52a04f59b2f0e90d1b2f8a86d65a496324e427e727463f2e6\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(\\n    uint256 indexed currency,\\n    uint256 indexed base,\\n    uint256 decimals,\\n    AggregatorV3Interface feed\\n  );\\n\\n  function TARGET_DECIMALS() external returns (uint256);\\n\\n  function feedDecimalAdjusterFor(uint256 _currency, uint256 _base) external returns (uint256);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\\n\\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x91d4708e7da84113a6ae8be4e9e3e561a653c24e9ff220edddc6075b84ffa874\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _uri\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setUriOf(uint256 _projectId, string calldata _uri) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0x71aa7f550e070d6a722da7174df285ee9d32119d71a39ba51fcc7ca0ddaddef4\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nstruct DidRedeemParam {\\n  address holder;\\n  uint256 projectId;\\n  uint256 tokenCount;\\n  uint256 claimAmount;\\n  address payable beneficiary;\\n  string memo;\\n  bytes metadata;\\n}\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(DidRedeemParam calldata _param) external;\\n}\\n\",\"keccak256\":\"0x61927fd5aeb65ff4dd70be225f5c85c52270429e759216873046ccbc5c953547\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBSplitAllocator {\\n  event Allocate(\\n    uint256 indexed projectId,\\n    uint256 indexed forProjectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _group,\\n    uint256 _projectId,\\n    uint256 _forProjectId,\\n    address _beneficiary,\\n    bool _preferUnstaked\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x6a3ac72fcb8443d3317b95a039ddb39b1e5ab26af86e0ff1f5b2ba729e571615\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nstruct Split {\\n  bool preferUnstaked;\\n  uint16 percent;\\n  uint48 lockedUntil;\\n  address payable beneficiary;\\n  IJBSplitAllocator allocator;\\n  uint56 projectId;\\n}\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    Split split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (Split[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    Split[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8c7b104ac4a8befcfa4bd15989e1ff0b7ee36c16ed88657f4b0e18092f166fdf\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBTerminal {\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTickets,\\n    bool _preferUnstakedTickets,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x9807eacb780b8a5a9c236913bd741a6386ff680d9513914900503d8754db2285\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IJBToken is IERC20 {\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xd8522082204219f5ee9e147ffc4f7d826a0aaeffb932ea9c21e8a7a4e3182819\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool shouldUnstakeTokens,\\n    bool preferUnstakedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unlockedStakedBalance,\\n    bool preferUnstakedTokens,\\n    address caller\\n  );\\n\\n  event Stake(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Unstake(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Lock(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Unlock(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function lockedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function lockedBalanceBy(\\n    address _operator,\\n    address _holder,\\n    uint256 _projectId\\n  ) external view returns (uint256);\\n\\n  function stakedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function stakedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferUnstakedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferUnstakedTokens\\n  ) external;\\n\\n  function stakeFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function unstakeFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function lockFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function unlockFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xbe55cbf1038293ac2a89dd02e3bce54ae65a90956db3b080022576413b5c7cc5\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(FundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint8(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(FundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint8(_fundingCycle.metadata >> 16));\\n  }\\n\\n  function ballotRedemptionRate(FundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint8(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function payPaused(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 32) & 1) == 0;\\n  }\\n\\n  function tapPaused(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 33) & 1) == 0;\\n  }\\n\\n  function redeemPaused(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 34) & 1) == 0;\\n  }\\n\\n  function mintPaused(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 35) & 1) == 0;\\n  }\\n\\n  function burnPaused(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 36) & 1) == 0;\\n  }\\n\\n  function useDataSourceForPay(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 37) & 1 == 0;\\n  }\\n\\n  function useDataSourceForRedeem(FundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 38) & 1 == 0;\\n  }\\n\\n  // TODO see if functions can be optionally implemented.\\n  function dataSource(FundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 39)));\\n  }\\n}\\n\",\"keccak256\":\"0x6067b2c55ee7a7d36488999608ad6f84d4a3412766b1f1af0982c2031a82d69f\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant CONFIGURE = 1;\\n  uint256 public constant PRINT_PREMINED_TOKENS = 2;\\n  uint256 public constant REDEEM = 3;\\n  uint256 public constant MIGRATE = 4;\\n  uint256 public constant SET_HANDLE = 5;\\n  uint256 public constant SET_URI = 6;\\n  uint256 public constant CLAIM_HANDLE = 7;\\n  uint256 public constant RENEW_HANDLE = 8;\\n  uint256 public constant ISSUE = 9;\\n  uint256 public constant STAKE = 10;\\n  uint256 public constant UNSTAKE = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant LOCK = 13;\\n  uint256 public constant SET_TERMINAL = 14;\\n  uint256 public constant USE_ALLOWANCE = 15;\\n  uint256 public constant BURN = 16;\\n  uint256 public constant MINT = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x7b48de5d74e6a38f3d8a57b5979052bd0ee55882c5d95f206992580a2e1a1d9f\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding towards zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc6b47a506b52834c45984320f3a74bfe13a433806471cdd5570105e233c1337\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x610140604052600a6004553480156200001757600080fd5b5060405162003a3538038062003a358339810160408190526200003a91620000e5565b606086901b6001600160601b031916608052620000573362000095565b600180556001600160601b0319606095861b811660a05293851b841660c05291841b831660e052831b82166101005290911b16610120525062000192565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060008060c08789031215620000ff57600080fd5b86516200010c8162000179565b60208801519096506200011f8162000179565b6040880151909550620001328162000179565b6060880151909450620001458162000179565b6080880151909350620001588162000179565b60a08801519092506200016b8162000179565b809150509295509295509295565b6001600160a01b03811681146200018f57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61378b620002aa600039600081816102e1015261048b01526000818161018301528181611a6801528181611b1101526121ca015260008181610240015281816108fe01528181610f210152818161125001528181611333015281816115dc01528181611e670152818161205101526122bb015260008181610219015281816107c701528181610d7a0152818161149a015281816119820152611da10152600081816102820152818161039701528181610af90152818161106101528181611f5e01526123450152600081816102ba015281816105b30152818161067f01528181610bdc0152611144015261378b6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80638b79543c116100cd578063cf169f8411610081578063e867c59c11610066578063e867c59c1461033f578063f033b3b414610352578063f2fde38b1461036557600080fd5b8063cf169f8414610316578063ddca3f431461033657600080fd5b8063ad007d63116100b2578063ad007d63146102b5578063c41c2f24146102dc578063c63e51881461030357600080fd5b80638b79543c1461027d5780638da5cb5b146102a457600080fd5b80635172a2bf116101245780636193063011610109578063619306301461023b578063715018a6146102625780638ae9c07b1461026a57600080fd5b80635172a2bf146101d5578063557e71551461021457600080fd5b8063029c7b97146101565780631665bc0f1461016b5780632bdfe0041461017e5780632dc28a30146101c2575b600080fd5b610169610164366004612aa6565b610378565b005b6101696101793660046128f6565b6104f4565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101696101d03660046128bc565b6109b2565b6102066101e3366004612f70565b600360209081526000938452604080852082529284528284209052825290205481565b6040519081526020016101b9565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b610169610a0c565b610169610278366004612ee0565b610a72565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166101a5565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b610206610311366004612e06565b610fd8565b610329610324366004612ebe565b6113db565b6040516101b991906130fa565b61020660045481565b61020661034d366004612d49565b611528565b610206610360366004612ebe565b611597565b6101696103733660046128bc565b611663565b600061039161038c36889003880188612b9e565b611745565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663733f0127338d8d8d6040518563ffffffff1660e01b81526004016103e79493929190613092565b602060405180830381600087803b15801561040157600080fd5b505af1158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190612d30565b905061044b818984898989600161197d565b506040517f6eba4a0d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0384811660248301527f00000000000000000000000000000000000000000000000000000000000000001690636eba4a0d90604401600060405180830381600087803b1580156104cf57600080fd5b505af11580156104e3573d6000803e3d6000fd5b505050505050505050505050505050565b6002600154141561054c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015585856010336001600160a01b038416148061062d57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190612a89565b806106f957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106c157600080fd5b505afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190612a89565b6107455760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610543565b600087116107955760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f500000000000000000000000000000000000000000000000000000006044820152606401610543565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906343a266c2906024016102006040518083038186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190612c63565b6101e081015190915060241c600116156108a65760405162461bcd60e51b815260206004820152600660248201527f50415553454400000000000000000000000000000000000000000000000000006044820152606401610543565b6108b08989611c8a565b6040517f906ebd0f0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152602482018b9052604482018a905286151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063906ebd0f90608401600060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b50505050888a6001600160a01b03167fdf04e13ee4fcd48a81ab2fd114757093740a3efa9b6475d86e05878b4c59d0798a8a8a3360405161099a9493929190613244565b60405180910390a35050600180555050505050505050565b60026001541415610a055760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b5060018055565b6000546001600160a01b03163314610a665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b610a706000611cfd565b565b60026001541415610ac55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b158015610b4357600080fd5b505afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b91906128d9565b876011336001600160a01b0384161480610c5657506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190612a89565b610ca25760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610543565b6001600160a01b038816610cf85760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610543565b60008911610d485760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f500000000000000000000000000000000000000000000000000000006044820152606401610543565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018b90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906343a266c2906024016102006040518083038186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd9190612c63565b6101e081015190915060231c60011615610e595760405162461bcd60e51b815260206004820152600660248201527f50415553454400000000000000000000000000000000000000000000000000006044820152606401610543565b848015610e7157506101e081015160081c60ff1660c8145b15610ea45760008b815260026020526040902054610e90908b90613540565b60008c815260026020526040902055610f7e565b84610ed35760008b815260026020526040902054610ec3908b906134b4565b60008c8152600260205260409020555b6040517fceddd3e40000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152602482018d9052604482018c905287151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050505b898b8a6001600160a01b03167f0a5b29746c316202b4734deae6c8fe692b0f829c1387e75e2ade1e34f14146c48b8b8a33604051610fbf94939291906130c5565b60405180910390a4505060018055505050505050505050565b60006002600154141561102d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b1580156110ab57600080fd5b505afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e391906128d9565b876001336001600160a01b03841614806111be57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561118657600080fd5b505afa15801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190612a89565b61120a5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610543565b600061121e61038c368b90038b018b612b9e565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018d90529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b15801561129a57600080fd5b505afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612d30565b60008c81526002602052604090205414611301576112ff8b60405180602001604052806000815250611d65565b505b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018c90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612d30565b1590506113c78c8c848c8c8c8761197d565b600180559c9b505050505050505050505050565b6114646040518061020001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517fa7f166b500000000000000000000000000000000000000000000000000000000815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a7f166b59060440161020060405180830381600087803b1580156114e757600080fd5b505af11580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f9190612c63565b90505b92915050565b60006002600154141561157d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b600260015561158c8383611d65565b600180559392505050565b6000828152600260205260408082205490517f75b0d9cd0000000000000000000000000000000000000000000000000000000081526004810185905261151f919084907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b15801561162657600080fd5b505afa15801561163a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165e9190612d30565b612105565b6000546001600160a01b031633146116bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6001600160a01b0381166117395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610543565b61174281611cfd565b50565b600060c88260000151111561179c5760405162461bcd60e51b815260206004820152601160248201527f4241445f52455345525645445f524154450000000000000000000000000000006044820152606401610543565b60c8826020015111156117f15760405162461bcd60e51b815260206004820152601360248201527f4241445f524544454d5054494f4e5f52415445000000000000000000000000006044820152606401610543565b60c8826040015111156118465760405162461bcd60e51b815260206004820152601a60248201527f4241445f42414c4c4f545f524544454d5054494f4e5f524154450000000000006044820152606401610543565b5080516020808301516040840151606085015160189190911b60109290921b60089490941b93909317176001179161187f576000611882565b60015b60ff16901b60ff1681179050602182608001516118a05760006118a3565b60015b60ff16901b60ff168117905060228260a001516118c15760006118c4565b60015b60ff16901b60ff168117905060238260c001516118e25760006118e5565b60015b60ff16901b60ff168117905060248260e00151611903576000611906565b60015b60ff16901b60ff16811790506025826101000151611925576000611928565b60015b60ff16901b60ff1681179050602682610120015161194757600061194a565b60015b6101409093015173ffffffffffffffffffffffffffffff800000000060279190911b1660ff93841690911b909216171790565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca2148f08a8a8a600454886040518663ffffffff1660e01b81526004016119d6959493929190613278565b61020060405180830381600087803b1580156119f157600080fd5b505af1158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190612c63565b855190915015611ad55760808101516040517fa1aa95b10000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a1aa95b191611aa2918d916001908b906004016132ef565b600060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b505050505b835115611b7e5760808101516040517fa1aa95b10000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a1aa95b191611b4b918d916002908a906004016132ef565b600060405180830381600087803b158015611b6557600080fd5b505af1158015611b79573d6000803e3d6000fd5b505050505b60005b8651811015611c7c576000878281518110611b9e57611b9e61369b565b60209081029190910181015160008d815260038352604080822060808801518352845280822083516001600160a01b0316835284529020549181015190925014611c69576020818101805160008e8152600384526040808220608089018051845290865281832087516001600160a01b039081168552908752928290209390935591518251865190921682529251938101939093523390830152908c907ffcac803527061e0475e179cb5537831df4b93f982b586436e2c9073a50b2d0389060600160405180910390a35b5080611c74816135cb565b915050611b81565b505198975050505050505050565b600082815260026020526040812054908112611cc957818112611cb657611cb18282613540565b611ce6565b611cc08183613540565b611cb190613604565b81611cd382613604565b611cdd9190613528565b611ce690613604565b600093845260026020526040909320929092555050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f43a266c20000000000000000000000000000000000000000000000000000000081526004810183905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016102006040518083038186803b158015611de457600080fd5b505afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612c63565b9050806040015160001415611e35576000915050611522565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b158015611eb157600080fd5b505afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190612d30565b6000868152600260205260409020546101e0840151919250611f119160081c60ff1683612105565b9250611f1d8382613528565b6000868152600260205260408082209290925590517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b158015611fa857600080fd5b505afa158015611fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe091906128d9565b905060008415611ff957611ff4848661217f565b611ffc565b60005b905080156120ae576040517fceddd3e40000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820189905260448201839052600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b15801561209557600080fd5b505af11580156120a9573d6000803e3d6000fd5b505050505b816001600160a01b03168785600001517f2a88b15c2f1b02de6e8fb5d10418f617d190e0cae82227aa8792a023fe8f24f788858b336040516120f39493929190613314565b60405180910390a45050505092915050565b60008060008512156121295761211a85613604565b6121249084613528565b612133565b61213385846135b4565b905080612144576000915050612178565b8360c81415612154579050612178565b8061216a8160c861216588826135b4565b612591565b61217491906135b4565b9150505b9392505050565b602082015160808301516040517f69e11cc5000000000000000000000000000000000000000000000000000000008152600481019290925260248201526002604482015281906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906369e11cc59060640160006040518083038186803b15801561221457600080fd5b505afa158015612228573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261226e9190810190612972565b905060005b81518110156125895760008282815181106122905761229061369b565b6020026020010151905060006122b186836020015161ffff16612710612591565b90508015612456577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ceddd3e48360a0015166ffffffffffffff16600014156123085783606001516123c7565b60a08401516040517f6352211e00000000000000000000000000000000000000000000000000000000815266ffffffffffffff90911660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b15801561238f57600080fd5b505afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c791906128d9565b60208a0151855160405160e085901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03909316600484015260248301919091526044820185905215156064820152608401600060405180830381600087803b15801561243d57600080fd5b505af1158015612451573d6000803e3d6000fd5b505050505b60808201516001600160a01b031615612523576080820151602088015160a0840151606085015185516040517fc8e84e020000000000000000000000000000000000000000000000000000000081526004810187905260026024820152604481019490945266ffffffffffffff90921660648401526001600160a01b03908116608484015290151560a48301529091169063c8e84e029060c401600060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b505050505b61252d81866135b4565b9450866020015187600001517f28f59891af39713bbdff0e034b0309239c78191339edd51f4f8478f297d42f0684843360405161256c939291906131bd565b60405180910390a350508080612581906135cb565b915050612273565b505092915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156125ea578382816125e0576125e061366c565b0492505050612178565b83811061262d576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610543565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600082601f8301126126a757600080fd5b813560206126bc6126b783613490565b613441565b80838252828201915082860187848660061b89010111156126dc57600080fd5b6000805b8681101561272757604080848c0312156126f8578283fd5b6127006133ad565b843561270b816136f9565b81528488013588820152865294860194909201916001016126e0565b509198975050505050505050565b600082601f83011261274657600080fd5b813560206127566126b783613490565b8281528181019085830160c08086028801850189101561277557600080fd5b6000805b878110156128135782848c03121561278f578182fd5b6127976133d6565b84356127a28161370e565b8152848801356127b18161371c565b818901526040858101356127c48161372c565b908201526060858101356127d7816136f9565b908201526080858101356127ea816136f9565b9082015260a0858101356127fd81613740565b9082015286529486019492820192600101612779565b50929998505050505050505050565b803561282d8161370e565b919050565b805161282d816136f9565b803561282d816136f9565b60008083601f84011261285a57600080fd5b50813567ffffffffffffffff81111561287257600080fd5b60208301915083602082850101111561288a57600080fd5b9250929050565b600061016082840312156128a457600080fd5b50919050565b600060c082840312156128a457600080fd5b6000602082840312156128ce57600080fd5b8135612178816136f9565b6000602082840312156128eb57600080fd5b8151612178816136f9565b60008060008060008060a0878903121561290f57600080fd5b863561291a816136f9565b95506020870135945060408701359350606087013567ffffffffffffffff81111561294457600080fd5b61295089828a01612848565b90945092505060808701356129648161370e565b809150509295509295509295565b6000602080838503121561298557600080fd5b825167ffffffffffffffff81111561299c57600080fd5b8301601f810185136129ad57600080fd5b80516129bb6126b782613490565b8181528381019083850160c0808502860187018a10156129da57600080fd5b60009550855b85811015612a7a5781838c0312156129f6578687fd5b6129fe6133d6565b8351612a098161370e565b815283890151612a188161371c565b818a0152604084810151612a2b8161372c565b90820152606084810151612a3e816136f9565b90820152608084810151612a51816136f9565b9082015260a084810151612a6481613740565b90820152855293870193918101916001016129e0565b50919998505050505050505050565b600060208284031215612a9b57600080fd5b81516121788161370e565b60008060008060008060008060006102e08a8c031215612ac557600080fd5b8935985060208a013567ffffffffffffffff80821115612ae457600080fd5b612af08d838e01612848565b909a509850889150612b058d60408e016128aa565b9750612b158d6101008e01612891565b96506102608c0135915080821115612b2c57600080fd5b612b388d838e01612696565b95506102808c0135915080821115612b4f57600080fd5b612b5b8d838e01612735565b94506102a08c0135915080821115612b7257600080fd5b50612b7f8c828d01612735565b925050612b8f6102c08b0161283d565b90509295985092959850929598565b60006101608284031215612bb157600080fd5b612bb96133f9565b823581526020830135602082015260408301356040820152612bdd60608401612822565b6060820152612bee60808401612822565b6080820152612bff60a08401612822565b60a0820152612c1060c08401612822565b60c0820152612c2160e08401612822565b60e0820152610100612c34818501612822565b90820152610120612c46848201612822565b90820152610140612c5884820161283d565b908201529392505050565b60006102008284031215612c7657600080fd5b612c7e61341d565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152612cca60e08401612832565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b600060208284031215612d4257600080fd5b5051919050565b60008060408385031215612d5c57600080fd5b8235915060208084013567ffffffffffffffff80821115612d7c57600080fd5b818601915086601f830112612d9057600080fd5b813581811115612da257612da26136ca565b612dd2847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613441565b91508082528784828501011115612de857600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806000806102a08789031215612e2057600080fd5b86359550612e3188602089016128aa565b9450612e408860e08901612891565b935061024087013567ffffffffffffffff80821115612e5e57600080fd5b612e6a8a838b01612696565b9450610260890135915080821115612e8157600080fd5b612e8d8a838b01612735565b9350610280890135915080821115612ea457600080fd5b50612eb189828a01612735565b9150509295509295509295565b60008060408385031215612ed157600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215612efb57600080fd5b87359650602088013595506040880135612f14816136f9565b9450606088013567ffffffffffffffff811115612f3057600080fd5b612f3c8a828b01612848565b9095509350506080880135612f508161370e565b915060a0880135612f608161370e565b8091505092959891949750929550565b600080600060608486031215612f8557600080fd5b83359250602084013591506040840135612f9e816136f9565b809150509250925092565b600081518084526020808501945080840160005b8381101561303e5761302b87835180511515825261ffff602082015116602083015265ffffffffffff604082015116604083015260608101516001600160a01b038082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b60c0969096019590820190600101612fbd565b509495945050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6001600160a01b03851681528360208201526060604082015260006130bb606083018486613049565b9695505050505050565b6060815260006130d9606083018688613049565b9315156020830152506001600160a01b039190911660409091015292915050565b600061020082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161315d60e08401826001600160a01b03169052565b50610100838101519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e092830151929091019190915290565b6101008101613227828680511515825261ffff602082015116602083015265ffffffffffff604082015116604083015260608101516001600160a01b038082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b8360c08301526001600160a01b03831660e0830152949350505050565b84815260606020820152600061325e606083018587613049565b90506001600160a01b038316604083015295945050505050565b60006101408201905086825285356020830152602086013560408301526040860135606083015260608601356080830152608086013560a083015260a08601356132c1816136f9565b6001600160a01b031660c083015260e082019490945261010081019290925215156101209091015292915050565b8481528360208201528260408201526080606082015260006130bb6080830184612fa9565b84815260006020858184015260806040840152845180608085015260005b8181101561334e5786810183015185820160a001528201613332565b8181111561336057600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016830160a00191506133a4905060608301846001600160a01b03169052565b95945050505050565b6040805190810167ffffffffffffffff811182821017156133d0576133d06136ca565b60405290565b60405160c0810167ffffffffffffffff811182821017156133d0576133d06136ca565b604051610160810167ffffffffffffffff811182821017156133d0576133d06136ca565b604051610200810167ffffffffffffffff811182821017156133d0576133d06136ca565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613488576134886136ca565b604052919050565b600067ffffffffffffffff8211156134aa576134aa6136ca565b5060051b60200190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156134ee576134ee61363d565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156135225761352261363d565b50500190565b6000821982111561353b5761353b61363d565b500190565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561357a5761357a61363d565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156135ae576135ae61363d565b50500390565b6000828210156135c6576135c661363d565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135fd576135fd61363d565b5060010190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156136365761363661363d565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b038116811461174257600080fd5b801515811461174257600080fd5b61ffff8116811461174257600080fd5b65ffffffffffff8116811461174257600080fd5b66ffffffffffffff8116811461174257600080fdfea2646970667358221220f8bccfbb649c74c35a9471b42012a7890a9ba3e3be62c3e01183f26cc842c9d564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80638b79543c116100cd578063cf169f8411610081578063e867c59c11610066578063e867c59c1461033f578063f033b3b414610352578063f2fde38b1461036557600080fd5b8063cf169f8414610316578063ddca3f431461033657600080fd5b8063ad007d63116100b2578063ad007d63146102b5578063c41c2f24146102dc578063c63e51881461030357600080fd5b80638b79543c1461027d5780638da5cb5b146102a457600080fd5b80635172a2bf116101245780636193063011610109578063619306301461023b578063715018a6146102625780638ae9c07b1461026a57600080fd5b80635172a2bf146101d5578063557e71551461021457600080fd5b8063029c7b97146101565780631665bc0f1461016b5780632bdfe0041461017e5780632dc28a30146101c2575b600080fd5b610169610164366004612aa6565b610378565b005b6101696101793660046128f6565b6104f4565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101696101d03660046128bc565b6109b2565b6102066101e3366004612f70565b600360209081526000938452604080852082529284528284209052825290205481565b6040519081526020016101b9565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b610169610a0c565b610169610278366004612ee0565b610a72565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166101a5565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b610206610311366004612e06565b610fd8565b610329610324366004612ebe565b6113db565b6040516101b991906130fa565b61020660045481565b61020661034d366004612d49565b611528565b610206610360366004612ebe565b611597565b6101696103733660046128bc565b611663565b600061039161038c36889003880188612b9e565b611745565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663733f0127338d8d8d6040518563ffffffff1660e01b81526004016103e79493929190613092565b602060405180830381600087803b15801561040157600080fd5b505af1158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190612d30565b905061044b818984898989600161197d565b506040517f6eba4a0d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0384811660248301527f00000000000000000000000000000000000000000000000000000000000000001690636eba4a0d90604401600060405180830381600087803b1580156104cf57600080fd5b505af11580156104e3573d6000803e3d6000fd5b505050505050505050505050505050565b6002600154141561054c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015585856010336001600160a01b038416148061062d57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190612a89565b806106f957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106c157600080fd5b505afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190612a89565b6107455760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610543565b600087116107955760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f500000000000000000000000000000000000000000000000000000006044820152606401610543565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906343a266c2906024016102006040518083038186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190612c63565b6101e081015190915060241c600116156108a65760405162461bcd60e51b815260206004820152600660248201527f50415553454400000000000000000000000000000000000000000000000000006044820152606401610543565b6108b08989611c8a565b6040517f906ebd0f0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152602482018b9052604482018a905286151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063906ebd0f90608401600060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b50505050888a6001600160a01b03167fdf04e13ee4fcd48a81ab2fd114757093740a3efa9b6475d86e05878b4c59d0798a8a8a3360405161099a9493929190613244565b60405180910390a35050600180555050505050505050565b60026001541415610a055760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b5060018055565b6000546001600160a01b03163314610a665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b610a706000611cfd565b565b60026001541415610ac55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b158015610b4357600080fd5b505afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b91906128d9565b876011336001600160a01b0384161480610c5657506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190612a89565b610ca25760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610543565b6001600160a01b038816610cf85760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610543565b60008911610d485760405162461bcd60e51b815260206004820152600560248201527f4e4f5f4f500000000000000000000000000000000000000000000000000000006044820152606401610543565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018b90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906343a266c2906024016102006040518083038186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd9190612c63565b6101e081015190915060231c60011615610e595760405162461bcd60e51b815260206004820152600660248201527f50415553454400000000000000000000000000000000000000000000000000006044820152606401610543565b848015610e7157506101e081015160081c60ff1660c8145b15610ea45760008b815260026020526040902054610e90908b90613540565b60008c815260026020526040902055610f7e565b84610ed35760008b815260026020526040902054610ec3908b906134b4565b60008c8152600260205260409020555b6040517fceddd3e40000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152602482018d9052604482018c905287151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050505b898b8a6001600160a01b03167f0a5b29746c316202b4734deae6c8fe692b0f829c1387e75e2ade1e34f14146c48b8b8a33604051610fbf94939291906130c5565b60405180910390a4505060018055505050505050505050565b60006002600154141561102d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b1580156110ab57600080fd5b505afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e391906128d9565b876001336001600160a01b03841614806111be57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561118657600080fd5b505afa15801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190612a89565b61120a5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610543565b600061121e61038c368b90038b018b612b9e565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018d90529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b15801561129a57600080fd5b505afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612d30565b60008c81526002602052604090205414611301576112ff8b60405180602001604052806000815250611d65565b505b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018c90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612d30565b1590506113c78c8c848c8c8c8761197d565b600180559c9b505050505050505050505050565b6114646040518061020001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517fa7f166b500000000000000000000000000000000000000000000000000000000815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a7f166b59060440161020060405180830381600087803b1580156114e757600080fd5b505af11580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f9190612c63565b90505b92915050565b60006002600154141561157d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610543565b600260015561158c8383611d65565b600180559392505050565b6000828152600260205260408082205490517f75b0d9cd0000000000000000000000000000000000000000000000000000000081526004810185905261151f919084907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b15801561162657600080fd5b505afa15801561163a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165e9190612d30565b612105565b6000546001600160a01b031633146116bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6001600160a01b0381166117395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610543565b61174281611cfd565b50565b600060c88260000151111561179c5760405162461bcd60e51b815260206004820152601160248201527f4241445f52455345525645445f524154450000000000000000000000000000006044820152606401610543565b60c8826020015111156117f15760405162461bcd60e51b815260206004820152601360248201527f4241445f524544454d5054494f4e5f52415445000000000000000000000000006044820152606401610543565b60c8826040015111156118465760405162461bcd60e51b815260206004820152601a60248201527f4241445f42414c4c4f545f524544454d5054494f4e5f524154450000000000006044820152606401610543565b5080516020808301516040840151606085015160189190911b60109290921b60089490941b93909317176001179161187f576000611882565b60015b60ff16901b60ff1681179050602182608001516118a05760006118a3565b60015b60ff16901b60ff168117905060228260a001516118c15760006118c4565b60015b60ff16901b60ff168117905060238260c001516118e25760006118e5565b60015b60ff16901b60ff168117905060248260e00151611903576000611906565b60015b60ff16901b60ff16811790506025826101000151611925576000611928565b60015b60ff16901b60ff1681179050602682610120015161194757600061194a565b60015b6101409093015173ffffffffffffffffffffffffffffff800000000060279190911b1660ff93841690911b909216171790565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca2148f08a8a8a600454886040518663ffffffff1660e01b81526004016119d6959493929190613278565b61020060405180830381600087803b1580156119f157600080fd5b505af1158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190612c63565b855190915015611ad55760808101516040517fa1aa95b10000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a1aa95b191611aa2918d916001908b906004016132ef565b600060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b505050505b835115611b7e5760808101516040517fa1aa95b10000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a1aa95b191611b4b918d916002908a906004016132ef565b600060405180830381600087803b158015611b6557600080fd5b505af1158015611b79573d6000803e3d6000fd5b505050505b60005b8651811015611c7c576000878281518110611b9e57611b9e61369b565b60209081029190910181015160008d815260038352604080822060808801518352845280822083516001600160a01b0316835284529020549181015190925014611c69576020818101805160008e8152600384526040808220608089018051845290865281832087516001600160a01b039081168552908752928290209390935591518251865190921682529251938101939093523390830152908c907ffcac803527061e0475e179cb5537831df4b93f982b586436e2c9073a50b2d0389060600160405180910390a35b5080611c74816135cb565b915050611b81565b505198975050505050505050565b600082815260026020526040812054908112611cc957818112611cb657611cb18282613540565b611ce6565b611cc08183613540565b611cb190613604565b81611cd382613604565b611cdd9190613528565b611ce690613604565b600093845260026020526040909320929092555050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f43a266c20000000000000000000000000000000000000000000000000000000081526004810183905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016102006040518083038186803b158015611de457600080fd5b505afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612c63565b9050806040015160001415611e35576000915050611522565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906375b0d9cd9060240160206040518083038186803b158015611eb157600080fd5b505afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190612d30565b6000868152600260205260409020546101e0840151919250611f119160081c60ff1683612105565b9250611f1d8382613528565b6000868152600260205260408082209290925590517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b158015611fa857600080fd5b505afa158015611fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe091906128d9565b905060008415611ff957611ff4848661217f565b611ffc565b60005b905080156120ae576040517fceddd3e40000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820189905260448201839052600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b15801561209557600080fd5b505af11580156120a9573d6000803e3d6000fd5b505050505b816001600160a01b03168785600001517f2a88b15c2f1b02de6e8fb5d10418f617d190e0cae82227aa8792a023fe8f24f788858b336040516120f39493929190613314565b60405180910390a45050505092915050565b60008060008512156121295761211a85613604565b6121249084613528565b612133565b61213385846135b4565b905080612144576000915050612178565b8360c81415612154579050612178565b8061216a8160c861216588826135b4565b612591565b61217491906135b4565b9150505b9392505050565b602082015160808301516040517f69e11cc5000000000000000000000000000000000000000000000000000000008152600481019290925260248201526002604482015281906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906369e11cc59060640160006040518083038186803b15801561221457600080fd5b505afa158015612228573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261226e9190810190612972565b905060005b81518110156125895760008282815181106122905761229061369b565b6020026020010151905060006122b186836020015161ffff16612710612591565b90508015612456577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ceddd3e48360a0015166ffffffffffffff16600014156123085783606001516123c7565b60a08401516040517f6352211e00000000000000000000000000000000000000000000000000000000815266ffffffffffffff90911660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b15801561238f57600080fd5b505afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c791906128d9565b60208a0151855160405160e085901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03909316600484015260248301919091526044820185905215156064820152608401600060405180830381600087803b15801561243d57600080fd5b505af1158015612451573d6000803e3d6000fd5b505050505b60808201516001600160a01b031615612523576080820151602088015160a0840151606085015185516040517fc8e84e020000000000000000000000000000000000000000000000000000000081526004810187905260026024820152604481019490945266ffffffffffffff90921660648401526001600160a01b03908116608484015290151560a48301529091169063c8e84e029060c401600060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b505050505b61252d81866135b4565b9450866020015187600001517f28f59891af39713bbdff0e034b0309239c78191339edd51f4f8478f297d42f0684843360405161256c939291906131bd565b60405180910390a350508080612581906135cb565b915050612273565b505092915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156125ea578382816125e0576125e061366c565b0492505050612178565b83811061262d576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610543565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600082601f8301126126a757600080fd5b813560206126bc6126b783613490565b613441565b80838252828201915082860187848660061b89010111156126dc57600080fd5b6000805b8681101561272757604080848c0312156126f8578283fd5b6127006133ad565b843561270b816136f9565b81528488013588820152865294860194909201916001016126e0565b509198975050505050505050565b600082601f83011261274657600080fd5b813560206127566126b783613490565b8281528181019085830160c08086028801850189101561277557600080fd5b6000805b878110156128135782848c03121561278f578182fd5b6127976133d6565b84356127a28161370e565b8152848801356127b18161371c565b818901526040858101356127c48161372c565b908201526060858101356127d7816136f9565b908201526080858101356127ea816136f9565b9082015260a0858101356127fd81613740565b9082015286529486019492820192600101612779565b50929998505050505050505050565b803561282d8161370e565b919050565b805161282d816136f9565b803561282d816136f9565b60008083601f84011261285a57600080fd5b50813567ffffffffffffffff81111561287257600080fd5b60208301915083602082850101111561288a57600080fd5b9250929050565b600061016082840312156128a457600080fd5b50919050565b600060c082840312156128a457600080fd5b6000602082840312156128ce57600080fd5b8135612178816136f9565b6000602082840312156128eb57600080fd5b8151612178816136f9565b60008060008060008060a0878903121561290f57600080fd5b863561291a816136f9565b95506020870135945060408701359350606087013567ffffffffffffffff81111561294457600080fd5b61295089828a01612848565b90945092505060808701356129648161370e565b809150509295509295509295565b6000602080838503121561298557600080fd5b825167ffffffffffffffff81111561299c57600080fd5b8301601f810185136129ad57600080fd5b80516129bb6126b782613490565b8181528381019083850160c0808502860187018a10156129da57600080fd5b60009550855b85811015612a7a5781838c0312156129f6578687fd5b6129fe6133d6565b8351612a098161370e565b815283890151612a188161371c565b818a0152604084810151612a2b8161372c565b90820152606084810151612a3e816136f9565b90820152608084810151612a51816136f9565b9082015260a084810151612a6481613740565b90820152855293870193918101916001016129e0565b50919998505050505050505050565b600060208284031215612a9b57600080fd5b81516121788161370e565b60008060008060008060008060006102e08a8c031215612ac557600080fd5b8935985060208a013567ffffffffffffffff80821115612ae457600080fd5b612af08d838e01612848565b909a509850889150612b058d60408e016128aa565b9750612b158d6101008e01612891565b96506102608c0135915080821115612b2c57600080fd5b612b388d838e01612696565b95506102808c0135915080821115612b4f57600080fd5b612b5b8d838e01612735565b94506102a08c0135915080821115612b7257600080fd5b50612b7f8c828d01612735565b925050612b8f6102c08b0161283d565b90509295985092959850929598565b60006101608284031215612bb157600080fd5b612bb96133f9565b823581526020830135602082015260408301356040820152612bdd60608401612822565b6060820152612bee60808401612822565b6080820152612bff60a08401612822565b60a0820152612c1060c08401612822565b60c0820152612c2160e08401612822565b60e0820152610100612c34818501612822565b90820152610120612c46848201612822565b90820152610140612c5884820161283d565b908201529392505050565b60006102008284031215612c7657600080fd5b612c7e61341d565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152612cca60e08401612832565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b600060208284031215612d4257600080fd5b5051919050565b60008060408385031215612d5c57600080fd5b8235915060208084013567ffffffffffffffff80821115612d7c57600080fd5b818601915086601f830112612d9057600080fd5b813581811115612da257612da26136ca565b612dd2847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613441565b91508082528784828501011115612de857600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806000806102a08789031215612e2057600080fd5b86359550612e3188602089016128aa565b9450612e408860e08901612891565b935061024087013567ffffffffffffffff80821115612e5e57600080fd5b612e6a8a838b01612696565b9450610260890135915080821115612e8157600080fd5b612e8d8a838b01612735565b9350610280890135915080821115612ea457600080fd5b50612eb189828a01612735565b9150509295509295509295565b60008060408385031215612ed157600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215612efb57600080fd5b87359650602088013595506040880135612f14816136f9565b9450606088013567ffffffffffffffff811115612f3057600080fd5b612f3c8a828b01612848565b9095509350506080880135612f508161370e565b915060a0880135612f608161370e565b8091505092959891949750929550565b600080600060608486031215612f8557600080fd5b83359250602084013591506040840135612f9e816136f9565b809150509250925092565b600081518084526020808501945080840160005b8381101561303e5761302b87835180511515825261ffff602082015116602083015265ffffffffffff604082015116604083015260608101516001600160a01b038082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b60c0969096019590820190600101612fbd565b509495945050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6001600160a01b03851681528360208201526060604082015260006130bb606083018486613049565b9695505050505050565b6060815260006130d9606083018688613049565b9315156020830152506001600160a01b039190911660409091015292915050565b600061020082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161315d60e08401826001600160a01b03169052565b50610100838101519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e092830151929091019190915290565b6101008101613227828680511515825261ffff602082015116602083015265ffffffffffff604082015116604083015260608101516001600160a01b038082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b8360c08301526001600160a01b03831660e0830152949350505050565b84815260606020820152600061325e606083018587613049565b90506001600160a01b038316604083015295945050505050565b60006101408201905086825285356020830152602086013560408301526040860135606083015260608601356080830152608086013560a083015260a08601356132c1816136f9565b6001600160a01b031660c083015260e082019490945261010081019290925215156101209091015292915050565b8481528360208201528260408201526080606082015260006130bb6080830184612fa9565b84815260006020858184015260806040840152845180608085015260005b8181101561334e5786810183015185820160a001528201613332565b8181111561336057600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016830160a00191506133a4905060608301846001600160a01b03169052565b95945050505050565b6040805190810167ffffffffffffffff811182821017156133d0576133d06136ca565b60405290565b60405160c0810167ffffffffffffffff811182821017156133d0576133d06136ca565b604051610160810167ffffffffffffffff811182821017156133d0576133d06136ca565b604051610200810167ffffffffffffffff811182821017156133d0576133d06136ca565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613488576134886136ca565b604052919050565b600067ffffffffffffffff8211156134aa576134aa6136ca565b5060051b60200190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156134ee576134ee61363d565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156135225761352261363d565b50500190565b6000821982111561353b5761353b61363d565b500190565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561357a5761357a61363d565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156135ae576135ae61363d565b50500390565b6000828210156135c6576135c661363d565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135fd576135fd61363d565b5060010190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156136365761363661363d565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b038116811461174257600080fd5b801515811461174257600080fd5b61ffff8116811461174257600080fd5b65ffffffffffff8116811461174257600080fd5b66ffffffffffffff8116811461174257600080fdfea2646970667358221220f8bccfbb649c74c35a9471b42012a7890a9ba3e3be62c3e01183f26cc842c9d564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnTokensOf(address,uint256,uint256,string,bool)": {
        "details": "Only a token's holder or a designated operator can burn it.",
        "params": {
          "_holder": "The account that is having its tokens burned.",
          "_memo": "A memo to pass along to the emitted event.",
          "_preferUnstakedTokens": "Whether ERC20's should be burned first if they have been issued.",
          "_projectId": "The ID of the project to which the tokens being burned belong.",
          "_tokenCount": "The number of tokens to burn."
        }
      },
      "constructor": {
        "params": {
          "_directory": "The directory of terminals.",
          "_fundingCycleStore": "The contract storing all funding cycle configurations.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers.",
          "_splitsStore": "The contract that stores splits for each project.",
          "_tokenStore": "The contract that manages token minting and burning."
        }
      },
      "distributeReservedTokensOf(uint256,string)": {
        "params": {
          "_memo": "A memo to leave with the emitted event.",
          "_projectId": "The ID of the project to which the reserved tokens belong."
        },
        "returns": {
          "_0": "The amount of reserved tokens that were minted."
        }
      },
      "launchProjectFor(bytes32,string,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[],address)": {
        "details": "Each operation withing this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf. A project owner will be able to reconfigure the funding cycle's properties as long as it has not yet received a payment._properties.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals)._properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time._properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent cycle. This has no effect for a project's first funding cycle._properties.discountRate A number from 0-200 (0-20%) indicating how many tokens will be minted as a result of a contribution made to this funding cycle compared to one made to the project's next funding cycle. If it's 0 (0%), each funding cycle's will have equal weight. If the number is 100 (10%), a contribution to the next funding cycle will only mint 90% of tokens that a contribution of the same amount made during the current funding cycle mints. If the number is 200 (20%), the difference will be 20%.  There's a special case: If the number is 201, the funding cycle will be non-recurring and one-time only._properties.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface._metadata.reservedRate A number from 0-200 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits._metadata.redemptionRate The rate from 0-200 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate._metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot._metadata.pausePay Whether or not the pay functionality should be paused during this cycle._metadata.pauseWithdraw Whether or not the withdraw functionality should be paused during this cycle._metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle._metadata.pauseMint Whether or not the mint functionality should be paused during this cycle._metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle._metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment._metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption._metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.",
        "params": {
          "_handle": "The project's unique handle. This can be updated any time by the owner of the project.",
          "_metadata": "A struct specifying the TerminalV2 specific params that a funding cycle can have.",
          "_overflowAllowances": "The amount, in wei (18 decimals), of ETH that a project can use from its own overflow on-demand.",
          "_payoutSplits": "Any payout splits to set.",
          "_properties": "The funding cycle configuration properties. These properties will remain fixed for the duration of the funding cycle.",
          "_reservedTokenSplits": "Any reserved token splits to set.",
          "_uri": "A link to associate with the project. This can be updated any time by the owner of the project."
        }
      },
      "mintTokensOf(uint256,uint256,address,string,bool,bool)": {
        "details": "Only a project's owner or a designated operator can mint it.",
        "params": {
          "_beneficiary": "The account that the tokens are being minted for.",
          "_memo": "A memo to pass along to the emitted event.",
          "_preferUnstakedTokens": "Whether ERC20's should be burned first if they have been issued.",
          "_projectId": "The ID of the project to which the tokens being burned belong.",
          "_tokenCount": "The amount of tokens to mint."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[])": {
        "details": "Only a project's owner or a designated operator can configure its funding cycles._properties.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals)._properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time._properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent cycle. This has no effect for a project's first funding cycle._properties.discountRate A number from 0-200 (0-20%) indicating how many tokens will be minted as a result of a contribution made to this funding cycle compared to one made to the project's next funding cycle. If it's 0 (0%), each funding cycle's will have equal weight. If the number is 100 (10%), a contribution to the next funding cycle will only mint 90% of tokens that a contribution of the same amount made during the current funding cycle mints. If the number is 200 (20%), the difference will be 20%.  There's a special case: If the number is 201, the funding cycle will be non-recurring and one-time only._properties.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface._metadata.reservedRate A number from 0-200 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits._metadata.redemptionRate The rate from 0-200 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate._metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot._metadata.pausePay Whether or not the pay functionality should be paused during this cycle._metadata.pauseWithdraw Whether or not the withdraw functionality should be paused during this cycle._metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle._metadata.pauseMint Whether or not the mint functionality should be paused during this cycle._metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle._metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment._metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption._metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.",
        "params": {
          "_metadata": "A struct specifying the TerminalV2 specific params that a funding cycle can have.",
          "_overflowAllowances": "The amount, in wei (18 decimals), of ETH that a project can use from its own overflow on-demand.",
          "_payoutSplits": "Any payout splits to set.",
          "_projectId": "The ID of the project whos funding cycles are being reconfigured.",
          "_properties": "The funding cycle configuration properties. These properties will remain fixed for the duration of the funding cycle.",
          "_reservedTokenSplits": "Any reserved token splits to set."
        },
        "returns": {
          "_0": "The ID of the funding cycle that was successfully configured."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reservedTokenBalanceOf(uint256,uint256)": {
        "params": {
          "_projectId": "The ID of the project to get a reserved token balance of.",
          "_reservedRate": "The reserved rate to use when making the calculation."
        },
        "returns": {
          "_0": "The current amount of reserved tokens."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "fee": {
        "details": " Out of 200."
      },
      "overflowAllowanceOf": {
        "details": "[_projectId][_configuration][_terminal] _projectId The ID of the project to get the current overflow allowance of. _configuration The configuration of the during which the allowance applies. _terminal The terminal managing the overflow.",
        "return": "The current overflow allowance for the specified project configuration. Decreases as projects use of the allowance.",
        "returns": {
          "_0": "The current overflow allowance for the specified project configuration. Decreases as projects use of the allowance."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "burnTokensOf(address,uint256,uint256,string,bool)": {
        "notice": "Burns a token holder's supply."
      },
      "directory()": {
        "notice": "The directory of terminals."
      },
      "distributeReservedTokensOf(uint256,string)": {
        "notice": "Mints and distributes all outstanding reserved tokens for a project."
      },
      "fee()": {
        "notice": " The platform fee percent."
      },
      "fundingCycleStore()": {
        "notice": " The contract storing all funding cycle configurations."
      },
      "launchProjectFor(bytes32,string,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[],address)": {
        "notice": "Creates a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any splits."
      },
      "mintTokensOf(uint256,uint256,address,string,bool,bool)": {
        "notice": "Mint new token supply into an account."
      },
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "overflowAllowanceOf(uint256,uint256,address)": {
        "notice": " The amount of overflow that a project is allowed to tap into on-demand."
      },
      "projects()": {
        "notice": " The Projects contract which mints ERC-721's that represent project ownership."
      },
      "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,address),(address,uint256)[],(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address,address,uint56)[])": {
        "notice": "Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot."
      },
      "reservedTokenBalanceOf(uint256,uint256)": {
        "notice": "Gets the amount of reserved tokens that a project has available to distribute."
      },
      "splitsStore()": {
        "notice": " The contract that stores splits for each project."
      },
      "tokenStore()": {
        "notice": " The contract that manages token minting and burning."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/v2/JBController.sol:JBController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 160,
        "contract": "contracts/v2/JBController.sol:JBController",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15651,
        "contract": "contracts/v2/JBController.sol:JBController",
        "label": "_processedTokenTrackerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 15687,
        "contract": "contracts/v2/JBController.sol:JBController",
        "label": "overflowAllowanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBTerminal)25212,t_uint256)))"
      },
      {
        "astId": 15692,
        "contract": "contracts/v2/JBController.sol:JBController",
        "label": "fee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IJBTerminal)25212": {
        "encoding": "inplace",
        "label": "contract IJBTerminal",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_contract(IJBTerminal)25212,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IJBTerminal)25212",
        "label": "mapping(contract IJBTerminal => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IJBTerminal)25212,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IJBTerminal => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IJBTerminal)25212,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBTerminal)25212,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(contract IJBTerminal => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_contract(IJBTerminal)25212,t_uint256))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
