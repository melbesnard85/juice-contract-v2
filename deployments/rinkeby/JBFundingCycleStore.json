{
  "address": "0x1bd2d2D0a5F5981636a4EC1b28195722E1D333bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFundingCycleData",
          "name": "data",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Configure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "basedOn",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_metadata",
          "type": "uint256"
        }
      ],
      "name": "configureFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentBallotStateOf",
      "outputs": [
        {
          "internalType": "enum JBBallotState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "latestConfigurationOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "queuedOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa978bbc3d05becb77225805ff0a56cb6d6b1b684a2d7854552bee26af8100bbb",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x1bd2d2D0a5F5981636a4EC1b28195722E1D333bD",
    "transactionIndex": 0,
    "gasUsed": "1373347",
    "logsBloom": "0x
    "blockHash": "0x7ac7c73b8a4e53f00a63ace739740954c7aeef70688281c8c009946bcb16dc3b",
    "transactionHash": "0xa978bbc3d05becb77225805ff0a56cb6d6b1b684a2d7854552bee26af8100bbb",
    "logs": [],
    "blockNumber": 9631498,
    "cumulativeGasUsed": "1373347",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xf4326041BE30a4b7fc4db9Bb6286fef458F71fe2"],
  "solcInputHash": "5f321124cef92f5734094814cf45799b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBFundingCycleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_metadata\",\"type\":\"uint256\"}],\"name\":\"configureFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentBallotStateOf\",\"outputs\":[{\"internalType\":\"enum JBBallotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestConfigurationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"queuedOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"configureFor(uint256,(uint256,uint256,uint256,address),uint256)\":{\"details\":\"Only a project's current controller can configure its funding cycles._data.target The amount that the project wants to receive in each funding cycle. 18 decimals._data.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days.  Set to 0 for no expiry and to be able to reconfigure anytime._data.discountRate A number from 0-1000000000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 1000000001, an non-recurring funding cycle will get made._data.ballot The new ballot that will be used to approve subsequent reconfigurations.\",\"params\":{\"_data\":\"The funding cycle configuration.\",\"_metadata\":\"Data to associate with this funding cycle configuration.\",\"_projectId\":\"The ID of the project being configured.\"},\"returns\":{\"_0\":\"The funding cycle that the configuration will take effect during.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\"}},\"currentBallotStateOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to check the ballot state of.\"},\"returns\":{\"_0\":\"The current ballot's state.\"}},\"currentOf(uint256)\":{\"details\":\"Returns an empty funding cycle with all properties set to 0 if a current funding cycle of the project is not found.\",\"params\":{\"_projectId\":\"The ID of the project to get the current funding cycle of.\"},\"returns\":{\"fundingCycle\":\"The current funding cycle.\"}},\"get(uint256,uint256)\":{\"params\":{\"_configuration\":\"The configuration of the funding cycle to get.\",\"_projectId\":\"The ID of the project to which the funding cycle belongs.\"},\"returns\":{\"fundingCycle\":\"The funding cycle.\"}},\"queuedOf(uint256)\":{\"details\":\"Returns an empty funding cycle with all properties set to 0 if a queued funding cycle of the project is not found.\",\"params\":{\"_projectId\":\"The ID of the project to get the queued funding cycle of.\"},\"returns\":{\"_0\":\"_fundingCycle The queued funding cycle.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"configureFor(uint256,(uint256,uint256,uint256,address),uint256)\":{\"notice\":\" Configures the next eligible funding cycle for the specified project.\"},\"currentBallotStateOf(uint256)\":{\"notice\":\" The current ballot state of the project.\"},\"currentOf(uint256)\":{\"notice\":\" The funding cycle that is currently active for the specified project.\"},\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"get(uint256,uint256)\":{\"notice\":\" Get the funding cycle with the given configuration for the specified project.\"},\"latestConfigurationOf(uint256)\":{\"notice\":\" The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of.\"},\"queuedOf(uint256)\":{\"notice\":\" The funding cycle that's next up for the specified project.\"}},\"notice\":\" Manages funding cycle scheduling.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBFundingCycleStore.sol\":\"JBFundingCycleStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"contracts/v2/JBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBFundingCycleStore.sol';\\nimport './abstract/JBControllerUtility.sol';\\n\\n/** \\n  @notice \\n  Manages funding cycle scheduling.\\n*/\\ncontract JBFundingCycleStore is JBControllerUtility, IJBFundingCycleStore {\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Stores the user defined properties of each funding cycle, packed into one storage slot.\\n\\n    _projectId The ID of the project to get properties of.\\n    _configuration The funding cycle configuration to get properties of.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) private _packedUserPropertiesOf;\\n\\n  /** \\n    @notice\\n    Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot.\\n    \\n    _projectId The ID of the project to get instrinsic properties of.\\n    _configuration The funding cycle configuration to get properties of.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) private _packedIntrinsicPropertiesOf;\\n\\n  /** \\n    @notice\\n    Stores the metadata for each funding cycle configuration, packed into one storage slot.\\n\\n    _projectId The ID of the project to get metadata of.\\n    _configuration The funding cycle configuration to get metadata of.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) private _metadataOf;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The latest funding cycle configuration for each project.\\n\\n    _projectId The ID of the project to get the latest funding cycle configuration of.\\n  */\\n  mapping(uint256 => uint256) public override latestConfigurationOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Get the funding cycle with the given configuration for the specified project.\\n\\n    @param _projectId The ID of the project to which the funding cycle belongs.\\n    @param _configuration The configuration of the funding cycle to get.\\n\\n    @return fundingCycle The funding cycle.\\n  */\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    override\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    return _getStructFor(_projectId, _configuration);\\n  }\\n\\n  /**\\n    @notice \\n    The funding cycle that's next up for the specified project.\\n\\n    @dev\\n    Returns an empty funding cycle with all properties set to 0 if a queued funding cycle of the project is not found.\\n\\n    @param _projectId The ID of the project to get the queued funding cycle of.\\n\\n    @return _fundingCycle The queued funding cycle.\\n  */\\n  function queuedOf(uint256 _projectId) public view override returns (JBFundingCycle memory) {\\n    // The project must have funding cycles.\\n    if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0);\\n\\n    // Get a reference to the configuration of the standby funding cycle.\\n    uint256 _fundingCycleConfiguration = _standbyOf(_projectId);\\n\\n    // If it exists, return it's funding cycle.\\n    if (_fundingCycleConfiguration > 0)\\n      return _getStructFor(_projectId, _fundingCycleConfiguration);\\n\\n    // Get a reference to the latest stored funding cycle configuration for the project.\\n    _fundingCycleConfiguration = latestConfigurationOf[_projectId];\\n\\n    // Resolve the funding cycle for the for the latest configured funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\\n\\n    // There's no queued if the current has a duration of 0.\\n    if (_fundingCycle.duration == 0) return _getStructFor(0, 0);\\n\\n    // There's no queued if the current is non recurring, represented by a discount rate of 1000000001.\\n    if (_fundingCycle.discountRate == 1000000001) return _getStructFor(0, 0);\\n\\n    // Check to see if this funding cycle's ballot is approved.\\n    // If so, return a funding cycle based on it.\\n    if (_isApproved(_projectId, _fundingCycle))\\n      return _mockFundingCycleBasedOn(_fundingCycle, false);\\n\\n    // If it hasn't been approved, set the configuration to be that of its base funding cycle, which carries the last approved configuration.\\n    _fundingCycleConfiguration = _fundingCycle.basedOn;\\n\\n    // A funding cycle must exist.\\n    if (_fundingCycleConfiguration == 0) return _getStructFor(0, 0);\\n\\n    // Return a mock of the next up funding cycle.\\n    // Use second next because the next would be a mock of the current funding cycle, not the queued one.\\n    return _mockFundingCycleBasedOn(_getStructFor(_projectId, _fundingCycleConfiguration), false);\\n  }\\n\\n  /**\\n    @notice \\n    The funding cycle that is currently active for the specified project.\\n\\n    @dev\\n    Returns an empty funding cycle with all properties set to 0 if a current funding cycle of the project is not found.\\n\\n    @param _projectId The ID of the project to get the current funding cycle of.\\n\\n    @return fundingCycle The current funding cycle.\\n  */\\n  function currentOf(uint256 _projectId)\\n    public\\n    view\\n    override\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // The project must have funding cycles.\\n    if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0);\\n\\n    // Get a reference to the configuration of the eligible funding cycle.\\n    uint256 _fundingCycleConfiguration = _eligibleOf(_projectId);\\n\\n    // Keep a reference to the eligible funding cycle.\\n    JBFundingCycle memory _fundingCycle;\\n\\n    // If a standby funding cycle exists...\\n    if (_fundingCycleConfiguration > 0) {\\n      // Resolve the funding cycle for the eligible configuration.\\n      _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\\n\\n      // Check to see if this funding cycle's ballot is approved.\\n      // If so, return it.\\n      if (_isApproved(_projectId, _fundingCycle)) return _fundingCycle;\\n\\n      // If it hasn't been approved, set the funding cycle configuration to be the configuration of the funding cycle that it's based on,\\n      // which carries the last approved configuration.\\n      _fundingCycleConfiguration = _fundingCycle.basedOn;\\n    } else {\\n      // No upcoming funding cycle found that is eligible to become active,\\n      // so use the last configuration.\\n      _fundingCycleConfiguration = latestConfigurationOf[_projectId];\\n\\n      // Get the funding cycle for the latest ID.\\n      _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\\n\\n      // There's no current if the latest is non recurring, represented by a discount rate of 1000000001.\\n      if (_fundingCycle.discountRate == 1000000001) return _getStructFor(0, 0);\\n\\n      // If it's not approved or if it hasn't yet started, get a reference to the funding cycle that the latest is based on, which has the latest approved configuration.\\n      if (!_isApproved(_projectId, _fundingCycle) || block.timestamp < _fundingCycle.start)\\n        _fundingCycleConfiguration = _fundingCycle.basedOn;\\n    }\\n\\n    // The funding cycle cant be 0.\\n    if (_fundingCycleConfiguration == 0) return _getStructFor(0, 0);\\n\\n    // The funding cycle to base a current one on.\\n    _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\\n\\n    // Return a mock of the current funding cycle.\\n    return _mockFundingCycleBasedOn(_fundingCycle, true);\\n  }\\n\\n  /** \\n    @notice \\n    The current ballot state of the project.\\n\\n    @param _projectId The ID of the project to check the ballot state of.\\n\\n    @return The current ballot's state.\\n  */\\n  function currentBallotStateOf(uint256 _projectId) external view override returns (JBBallotState) {\\n    // Get a reference to the latest funding cycle configuration.\\n    uint256 _fundingCycleConfiguration = latestConfigurationOf[_projectId];\\n\\n    // The project must have funding cycles.\\n    require(_fundingCycleConfiguration > 0, '0x14: NOT_FOUND');\\n\\n    // Resolve the funding cycle for the for the latest configuration.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\\n\\n    // If the latest funding cycle is the first, it must be approved.\\n    if (_fundingCycle.basedOn == 0) return JBBallotState.Approved;\\n\\n    return _ballotStateOf(_projectId, _fundingCycle.configuration, _fundingCycle.basedOn);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) JBControllerUtility(_directory) {}\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Configures the next eligible funding cycle for the specified project.\\n\\n    @dev\\n    Only a project's current controller can configure its funding cycles.\\n\\n    @param _projectId The ID of the project being configured.\\n    @param _data The funding cycle configuration.\\n      @dev _data.target The amount that the project wants to receive in each funding cycle. 18 decimals.\\n      @dev _data.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days. \\n        Set to 0 for no expiry and to be able to reconfigure anytime.\\n      @dev _data.discountRate A number from 0-1000000000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n        If it's 0, each funding cycle will have equal weight.\\n        If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n        If the number is 1000000001, an non-recurring funding cycle will get made.\\n      @dev _data.ballot The new ballot that will be used to approve subsequent reconfigurations.\\n    @param _metadata Data to associate with this funding cycle configuration.\\n\\n    @return The funding cycle that the configuration will take effect during.\\n  */\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata\\n  ) external override onlyController(_projectId) returns (JBFundingCycle memory) {\\n    // Duration must fit in a uint64, and must be greater than 1000 seconds to prevent manipulative miner behavior.\\n    require(_data.duration <= type(uint64).max && _data.duration > 1000, '0x15: BAD_DURATION');\\n\\n    // Discount rate token must be less than or equal to 100%. A value of 1000000001 means non-recurring.\\n    require(_data.discountRate <= 1000000001, '0x16: BAD_DISCOUNT_RATE');\\n\\n    // Weight must fit into a uint88.\\n    require(_data.weight <= type(uint88).max, '0x18: BAD_WEIGHT');\\n\\n    // The configuration timestamp is now.\\n    uint256 _configuration = block.timestamp;\\n\\n    // Set up a reconfiguration by configuring intrinsic properties.\\n    _configureIntrinsicProperiesFor(_projectId, _configuration, _data.weight);\\n\\n    // Store the configuration.\\n    _packAndStoreUserPropertiesOf(\\n      _configuration,\\n      _projectId,\\n      _data.ballot,\\n      _data.duration,\\n      _data.discountRate\\n    );\\n\\n    // Set the metadata if needed.\\n    if (_metadata > 0) _metadataOf[_projectId][_configuration] = _metadata;\\n\\n    emit Configure(_configuration, _projectId, _data, _metadata, msg.sender);\\n\\n    // Return the funding cycle for the new configuration.\\n    return _getStructFor(_projectId, _configuration);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Updates the configurable funding cycle for this project if it exists, otherwise creates one.\\n\\n    @param _projectId The ID of the project to find a configurable funding cycle for.\\n    @param _configuration The time at which the configuration is occurring.\\n    @param _weight The weight to store in the configured funding cycle.\\n  */\\n  function _configureIntrinsicProperiesFor(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    uint256 _weight\\n  ) private {\\n    // If there's not yet a funding cycle for the project, initialize one.\\n    if (latestConfigurationOf[_projectId] == 0) {\\n      _initFor(_projectId, _getStructFor(0, 0), _configuration, block.timestamp, _weight);\\n      return;\\n    }\\n\\n    // Get the standby funding cycle's configuration.\\n    uint256 _currentConfiguration = _standbyOf(_projectId);\\n\\n    // If it exists, make sure its updated, then return it.\\n    if (_currentConfiguration > 0) {\\n      // Get the funding cycle that the specified one is based on.\\n      JBFundingCycle memory _baseFundingCycle = _getStructFor(\\n        _projectId,\\n        _getStructFor(_projectId, _currentConfiguration).basedOn\\n      );\\n\\n      // Update the funding cycle to make sure the base's ballot has been approved.\\n      _updateAndStoreIntrinsicPropertiesOf(\\n        _configuration,\\n        _projectId,\\n        _baseFundingCycle,\\n        _getLatestTimeAfterBallotOf(_baseFundingCycle, _configuration),\\n        _weight\\n      );\\n\\n      return;\\n    }\\n\\n    // Get the active funding cycle's configuration.\\n    _currentConfiguration = _eligibleOf(_projectId);\\n\\n    // If an eligible funding cycle does not exist, get a reference to the latest funding cycle configuration for the project.\\n    if (_currentConfiguration == 0)\\n      // Get the latest funding cycle's configuration.\\n      _currentConfiguration = latestConfigurationOf[_projectId];\\n\\n    if (!_isConfigurationApproved(_projectId, _currentConfiguration))\\n      // If it hasn't been approved, set the ID to be the based funding cycle,\\n      // which carries the last approved configuration.\\n      _currentConfiguration = _getStructFor(_projectId, _currentConfiguration).basedOn;\\n\\n    // Get the funding cycle for the configuration.\\n    JBFundingCycle memory _currentFundingCycle = _getStructFor(_projectId, _currentConfiguration);\\n\\n    // Make sure the funding cycle is recurring.\\n    require(_currentFundingCycle.discountRate < 1000000001, '0x1c: NON_RECURRING');\\n\\n    // Determine if the configurable funding cycle can only take effect on or after a certain date.\\n    // The ballot must have ended.\\n    uint256 _mustStartOnOrAfter = _getLatestTimeAfterBallotOf(_currentFundingCycle, _configuration);\\n\\n    // Initialize a funding cycle.\\n    _initFor(_projectId, _currentFundingCycle, _configuration, _mustStartOnOrAfter, _weight);\\n  }\\n\\n  /**\\n    @notice \\n    Initializes a funding cycle with the appropriate properties.\\n\\n    @param _projectId The ID of the project to which the funding cycle being initialized belongs.\\n    @param _baseFundingCycle The funding cycle to base the initialized one on.\\n    @param _configuration The configuration of the funding cycle being initialized.\\n    @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\n    @param _weight The weight to give the newly initialized funding cycle.\\n  */\\n  function _initFor(\\n    uint256 _projectId,\\n    JBFundingCycle memory _baseFundingCycle,\\n    uint256 _configuration,\\n    uint256 _mustStartOnOrAfter,\\n    uint256 _weight\\n  ) private {\\n    // If there is no base, initialize a first cycle.\\n    if (_baseFundingCycle.number == 0) {\\n      // The first number is 1.\\n      uint256 _number = 1;\\n\\n      // Set fresh intrinsic properties.\\n      _packAndStoreIntrinsicPropertiesOf(\\n        _configuration,\\n        _projectId,\\n        _number,\\n        _weight,\\n        _baseFundingCycle.configuration,\\n        block.timestamp\\n      );\\n    } else {\\n      // Update the intrinsic properties of the funding cycle being initialized.\\n      _updateAndStoreIntrinsicPropertiesOf(\\n        _configuration,\\n        _projectId,\\n        _baseFundingCycle,\\n        _mustStartOnOrAfter,\\n        _weight\\n      );\\n    }\\n\\n    // Set the project's latest funding cycle configuration.\\n    latestConfigurationOf[_projectId] = _configuration;\\n\\n    emit Init(_configuration, _projectId, _baseFundingCycle.configuration);\\n  }\\n\\n  /** \\n    @notice\\n    Updates and stores intrinsic properties for a funding cycle.\\n\\n    @param _configuration The configuration of the funding cycle being updated.\\n    @param _projectId The ID of the project whose funding cycle is being updated.\\n    @param _baseFundingCycle The cycle that the one being updated is based on.\\n    @param _mustStartOnOrAfter The time before which the new updated funding cycle can't start.\\n    @param _weight The weight to store along with a newly updated funding cycle.\\n  */\\n  function _updateAndStoreIntrinsicPropertiesOf(\\n    uint256 _configuration,\\n    uint256 _projectId,\\n    JBFundingCycle memory _baseFundingCycle,\\n    uint256 _mustStartOnOrAfter,\\n    uint256 _weight\\n  ) private {\\n    // Derive the correct next start time from the base.\\n    uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartOnOrAfter);\\n\\n    // A weight of 1 is treated as a weight of 0.\\n    _weight = _weight > 0\\n      ? (_weight == 1 ? 0 : _weight)\\n      : _deriveWeightFrom(_baseFundingCycle, _start);\\n\\n    // Derive the correct number.\\n    uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\\n\\n    // Update the intrinsic properties.\\n    _packAndStoreIntrinsicPropertiesOf(\\n      _configuration,\\n      _projectId,\\n      _number,\\n      _weight,\\n      _baseFundingCycle.configuration,\\n      _start\\n    );\\n  }\\n\\n  /**\\n    @notice \\n    Efficiently stores a funding cycle's provided intrinsic properties.\\n\\n    @param _configuration The configuration of the funding cycle to pack and store.\\n    @param _projectId The ID of the project to which the funding cycle belongs.\\n    @param _number The number of the funding cycle.\\n    @param _weight The weight of the funding cycle.\\n    @param _basedOn The configuration of the based funding cycle.\\n    @param _start The start time of this funding cycle.\\n  */\\n  function _packAndStoreIntrinsicPropertiesOf(\\n    uint256 _configuration,\\n    uint256 _projectId,\\n    uint256 _number,\\n    uint256 _weight,\\n    uint256 _basedOn,\\n    uint256 _start\\n  ) private {\\n    // weight in bytes 0-87.\\n    uint256 packed = _weight;\\n    // basedOn in bytes 88-143.\\n    packed |= _basedOn << 88;\\n    // start in bytes 144-199.\\n    packed |= _start << 144;\\n    // number in bytes 200-255.\\n    packed |= _number << 200;\\n\\n    // Set in storage.\\n    _packedIntrinsicPropertiesOf[_projectId][_configuration] = packed;\\n  }\\n\\n  /**\\n    @notice \\n    Efficiently stores a funding cycles provided user defined properties.\\n\\n    @param _configuration The configuration of the funding cycle to pack and store.\\n    @param _projectId The ID of the project to which the funding cycle being packed and stored belongs.\\n    @param _ballot The ballot to use for future reconfiguration approvals. \\n    @param _duration The duration of the funding cycle.\\n    @param _discountRate The discount rate of the base funding cycle.\\n  */\\n  function _packAndStoreUserPropertiesOf(\\n    uint256 _configuration,\\n    uint256 _projectId,\\n    IJBFundingCycleBallot _ballot,\\n    uint256 _duration,\\n    uint256 _discountRate\\n  ) private {\\n    // If all properties are zero, no need to store anything as the default value will have the same outcome.\\n    if (_ballot == IJBFundingCycleBallot(address(0)) && _duration == 0 && _discountRate == 0)\\n      return;\\n\\n    // ballot in bits 0-159 bytes.\\n    uint256 packed = uint160(address(_ballot));\\n    // duration in bits 160-223 bytes.\\n    packed |= _duration << 160;\\n    // discountRate in bits 224-255 bytes.\\n    packed |= _discountRate << 224;\\n\\n    // Set in storage.\\n    _packedUserPropertiesOf[_projectId][_configuration] = packed;\\n  }\\n\\n  /**\\n    @notice \\n    The project's stored funding cycle that hasn't yet started, if one exists.\\n\\n    @dev\\n    A value of 0 is returned if no funding cycle was found.\\n    \\n    @param _projectId The ID of a project to look through for a standby cycle.\\n\\n    @return configuration The configuration of the standby funding cycle.\\n  */\\n  function _standbyOf(uint256 _projectId) private view returns (uint256 configuration) {\\n    // Get a reference to the project's latest funding cycle.\\n    configuration = latestConfigurationOf[_projectId];\\n\\n    // If there isn't one, theres also no standby funding cycle.\\n    if (configuration == 0) return 0;\\n\\n    // Get the necessary properties for the latest funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration);\\n\\n    // There is no upcoming funding cycle if the latest funding cycle has already started.\\n    if (block.timestamp >= _fundingCycle.start) return 0;\\n  }\\n\\n  /**\\n    @notice \\n    The project's stored funding cycle that has started and hasn't yet expired.\\n    \\n    @dev\\n    A value of 0 is returned if no funding cycle was found.\\n\\n    @param _projectId The ID of the project to look through.\\n\\n    @return configuration The configuration of the active funding cycle.\\n  */\\n  function _eligibleOf(uint256 _projectId) private view returns (uint256 configuration) {\\n    // Get a reference to the project's latest funding cycle.\\n    configuration = latestConfigurationOf[_projectId];\\n\\n    // If there isn't one, theres also no eligible funding cycle.\\n    if (configuration == 0) return 0;\\n\\n    // Get the necessary properties for the latest funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration);\\n\\n    // If the latest is expired, return an empty funding cycle.\\n    // A duration of 0 can not be expired.\\n    if (\\n      _fundingCycle.duration > 0 && block.timestamp >= _fundingCycle.start + _fundingCycle.duration\\n    ) return 0;\\n\\n    // The base cant be expired.\\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\\n\\n    // If the current time is past the end of the base, return 0.\\n    // A duration of 0 is always eligible.\\n    if (\\n      _baseFundingCycle.duration > 0 &&\\n      block.timestamp >= _baseFundingCycle.start + _baseFundingCycle.duration\\n    ) return 0;\\n\\n    // Return the funding cycle immediately before the latest.\\n    configuration = _fundingCycle.basedOn;\\n  }\\n\\n  /** \\n    @notice \\n    A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration.\\n\\n    @dev\\n    Returns an empty funding cycle if there can't be a mock funding cycle based on the provided one.\\n\\n    @param _baseFundingCycle The funding cycle that the resulting funding cycle should follow.\\n    @param _allowMidCycle A flag indicating if the mocked funding cycle is allowed to already be mid cycle.\\n\\n    @return A mock of what the next funding cycle will be.\\n  */\\n  function _mockFundingCycleBasedOn(JBFundingCycle memory _baseFundingCycle, bool _allowMidCycle)\\n    private\\n    view\\n    returns (JBFundingCycle memory)\\n  {\\n    // Can't mock a non recurring funding cycle.\\n    if (_baseFundingCycle.discountRate == 1000000001) return _getStructFor(0, 0);\\n\\n    // The distance of the current time to the start of the next possible funding cycle.\\n    // If the returned mock cycle must not yet have started, the start time of the mock must be in the future so no need to adjust backwards.\\n    // If the base funding cycle doesn't have a duration, no adjustment is necessary because the next cycle can start immediately.\\n    uint256 _timeFromImmediateStartMultiple = !_allowMidCycle || _baseFundingCycle.duration == 0\\n      ? 0\\n      : _baseFundingCycle.duration;\\n\\n    // Derive what the start time should be.\\n    uint256 _start = _deriveStartFrom(\\n      _baseFundingCycle,\\n      block.timestamp - _timeFromImmediateStartMultiple\\n    );\\n\\n    // Derive what the number should be.\\n    uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\\n\\n    return\\n      JBFundingCycle(\\n        _number,\\n        _baseFundingCycle.configuration,\\n        _baseFundingCycle.basedOn,\\n        _start,\\n        _baseFundingCycle.duration,\\n        _deriveWeightFrom(_baseFundingCycle, _start),\\n        _baseFundingCycle.discountRate,\\n        _baseFundingCycle.ballot,\\n        _baseFundingCycle.metadata\\n      );\\n  }\\n\\n  /**\\n    @notice \\n    Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct.\\n\\n    @param _projectId The ID of the project to which the funding cycle belongs.\\n    @param _configuration The funding cycle configuration to get the full struct for.\\n\\n    @return fundingCycle The funding cycle struct.\\n  */\\n  function _getStructFor(uint256 _projectId, uint256 _configuration)\\n    private\\n    view\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // Return an empty funding cycle if the configuration specified is 0.\\n    if (_configuration == 0) return fundingCycle;\\n\\n    fundingCycle.configuration = _configuration;\\n\\n    uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_projectId][_configuration];\\n\\n    fundingCycle.weight = uint256(uint88(_packedIntrinsicProperties));\\n    fundingCycle.basedOn = uint256(uint56(_packedIntrinsicProperties >> 136));\\n    fundingCycle.start = uint256(uint56(_packedIntrinsicProperties >> 128));\\n    fundingCycle.number = uint256(uint56(_packedIntrinsicProperties >> 176));\\n\\n    uint256 _packedUserProperties = _packedUserPropertiesOf[_projectId][_configuration];\\n\\n    fundingCycle.ballot = IJBFundingCycleBallot(address(uint160(_packedUserProperties)));\\n    fundingCycle.duration = uint256(uint64(_packedUserProperties >> 208));\\n    fundingCycle.discountRate = uint256(uint32(_packedUserProperties >> 224));\\n\\n    fundingCycle.metadata = _metadataOf[_projectId][_configuration];\\n  }\\n\\n  /** \\n    @notice \\n    The date that is the nearest multiple of the specified funding cycle's duration from its end.\\n\\n    @param _baseFundingCycle The funding cycle to make the calculation for.\\n    @param _mustStartOnOrAfter A date that the derived start must be on or come after.\\n\\n    @return start The next start time.\\n  */\\n  function _deriveStartFrom(JBFundingCycle memory _baseFundingCycle, uint256 _mustStartOnOrAfter)\\n    private\\n    pure\\n    returns (uint256 start)\\n  {\\n    // A subsequent cycle to one with a duration of 0 should start as soon as possible.\\n    if (_baseFundingCycle.duration == 0) return _mustStartOnOrAfter;\\n\\n    // The time when the funding cycle immediately after the specified funding cycle starts.\\n    uint256 _nextImmediateStart = _baseFundingCycle.start + _baseFundingCycle.duration;\\n\\n    // If the next immediate start is now or in the future, return it.\\n    if (_nextImmediateStart >= _mustStartOnOrAfter) return _nextImmediateStart;\\n\\n    // The amount of seconds since the `_mustStartOnOrAfter` time that results in a start time that might satisfy the specified constraints.\\n    uint256 _timeFromImmediateStartMultiple = (_mustStartOnOrAfter - _nextImmediateStart) %\\n      _baseFundingCycle.duration;\\n\\n    // A reference to the first possible start timestamp.\\n    start = _mustStartOnOrAfter - _timeFromImmediateStartMultiple;\\n\\n    // Add increments of duration as necessary to satisfy the threshold.\\n    while (_mustStartOnOrAfter > start) start = start + _baseFundingCycle.duration;\\n  }\\n\\n  /** \\n    @notice \\n    The accumulated weight change since the specified funding cycle.\\n\\n    @param _baseFundingCycle The funding cycle to make the calculation with.\\n    @param _start The start time to derive a weight for.\\n\\n    @return weight The next weight.\\n  */\\n  function _deriveWeightFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\\n    private\\n    pure\\n    returns (uint256 weight)\\n  {\\n    // A subsequent cycle to one with a duration of 0 should have the next possible weight.\\n    if (_baseFundingCycle.duration == 0)\\n      return\\n        PRBMath.mulDiv(\\n          _baseFundingCycle.weight,\\n          1000000000 - _baseFundingCycle.discountRate,\\n          1000000000\\n        );\\n\\n    // The weight should be based off the base funding cycle's weight.\\n    weight = _baseFundingCycle.weight;\\n\\n    // If the discount is 0, the weight doesn't change.\\n    if (_baseFundingCycle.discountRate == 0) return weight;\\n\\n    // The difference between the start of the base funding cycle and the proposed start.\\n    uint256 _startDistance = _start - _baseFundingCycle.start;\\n\\n    // Apply the base funding cycle's discount rate for each cycle that has passed.\\n    uint256 _discountMultiple = _startDistance / _baseFundingCycle.duration;\\n\\n    for (uint256 i = 0; i < _discountMultiple; i++)\\n      // The number of times to apply the discount rate.\\n      // Base the new weight on the specified funding cycle's weight.\\n      weight = PRBMath.mulDiv(weight, 1000000000 - _baseFundingCycle.discountRate, 1000000000);\\n  }\\n\\n  /** \\n    @notice \\n    The number of the next funding cycle given the specified funding cycle.\\n\\n    @param _baseFundingCycle The funding cycle to make the calculation with.\\n    @param _start The start time to derive a number for.\\n\\n    @return The next number.\\n  */\\n  function _deriveNumberFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // A subsequent cycle to one with a duration of 0 should be the next number.\\n    if (_baseFundingCycle.duration == 0) return _baseFundingCycle.number + 1;\\n\\n    // The difference between the start of the base funding cycle and the proposed start.\\n    uint256 _startDistance = _start - _baseFundingCycle.start;\\n\\n    // Find the number of base cycles that fit in the start distance.\\n    return _baseFundingCycle.number + (_startDistance / _baseFundingCycle.duration);\\n  }\\n\\n  /** \\n    @notice \\n    Checks to see if the funding cycle of the provided configuration is approved according to the correct ballot.\\n\\n    @param _projectId The ID of the project to which the funding cycle belongs.\\n    @param _configuration The configuration of the funding cycle to get an approval flag for.\\n\\n    @return The approval flag.\\n  */\\n  function _isConfigurationApproved(uint256 _projectId, uint256 _configuration)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _configuration);\\n    return _isApproved(_projectId, _fundingCycle);\\n  }\\n\\n  /** \\n    @notice \\n    Checks to see if the provided funding cycle is approved according to the correct ballot.\\n\\n    @param _projectId The ID of the project to which the funding cycle belongs. \\n    @param _fundingCycle The funding cycle to get an approval flag for.\\n\\n    @return The approval flag.\\n  */\\n  function _isApproved(uint256 _projectId, JBFundingCycle memory _fundingCycle)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return\\n      _ballotStateOf(_projectId, _fundingCycle.configuration, _fundingCycle.basedOn) ==\\n      JBBallotState.Approved;\\n  }\\n\\n  /**\\n    @notice \\n    A funding cycle configuration's current status.\\n\\n    @param _projectId The ID of the project to which the funding cycle belongs.\\n    @param _configuration This differentiates reconfigurations onto the same upcoming funding cycle, which all would have the same ID but different configuration times.\\n    @param _ballotFundingCycleId The ID of the funding cycle which is configured with the ballot that should be used.\\n\\n    @return The funding cycle's configuration status.\\n  */\\n  function _ballotStateOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    uint256 _ballotFundingCycleId\\n  ) private view returns (JBBallotState) {\\n    // If there is no ballot funding cycle, implicitly approve.\\n    if (_ballotFundingCycleId == 0) return JBBallotState.Approved;\\n\\n    // Get the ballot funding cycle.\\n    JBFundingCycle memory _ballotFundingCycle = _getStructFor(_projectId, _ballotFundingCycleId);\\n\\n    // If there is no ballot, the ID is auto approved.\\n    // Otherwise, return the ballot's state.\\n    return\\n      _ballotFundingCycle.ballot == IJBFundingCycleBallot(address(0))\\n        ? JBBallotState.Approved\\n        : _ballotFundingCycle.ballot.stateOf(_configuration);\\n  }\\n\\n  /** \\n    @notice\\n    The time after the ballot of the provided funding cycle has expired.\\n\\n    @dev\\n    If the ballot ends in the past, the current block timestamp will be returned.\\n\\n    @param _fundingCycle The ID funding cycle to make the caluclation from.\\n    @param _from The time from which the ballot duration should be calculated.\\n\\n    @return The time when the ballot has officially ended.\\n  */\\n  function _getLatestTimeAfterBallotOf(JBFundingCycle memory _fundingCycle, uint256 _from)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // If the provided funding cycle has no ballot, return the current timestamp.\\n    if (_fundingCycle.ballot == IJBFundingCycleBallot(address(0))) return block.timestamp;\\n\\n    // Get a reference to the time the ballot ends.\\n    uint256 _ballotExpiration = _from + _fundingCycle.ballot.duration();\\n\\n    // If the ballot ends in past, return the current timestamp. Otherwise return the ballot's expiration.\\n    return block.timestamp > _ballotExpiration ? block.timestamp : _ballotExpiration;\\n  }\\n}\\n\",\"keccak256\":\"0x56fbcac008f3ad601e194e79bd24ce702b8737016f74a9f8cefc55379746da60\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBControllerUtility.sol';\\n\\n/** \\n  @notice\\n  Provides tools for contracts that has functionality that can only be accessed by a project's controller.\\n*/\\nabstract contract JBControllerUtility is IJBControllerUtility {\\n  modifier onlyController(uint256 _projectId) {\\n    require(address(directory.controllerOf(_projectId)) == msg.sender, '0x4f: UNAUTHORIZED');\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n  }\\n}\\n\",\"keccak256\":\"0xf756edf53b6d9810fcf76faeeecaa00da0caba904a36cba3468e4f13e6f6ec94\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function currencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e4385f3bc7b2c078211344a393f6f4c3256ee755d334c03e93d0483621bcfe3\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBControllerUtility {\\n  function directory() external view returns (IJBDirectory);\\n}\\n\",\"keccak256\":\"0xb280df3e7bd6abc2fb533073a806a9b3edfea8f5be2791c6eb1767c79dd98f88\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0xcc2fa4db1c2684f106e0353fad26b45fb0dc09027d3509d40d5e9fce84a07148\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x5ef8969ff2fc6c58e521f1f930e7fcf0330a421d1643d9e88ea2b30e137df553\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataCidOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0xa437875cce9e3e9da493b5109635a3f843a4de0ec08dfeedb68ad344bb14720f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xe2f62536c63548587b291b2c37fd474e835df9a2a5829c7c49a3d5d280c7a2c9\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  // A duration has a minimum of 1000 seconds to prevent extractive miner behavior, see https://ethereum.stackexchange.com/questions/413/can-a-contract-safely-rely-on-block-timestamp.\\n  uint256 duration;\\n  // A number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  // If the number is 1000000001, the funding cycle is non-recurrin so there cannot be a next cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x34ff85de4898979b20db9c968c538588cc7acde263afc81c0b29ac2dbd821d4c\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // A number from 0-1000000001 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  // If the number is 1000000001, an non-recurring funding cycle will get made.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x448584648a8baf62f56e0cc5a434c793d172453b969360f7fdb31e612b28eab4\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161189038038061189083398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c6117f761009960003960008181610189015261060401526117f76000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063669e48aa1161005b578063669e48aa1461015e578063753dd3e814610171578063c41c2f2414610184578063c55f571c146101d057600080fd5b80632cee6deb1461008257806343a266c2146100b55780635c5500781461014b575b600080fd5b6100a261009036600461152c565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100c86100c336600461152c565b6101f0565b6040516100ac9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08401511660e083015261010080840151818401525092915050565b6100c861015936600461152c565b6103ac565b6100c861016c3660046115bd565b6104e8565b6100c861017f36600461155e565b610557565b6101ab7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6101e36101de36600461152c565b610911565b6040516100ac91906115df565b61025560405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600082815260036020526040902054610279576102736000806109bf565b92915050565b600061028483610aeb565b90506102eb60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b811561031f576102fb84836109bf565b90506103078482610b9d565b15610313579392505050565b80604001519150610385565b600084815260036020526040902054915061033a84836109bf565b90508060c00151633b9aca01141561035f576103576000806109bf565b949350505050565b6103698482610b9d565b15806103785750806060015142105b1561038557806040015191505b81610395576103576000806109bf565b61039f84836109bf565b9050610357816001610bcc565b61041160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008281526003602052604090205461042f576102736000806109bf565b600061043a83610d1f565b905080156104535761044c83826109bf565b9392505050565b506000828152600360205260408120549061046e84836109bf565b9050806080015160001415610488576103576000806109bf565b8060c00151633b9aca0114156104a3576103576000806109bf565b6104ad8482610b9d565b156104bd57610357816000610bcc565b60408101519150816104d4576103576000806109bf565b6103576104e185846109bf565b6000610bcc565b61054d60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b61044c83836109bf565b6105bc60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018590528490339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e91906114d1565b73ffffffffffffffffffffffffffffffffffffffff1614610700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a4544000000000000000000000000000060448201526064015b60405180910390fd5b67ffffffffffffffff84351180159061071b57506103e88435115b610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307831353a204241445f4455524154494f4e000000000000000000000000000060448201526064016106f7565b633b9aca01846040013511156107f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831363a204241445f444953434f554e545f5241544500000000000000000060448201526064016106f7565b6affffffffffffffffffffff6020850135111561086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307831383a204241445f5745494748540000000000000000000000000000000060448201526064016106f7565b4261087c86826020880135610d63565b61089d81876108916080890160608a016114ee565b883560408a0135610ebf565b83156108c057600086815260026020908152604080832084845290915290208490555b85817fb3cca78774be425fb92ced2a164fb2b61030e23c3436363792f79788e5ad59c38787336040516108f593929190611620565b60405180910390a361090786826109bf565b9695505050505050565b60008181526003602052604081205480610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307831343a204e4f545f464f554e44000000000000000000000000000000000060448201526064016106f7565b600061099384836109bf565b90508060400151600014156109ac575060009392505050565b6103578482602001518360400151610f38565b610a2460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b81610a2e57610273565b602080820183905260008481526001825260408082208583528352808220546affffffffffffffffffffff811660a086015266ffffffffffffff608882901c811683870152608082811c8216606088015260b09290921c16855286835282845281832086845284528183205473ffffffffffffffffffffffffffffffffffffffff811660e08088019190915260d082901c92870192909252901c60c085015285825260028352808220858352909252205461010082015292915050565b60008181526003602052604090205480610b0757506000919050565b6000610b1383836109bf565b905060008160800151118015610b3c575080608001518160600151610b38919061167f565b4210155b15610b4a5750600092915050565b6000610b5a8483604001516109bf565b905060008160800151118015610b83575080608001518160600151610b7f919061167f565b4210155b15610b92575060009392505050565b506040015192915050565b600080610bb38484602001518560400151610f38565b6003811115610bc457610bc461176d565b149392505050565b610c3160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8260c00151633b9aca011415610c5357610c4c6000806109bf565b9050610273565b6000821580610c6457506080840151155b610c72578360800151610c75565b60005b90506000610c8c85610c8784426116ab565b61102b565b90506000610c9a86836110b8565b9050604051806101200160405280828152602001876020015181526020018760400151815260200183815260200187608001518152602001610cdc8885611104565b81526020018760c0015181526020018760e0015173ffffffffffffffffffffffffffffffffffffffff168152602001876101000151815250935050505092915050565b60008181526003602052604090205480610d3b57506000919050565b6000610d4783836109bf565b905080606001514210610d5d5750600092915050565b50919050565b600083815260036020526040902054610d9257610d8d83610d856000806109bf565b8442856111b5565b505050565b6000610d9d84610d1f565b90508015610ddd576000610dbe85610db587856109bf565b604001516109bf565b9050610dd6848683610dd08589611261565b87611330565b5050505050565b610de684610aeb565b905080610dfe57506000838152600360205260409020545b610e0884826113b3565b610e1d57610e1684826109bf565b6040015190505b6000610e2985836109bf565b9050633b9aca018160c0015110610e9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f307831633a204e4f4e5f524543555252494e470000000000000000000000000060448201526064016106f7565b6000610ea88286611261565b9050610eb786838784886111b5565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316158015610ee1575081155b8015610eeb575080155b15610ef557610dd6565b600084815260208181526040808320888452909152902060e082901b60a084901b73ffffffffffffffffffffffffffffffffffffffff8616171790555050505050565b600081610f475750600061044c565b6000610f5385846109bf565b60e081015190915073ffffffffffffffffffffffffffffffffffffffff161561101f5760e08101516040517f131a7e240000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063131a7e249060240160206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a919061150b565b611022565b60005b95945050505050565b6000826080015160001415611041575080610273565b600083608001518460600151611057919061167f565b9050828110611067579050610273565b608084015160009061107983866116ab565b61108391906116fb565b905061108f81856116ab565b92505b828411156110b05760808501516110a9908461167f565b9250611092565b505092915050565b60008260800151600014156110d4578251610c4c90600161167f565b60008360600151836110e691906116ab565b90508360800151816110f89190611697565b8451610357919061167f565b600082608001516000141561113957610c4c8360a001518460c00151633b9aca0061112f91906116ab565b633b9aca006113cc565b5060a082015160c083015161114d57610273565b600083606001518361115f91906116ab565b905060008460800151826111739190611697565b905060005b818110156111ac57611198848760c00151633b9aca0061112f91906116ab565b9350806111a4816116c2565b915050611178565b50505092915050565b835161120a5760208085015160008781526001808452604080832088845290945292902060589190911b83174260901b1779010000000000000000000000000000000000000000000000000017905550611217565b6112178386868585611330565b60008581526003602090815260408083208690559086015190519091879186917ff1bd4f3fcb4e0b193abc7e4002c0284e25086269a02de2e4c52045a91f64703791a45050505050565b60e082015160009073ffffffffffffffffffffffffffffffffffffffff1661128a575042610273565b60008360e0015173ffffffffffffffffffffffffffffffffffffffff16630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d657600080fd5b505afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190611545565b611318908461167f565b90508042116113275780610357565b50429392505050565b600061133c848461102b565b905060008211611355576113508482611104565b611366565b816001146113635781611366565b60005b9150600061137485836110b8565b60208087015160008981526001835260408082208c83529093529190912060589190911b8517609085901b1760c883901b179055905050505050505050565b6000806113c084846109bf565b90506103578482610b9d565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156114255783828161141b5761141b61173e565b049250505061044c565b838110611468576040517f773cc18c00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044016106f7565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000602082840312156114e357600080fd5b815161044c8161179c565b60006020828403121561150057600080fd5b813561044c8161179c565b60006020828403121561151d57600080fd5b81516004811061044c57600080fd5b60006020828403121561153e57600080fd5b5035919050565b60006020828403121561155757600080fd5b5051919050565b600080600083850360c081121561157457600080fd5b8435935060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820112156115a857600080fd5b5060208401915060a084013590509250925092565b600080604083850312156115d057600080fd5b50508035926020909101359150565b602081016004831061161a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b83358152602080850135908201526040808501359082015260c08101606085013561164a8161179c565b73ffffffffffffffffffffffffffffffffffffffff808216606085015285608085015280851660a08501525050949350505050565b600082198211156116925761169261170f565b500190565b6000826116a6576116a661173e565b500490565b6000828210156116bd576116bd61170f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116f4576116f461170f565b5060010190565b60008261170a5761170a61173e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146117be57600080fd5b5056fea2646970667358221220c66cfb90f818659f35445586e1b46fd0dd6b31f4612c162c3dc35008db7f1be364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063669e48aa1161005b578063669e48aa1461015e578063753dd3e814610171578063c41c2f2414610184578063c55f571c146101d057600080fd5b80632cee6deb1461008257806343a266c2146100b55780635c5500781461014b575b600080fd5b6100a261009036600461152c565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100c86100c336600461152c565b6101f0565b6040516100ac9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08401511660e083015261010080840151818401525092915050565b6100c861015936600461152c565b6103ac565b6100c861016c3660046115bd565b6104e8565b6100c861017f36600461155e565b610557565b6101ab7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6101e36101de36600461152c565b610911565b6040516100ac91906115df565b61025560405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600082815260036020526040902054610279576102736000806109bf565b92915050565b600061028483610aeb565b90506102eb60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b811561031f576102fb84836109bf565b90506103078482610b9d565b15610313579392505050565b80604001519150610385565b600084815260036020526040902054915061033a84836109bf565b90508060c00151633b9aca01141561035f576103576000806109bf565b949350505050565b6103698482610b9d565b15806103785750806060015142105b1561038557806040015191505b81610395576103576000806109bf565b61039f84836109bf565b9050610357816001610bcc565b61041160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008281526003602052604090205461042f576102736000806109bf565b600061043a83610d1f565b905080156104535761044c83826109bf565b9392505050565b506000828152600360205260408120549061046e84836109bf565b9050806080015160001415610488576103576000806109bf565b8060c00151633b9aca0114156104a3576103576000806109bf565b6104ad8482610b9d565b156104bd57610357816000610bcc565b60408101519150816104d4576103576000806109bf565b6103576104e185846109bf565b6000610bcc565b61054d60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b61044c83836109bf565b6105bc60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018590528490339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e91906114d1565b73ffffffffffffffffffffffffffffffffffffffff1614610700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307834663a20554e415554484f52495a4544000000000000000000000000000060448201526064015b60405180910390fd5b67ffffffffffffffff84351180159061071b57506103e88435115b610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307831353a204241445f4455524154494f4e000000000000000000000000000060448201526064016106f7565b633b9aca01846040013511156107f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f307831363a204241445f444953434f554e545f5241544500000000000000000060448201526064016106f7565b6affffffffffffffffffffff6020850135111561086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307831383a204241445f5745494748540000000000000000000000000000000060448201526064016106f7565b4261087c86826020880135610d63565b61089d81876108916080890160608a016114ee565b883560408a0135610ebf565b83156108c057600086815260026020908152604080832084845290915290208490555b85817fb3cca78774be425fb92ced2a164fb2b61030e23c3436363792f79788e5ad59c38787336040516108f593929190611620565b60405180910390a361090786826109bf565b9695505050505050565b60008181526003602052604081205480610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307831343a204e4f545f464f554e44000000000000000000000000000000000060448201526064016106f7565b600061099384836109bf565b90508060400151600014156109ac575060009392505050565b6103578482602001518360400151610f38565b610a2460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b81610a2e57610273565b602080820183905260008481526001825260408082208583528352808220546affffffffffffffffffffff811660a086015266ffffffffffffff608882901c811683870152608082811c8216606088015260b09290921c16855286835282845281832086845284528183205473ffffffffffffffffffffffffffffffffffffffff811660e08088019190915260d082901c92870192909252901c60c085015285825260028352808220858352909252205461010082015292915050565b60008181526003602052604090205480610b0757506000919050565b6000610b1383836109bf565b905060008160800151118015610b3c575080608001518160600151610b38919061167f565b4210155b15610b4a5750600092915050565b6000610b5a8483604001516109bf565b905060008160800151118015610b83575080608001518160600151610b7f919061167f565b4210155b15610b92575060009392505050565b506040015192915050565b600080610bb38484602001518560400151610f38565b6003811115610bc457610bc461176d565b149392505050565b610c3160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8260c00151633b9aca011415610c5357610c4c6000806109bf565b9050610273565b6000821580610c6457506080840151155b610c72578360800151610c75565b60005b90506000610c8c85610c8784426116ab565b61102b565b90506000610c9a86836110b8565b9050604051806101200160405280828152602001876020015181526020018760400151815260200183815260200187608001518152602001610cdc8885611104565b81526020018760c0015181526020018760e0015173ffffffffffffffffffffffffffffffffffffffff168152602001876101000151815250935050505092915050565b60008181526003602052604090205480610d3b57506000919050565b6000610d4783836109bf565b905080606001514210610d5d5750600092915050565b50919050565b600083815260036020526040902054610d9257610d8d83610d856000806109bf565b8442856111b5565b505050565b6000610d9d84610d1f565b90508015610ddd576000610dbe85610db587856109bf565b604001516109bf565b9050610dd6848683610dd08589611261565b87611330565b5050505050565b610de684610aeb565b905080610dfe57506000838152600360205260409020545b610e0884826113b3565b610e1d57610e1684826109bf565b6040015190505b6000610e2985836109bf565b9050633b9aca018160c0015110610e9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f307831633a204e4f4e5f524543555252494e470000000000000000000000000060448201526064016106f7565b6000610ea88286611261565b9050610eb786838784886111b5565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316158015610ee1575081155b8015610eeb575080155b15610ef557610dd6565b600084815260208181526040808320888452909152902060e082901b60a084901b73ffffffffffffffffffffffffffffffffffffffff8616171790555050505050565b600081610f475750600061044c565b6000610f5385846109bf565b60e081015190915073ffffffffffffffffffffffffffffffffffffffff161561101f5760e08101516040517f131a7e240000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063131a7e249060240160206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a919061150b565b611022565b60005b95945050505050565b6000826080015160001415611041575080610273565b600083608001518460600151611057919061167f565b9050828110611067579050610273565b608084015160009061107983866116ab565b61108391906116fb565b905061108f81856116ab565b92505b828411156110b05760808501516110a9908461167f565b9250611092565b505092915050565b60008260800151600014156110d4578251610c4c90600161167f565b60008360600151836110e691906116ab565b90508360800151816110f89190611697565b8451610357919061167f565b600082608001516000141561113957610c4c8360a001518460c00151633b9aca0061112f91906116ab565b633b9aca006113cc565b5060a082015160c083015161114d57610273565b600083606001518361115f91906116ab565b905060008460800151826111739190611697565b905060005b818110156111ac57611198848760c00151633b9aca0061112f91906116ab565b9350806111a4816116c2565b915050611178565b50505092915050565b835161120a5760208085015160008781526001808452604080832088845290945292902060589190911b83174260901b1779010000000000000000000000000000000000000000000000000017905550611217565b6112178386868585611330565b60008581526003602090815260408083208690559086015190519091879186917ff1bd4f3fcb4e0b193abc7e4002c0284e25086269a02de2e4c52045a91f64703791a45050505050565b60e082015160009073ffffffffffffffffffffffffffffffffffffffff1661128a575042610273565b60008360e0015173ffffffffffffffffffffffffffffffffffffffff16630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d657600080fd5b505afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190611545565b611318908461167f565b90508042116113275780610357565b50429392505050565b600061133c848461102b565b905060008211611355576113508482611104565b611366565b816001146113635781611366565b60005b9150600061137485836110b8565b60208087015160008981526001835260408082208c83529093529190912060589190911b8517609085901b1760c883901b179055905050505050505050565b6000806113c084846109bf565b90506103578482610b9d565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156114255783828161141b5761141b61173e565b049250505061044c565b838110611468576040517f773cc18c00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044016106f7565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000602082840312156114e357600080fd5b815161044c8161179c565b60006020828403121561150057600080fd5b813561044c8161179c565b60006020828403121561151d57600080fd5b81516004811061044c57600080fd5b60006020828403121561153e57600080fd5b5035919050565b60006020828403121561155757600080fd5b5051919050565b600080600083850360c081121561157457600080fd5b8435935060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820112156115a857600080fd5b5060208401915060a084013590509250925092565b600080604083850312156115d057600080fd5b50508035926020909101359150565b602081016004831061161a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b83358152602080850135908201526040808501359082015260c08101606085013561164a8161179c565b73ffffffffffffffffffffffffffffffffffffffff808216606085015285608085015280851660a08501525050949350505050565b600082198211156116925761169261170f565b500190565b6000826116a6576116a661173e565b500490565b6000828210156116bd576116bd61170f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116f4576116f461170f565b5060010190565b60008261170a5761170a61173e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146117be57600080fd5b5056fea2646970667358221220c66cfb90f818659f35445586e1b46fd0dd6b31f4612c162c3dc35008db7f1be364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "configureFor(uint256,(uint256,uint256,uint256,address),uint256)": {
        "details": "Only a project's current controller can configure its funding cycles._data.target The amount that the project wants to receive in each funding cycle. 18 decimals._data.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days.  Set to 0 for no expiry and to be able to reconfigure anytime._data.discountRate A number from 0-1000000000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 1000000001, an non-recurring funding cycle will get made._data.ballot The new ballot that will be used to approve subsequent reconfigurations.",
        "params": {
          "_data": "The funding cycle configuration.",
          "_metadata": "Data to associate with this funding cycle configuration.",
          "_projectId": "The ID of the project being configured."
        },
        "returns": {
          "_0": "The funding cycle that the configuration will take effect during."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project."
        }
      },
      "currentBallotStateOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to check the ballot state of."
        },
        "returns": {
          "_0": "The current ballot's state."
        }
      },
      "currentOf(uint256)": {
        "details": "Returns an empty funding cycle with all properties set to 0 if a current funding cycle of the project is not found.",
        "params": {
          "_projectId": "The ID of the project to get the current funding cycle of."
        },
        "returns": {
          "fundingCycle": "The current funding cycle."
        }
      },
      "get(uint256,uint256)": {
        "params": {
          "_configuration": "The configuration of the funding cycle to get.",
          "_projectId": "The ID of the project to which the funding cycle belongs."
        },
        "returns": {
          "fundingCycle": "The funding cycle."
        }
      },
      "queuedOf(uint256)": {
        "details": "Returns an empty funding cycle with all properties set to 0 if a queued funding cycle of the project is not found.",
        "params": {
          "_projectId": "The ID of the project to get the queued funding cycle of."
        },
        "returns": {
          "_0": "_fundingCycle The queued funding cycle."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "configureFor(uint256,(uint256,uint256,uint256,address),uint256)": {
        "notice": " Configures the next eligible funding cycle for the specified project."
      },
      "currentBallotStateOf(uint256)": {
        "notice": " The current ballot state of the project."
      },
      "currentOf(uint256)": {
        "notice": " The funding cycle that is currently active for the specified project."
      },
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "get(uint256,uint256)": {
        "notice": " Get the funding cycle with the given configuration for the specified project."
      },
      "latestConfigurationOf(uint256)": {
        "notice": " The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of."
      },
      "queuedOf(uint256)": {
        "notice": " The funding cycle that's next up for the specified project."
      }
    },
    "notice": " Manages funding cycle scheduling.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19991,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_packedUserPropertiesOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 19998,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_packedIntrinsicPropertiesOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 20005,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_metadataOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 20011,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "latestConfigurationOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
