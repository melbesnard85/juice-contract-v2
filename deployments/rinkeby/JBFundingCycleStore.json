{
  "address": "0x9b8F3F633f8A1A4A1248AdefCd633fCa0EC5C22e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configured",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFundingCycleData",
          "name": "data",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Configure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "basedOn",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTappedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_metadata",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "configureFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentBallotStateOf",
      "outputs": [
        {
          "internalType": "enum JBBallotState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "latestIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "queuedOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "tapFrom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6aedbb30afc03a33a4dc3365b73379eab340f442ea78c007d874e8083735028",
  "receipt": {
    "to": null,
    "from": "0x568Fb3Ea8EE0d15dfbcf63784ebb2795801c5Fb7",
    "contractAddress": "0x9b8F3F633f8A1A4A1248AdefCd633fCa0EC5C22e",
    "transactionIndex": 1,
    "gasUsed": "1963292",
    "logsBloom": "0x
    "blockHash": "0x8f55c883440d47a2a8491c1455262570a58a6c20614a71f77dbc4a715fe4b5cf",
    "transactionHash": "0xc6aedbb30afc03a33a4dc3365b73379eab340f442ea78c007d874e8083735028",
    "logs": [],
    "blockNumber": 9568051,
    "cumulativeGasUsed": "2106513",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78CDd6fACE27d184634E17a85C9F6B43902EF5E4"
  ],
  "solcInputHash": "12ce77e8870d3973a4bc817761b50cf5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBFundingCycleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTappedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_metadata\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"configureFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentBallotStateOf\",\"outputs\":[{\"internalType\":\"enum JBBallotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"queuedOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tapFrom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"configureFor(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256)\":{\"details\":\"Only a project's current controller can configure its funding cycles._data.target The amount that the project wants to receive in each funding cycle. 18 decimals._data.currency The currency of the `_target`. Send 0 for ETH or 1 for USD._data.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days.  Set to 0 for no expiry and to be able to reconfigure anytime._data.discountRate A number from 0-10000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 9000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 10001, an non-recurring funding cycle will get made._data.ballot The new ballot that will be used to approve subsequent reconfigurations.\",\"params\":{\"_data\":\"The funding cycle configuration.\",\"_fee\":\"The fee that this configuration incurs when tapping.\",\"_metadata\":\"Data to associate with this funding cycle configuration.\",\"_projectId\":\"The ID of the project being configured.\"},\"returns\":{\"_0\":\"The funding cycle that the configuration will take effect during.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\"}},\"currentBallotStateOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to check the ballot state of.\"},\"returns\":{\"_0\":\"The current ballot's state.\"}},\"currentOf(uint256)\":{\"details\":\"Returns an empty funding cycle with an ID of 0 if a current funding cycle of the project is not found. This runs very similar logic to `_tappableOf`.\",\"params\":{\"_projectId\":\"The ID of the project to get the current funding cycle of.\"},\"returns\":{\"fundingCycle\":\"The current funding cycle.\"}},\"get(uint256)\":{\"params\":{\"_fundingCycleId\":\"The ID of the funding cycle to get.\"},\"returns\":{\"fundingCycle\":\"The funding cycle.\"}},\"queuedOf(uint256)\":{\"details\":\"Returns an empty funding cycle with an ID of 0 if a queued funding cycle of the project is not found. This runs roughly similar logic to `_configurableOf`.\",\"params\":{\"_projectId\":\"The ID of the project to get the queued funding cycle of.\"},\"returns\":{\"_0\":\"_fundingCycle The queued funding cycle.\"}},\"tapFrom(uint256,uint256)\":{\"details\":\"Only a project's current controller can tap funds for its funding cycles.\",\"params\":{\"_amount\":\"The amount being tapped.\",\"_projectId\":\"The ID of the project being tapped.\"},\"returns\":{\"_0\":\"The tapped funding cycle.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"configureFor(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256)\":{\"notice\":\" Configures the next eligible funding cycle for the specified project.\"},\"currentBallotStateOf(uint256)\":{\"notice\":\" The currency ballot state of the project.\"},\"currentOf(uint256)\":{\"notice\":\" The funding cycle that is currently active for the specified project.\"},\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"get(uint256)\":{\"notice\":\" Get the funding cycle with the given ID.\"},\"latestIdOf(uint256)\":{\"notice\":\" The ID of the latest funding cycle for each project. _projectId The ID of the project to get the latest funding cycle ID of.\"},\"queuedOf(uint256)\":{\"notice\":\" The funding cycle that's next up for the specified project.\"},\"tapFrom(uint256,uint256)\":{\"notice\":\" Tap funds from a project's currently tappable funding cycle.\"}},\"notice\":\" Manages funding cycle configurations, accounting, and scheduling.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBFundingCycleStore.sol\":\"JBFundingCycleStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"contracts/v2/JBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBFundingCycleStore.sol';\\nimport './abstract/JBControllerUtility.sol';\\n\\n/** \\n  @notice \\n  Manages funding cycle configurations, accounting, and scheduling.\\n*/\\ncontract JBFundingCycleStore is JBControllerUtility, IJBFundingCycleStore {\\n  //*********************************************************************//\\n  // --------------------- private stored constants -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The number of seconds in a day.\\n  */\\n  uint256 private constant _SECONDS_IN_DAY = 86400;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Stores the reconfiguration properties of each funding cycle, packed into one storage slot.\\n\\n    _projectId The ID of the project to get configuration properties of.\\n  */\\n  mapping(uint256 => uint256) private _packedConfigurationPropertiesOf;\\n\\n  /** \\n    @notice\\n    Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot.\\n    \\n    _projectId The ID of the project to get instrinsic properties of.\\n  */\\n  mapping(uint256 => uint256) private _packedIntrinsicPropertiesOf;\\n\\n  /** \\n    @notice\\n    Stores the metadata for each funding cycle, packed into one storage slot.\\n\\n    _projectId The ID of the project to get the`_metadataOf`.\\n  */\\n  mapping(uint256 => uint256) private _metadataOf;\\n\\n  /** \\n    @notice\\n    Stores the amount that each funding cycle can tap funding cycle.\\n\\n    _projectId The ID of the project to get the target of.\\n  */\\n  mapping(uint256 => uint256) private _targetOf;\\n\\n  /** \\n    @notice\\n    Stores the amount that has been tapped within each funding cycle.\\n\\n    _projectId The ID of the project to get the tapped amount of.\\n  */\\n  mapping(uint256 => uint256) private _tappedAmountOf;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The ID of the latest funding cycle for each project.\\n\\n    _projectId The ID of the project to get the latest funding cycle ID of.\\n  */\\n  mapping(uint256 => uint256) public override latestIdOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Get the funding cycle with the given ID.\\n\\n    @param _fundingCycleId The ID of the funding cycle to get.\\n\\n    @return fundingCycle The funding cycle.\\n  */\\n  function get(uint256 _fundingCycleId)\\n    external\\n    view\\n    override\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // The funding cycle should exist.\\n    require(_fundingCycleId > 0, '0x13 BAD_ID');\\n\\n    // See if there's stored info for the provided ID.\\n    fundingCycle = _getStructFor(_fundingCycleId);\\n\\n    // If so, return it.\\n    if (fundingCycle.number > 0) return fundingCycle;\\n\\n    // Get the current funding cycle. It might exist but not yet have been stored.\\n    fundingCycle = currentOf(_fundingCycleId);\\n\\n    // If the IDs match, return it.\\n    if (fundingCycle.id == _fundingCycleId) return fundingCycle;\\n\\n    // Get the queued funding cycle. It might exist but not yet have been stored.\\n    fundingCycle = queuedOf(_fundingCycleId);\\n\\n    // If the IDs match, return it.\\n    if (fundingCycle.id == _fundingCycleId) return fundingCycle;\\n\\n    // Return an empty Funding Cycle.\\n    return _getStructFor(0);\\n  }\\n\\n  /**\\n    @notice \\n    The funding cycle that's next up for the specified project.\\n\\n    @dev\\n    Returns an empty funding cycle with an ID of 0 if a queued funding cycle of the project is not found.\\n\\n    @dev \\n    This runs roughly similar logic to `_configurableOf`.\\n\\n    @param _projectId The ID of the project to get the queued funding cycle of.\\n\\n    @return _fundingCycle The queued funding cycle.\\n  */\\n  function queuedOf(uint256 _projectId) public view override returns (JBFundingCycle memory) {\\n    // The project must have funding cycles.\\n    if (latestIdOf[_projectId] == 0) return _getStructFor(0);\\n\\n    // Get a reference to the standby funding cycle.\\n    uint256 _fundingCycleId = _standbyOf(_projectId);\\n\\n    // If it exists, return it.\\n    if (_fundingCycleId > 0) return _getStructFor(_fundingCycleId);\\n\\n    // Get a reference to the latest stored funding cycle for the project.\\n    _fundingCycleId = latestIdOf[_projectId];\\n\\n    // Get the necessary properties for the standby funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_fundingCycleId);\\n\\n    // There's no queued if the current has a duration of 0.\\n    if (_fundingCycle.duration == 0) return _getStructFor(0);\\n\\n    // Check to see if the correct ballot is approved for this funding cycle.\\n    // If so, return a funding cycle based on it.\\n    if (_isApproved(_fundingCycle)) return _mockFundingCycleBasedOn(_fundingCycle, false);\\n\\n    // If it hasn't been approved, set the ID to be its base funding cycle, which carries the last approved configuration.\\n    _fundingCycleId = _fundingCycle.basedOn;\\n\\n    // A funding cycle must exist.\\n    if (_fundingCycleId == 0) return _getStructFor(0);\\n\\n    // Return a mock of what its second next up funding cycle would be.\\n    // Use second next because the next would be a mock of the current funding cycle.\\n    return _mockFundingCycleBasedOn(_getStructFor(_fundingCycleId), false);\\n  }\\n\\n  /**\\n    @notice \\n    The funding cycle that is currently active for the specified project.\\n\\n    @dev\\n    Returns an empty funding cycle with an ID of 0 if a current funding cycle of the project is not found.\\n\\n    @dev \\n    This runs very similar logic to `_tappableOf`.\\n\\n    @param _projectId The ID of the project to get the current funding cycle of.\\n\\n    @return fundingCycle The current funding cycle.\\n  */\\n  function currentOf(uint256 _projectId)\\n    public\\n    view\\n    override\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // The project must have funding cycles.\\n    if (latestIdOf[_projectId] == 0) return _getStructFor(0);\\n\\n    // Check for an eligible funding cycle.\\n    uint256 _fundingCycleId = _eligibleOf(_projectId);\\n\\n    // If no active funding cycle is found, check if there is a standby funding cycle.\\n    // If one exists, it will become active one it has been tapped.\\n    if (_fundingCycleId == 0) _fundingCycleId = _standbyOf(_projectId);\\n\\n    // Keep a reference to the eligible funding cycle.\\n    JBFundingCycle memory _fundingCycle;\\n\\n    // If a standby funding cycle exists...\\n    if (_fundingCycleId > 0) {\\n      // Get the necessary properties for the standby funding cycle.\\n      _fundingCycle = _getStructFor(_fundingCycleId);\\n\\n      // Check to see if the correct ballot is approved for this funding cycle, and that it has started.\\n      if (_fundingCycle.start <= block.timestamp && _isApproved(_fundingCycle))\\n        return _fundingCycle;\\n\\n      // If it hasn't been approved, set the ID to be the based funding cycle,\\n      // which carries the last approved configuration.\\n      _fundingCycleId = _fundingCycle.basedOn;\\n    } else {\\n      // No upcoming funding cycle found that is eligible to become active,\\n      // so us the ID of the latest active funding cycle, which carries the last configuration.\\n      _fundingCycleId = latestIdOf[_projectId];\\n\\n      // Get the funding cycle for the latest ID.\\n      _fundingCycle = _getStructFor(_fundingCycleId);\\n\\n      // If it's not approved, get a reference to the funding cycle that the latest is based on, which has the latest approved configuration.\\n      if (!_isApproved(_fundingCycle)) _fundingCycleId = _fundingCycle.basedOn;\\n    }\\n\\n    // The funding cycle cant be 0.\\n    if (_fundingCycleId == 0) return _getStructFor(0);\\n\\n    // The funding cycle to base a current one on.\\n    _fundingCycle = _getStructFor(_fundingCycleId);\\n\\n    // Return a mock of what the next funding cycle would be like,\\n    // which would become active once it has been tapped.\\n    return _mockFundingCycleBasedOn(_fundingCycle, true);\\n  }\\n\\n  /** \\n    @notice \\n    The currency ballot state of the project.\\n\\n    @param _projectId The ID of the project to check the ballot state of.\\n\\n    @return The current ballot's state.\\n  */\\n  function currentBallotStateOf(uint256 _projectId) external view override returns (JBBallotState) {\\n    // Get a reference to the latest funding cycle ID.\\n    uint256 _fundingCycleId = latestIdOf[_projectId];\\n\\n    // The project must have funding cycles.\\n    require(_fundingCycleId > 0, '0x14: NOT_FOUND');\\n\\n    // Get the necessary properties for the latest funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_fundingCycleId);\\n\\n    // If the latest funding cycle is the first, or if it has already started, it must be approved.\\n    if (_fundingCycle.basedOn == 0) return JBBallotState.Approved;\\n\\n    return _ballotStateOf(_fundingCycleId, _fundingCycle.configured, _fundingCycle.basedOn);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) JBControllerUtility(_directory) {}\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Configures the next eligible funding cycle for the specified project.\\n\\n    @dev\\n    Only a project's current controller can configure its funding cycles.\\n\\n    @param _projectId The ID of the project being configured.\\n    @param _data The funding cycle configuration.\\n      @dev _data.target The amount that the project wants to receive in each funding cycle. 18 decimals.\\n      @dev _data.currency The currency of the `_target`. Send 0 for ETH or 1 for USD.\\n      @dev _data.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days. \\n        Set to 0 for no expiry and to be able to reconfigure anytime.\\n      @dev _data.discountRate A number from 0-10000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n        If it's 0, each funding cycle will have equal weight.\\n        If the number is 9000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n        If the number is 10001, an non-recurring funding cycle will get made.\\n      @dev _data.ballot The new ballot that will be used to approve subsequent reconfigurations.\\n    @param _metadata Data to associate with this funding cycle configuration.\\n    @param _fee The fee that this configuration incurs when tapping.\\n\\n    @return The funding cycle that the configuration will take effect during.\\n  */\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _fee\\n  ) external override onlyController(_projectId) returns (JBFundingCycle memory) {\\n    // Duration must fit in a uint16.\\n    require(_data.duration <= type(uint16).max, '0x15: BAD_DURATION');\\n\\n    // Discount rate token must be less than or equal to 100%. A value of 10001 means non-recurring.\\n    require(_data.discountRate <= 10001, '0x16: BAD_DISCOUNT_RATE');\\n\\n    // Currency must fit into a uint8.\\n    require(_data.currency <= type(uint8).max, '0x17: BAD_CURRENCY');\\n\\n    // Weight must fit into a uint8.\\n    require(_data.weight <= type(uint80).max, '0x18: BAD_WEIGHT');\\n\\n    // Fee must be less than or equal to 100%.\\n    require(_fee <= 200, '0x19: BAD_FEE');\\n\\n    // Set the configuration timestamp is now.\\n    uint256 _configured = block.timestamp;\\n\\n    // Gets the ID of the funding cycle to reconfigure.\\n    uint256 _fundingCycleId = _configurableOf(_projectId, _configured, _data.weight);\\n\\n    // Store the configuration.\\n    _packAndStoreConfigurationPropertiesOf(\\n      _fundingCycleId,\\n      _configured,\\n      _data.ballot,\\n      _data.duration,\\n      _data.currency,\\n      _fee,\\n      _data.discountRate\\n    );\\n\\n    // Set the target amount.\\n    _targetOf[_fundingCycleId] = _data.target;\\n\\n    // Set the metadata.\\n    _metadataOf[_fundingCycleId] = _metadata;\\n\\n    emit Configure(_fundingCycleId, _projectId, _configured, _data, _metadata, msg.sender);\\n\\n    return _getStructFor(_fundingCycleId);\\n  }\\n\\n  /** \\n    @notice \\n    Tap funds from a project's currently tappable funding cycle.\\n\\n    @dev\\n    Only a project's current controller can tap funds for its funding cycles.\\n\\n    @param _projectId The ID of the project being tapped.\\n    @param _amount The amount being tapped.\\n\\n    @return The tapped funding cycle.\\n  */\\n  function tapFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    override\\n    onlyController(_projectId)\\n    returns (JBFundingCycle memory)\\n  {\\n    // Amount must be positive.\\n    require(_amount > 0, '0x1a: INSUFFICIENT_FUNDS');\\n\\n    // Get a reference to the funding cycle being tapped.\\n    uint256 _fundingCycleId = _tappableOf(_projectId);\\n\\n    // The new amount that has been tapped.\\n    uint256 _newTappedAmount = _tappedAmountOf[_fundingCycleId] + _amount;\\n\\n    // Amount must be within what is still tappable.\\n    require(_newTappedAmount <= _targetOf[_fundingCycleId], '0x1b: INSUFFICIENT_FUNDS');\\n\\n    // Store the new amount.\\n    _tappedAmountOf[_fundingCycleId] = _newTappedAmount;\\n\\n    emit Tap(_fundingCycleId, _projectId, _amount, _newTappedAmount, msg.sender);\\n\\n    return _getStructFor(_fundingCycleId);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Returns the configurable funding cycle for this project if it exists, otherwise creates one.\\n\\n    @param _projectId The ID of the project to find a configurable funding cycle for.\\n    @param _configured The time at which the configuration is occurring.\\n    @param _weight The weight to store along with a newly created configurable funding cycle.\\n\\n    @return fundingCycleId The ID of the configurable funding cycle.\\n  */\\n  function _configurableOf(\\n    uint256 _projectId,\\n    uint256 _configured,\\n    uint256 _weight\\n  ) private returns (uint256 fundingCycleId) {\\n    // If there's not yet a funding cycle for the project, return the ID of a newly created one.\\n    if (latestIdOf[_projectId] == 0)\\n      return _initFor(_projectId, _getStructFor(0), block.timestamp, _weight);\\n\\n    // Get the standby funding cycle's ID.\\n    fundingCycleId = _standbyOf(_projectId);\\n\\n    // If it exists, make sure its updated, then return it.\\n    if (fundingCycleId > 0) {\\n      // Get the funding cycle that the specified one is based on.\\n      JBFundingCycle memory _baseFundingCycle = _getStructFor(\\n        _getStructFor(fundingCycleId).basedOn\\n      );\\n\\n      // The base's ballot must have ended.\\n      _updateFundingCycleBasedOn(\\n        _baseFundingCycle,\\n        _getLatestTimeAfterBallotOf(_baseFundingCycle, _configured),\\n        _weight\\n      );\\n      return fundingCycleId;\\n    }\\n\\n    // Get the active funding cycle's ID.\\n    fundingCycleId = _eligibleOf(_projectId);\\n\\n    // If the ID of an eligible funding cycle exists, it's approved, and active funding cycles are configurable, return it.\\n    if (fundingCycleId > 0) {\\n      if (!_isIdApproved(fundingCycleId)) {\\n        // If it hasn't been approved, set the ID to be the based funding cycle,\\n        // which carries the last approved configuration.\\n        fundingCycleId = _getStructFor(fundingCycleId).basedOn;\\n      }\\n    } else {\\n      // Get the ID of the latest funding cycle which has the latest reconfiguration.\\n      fundingCycleId = latestIdOf[_projectId];\\n\\n      // If it hasn't been approved, set the ID to be the based funding cycle,\\n      // which carries the last approved configuration.\\n      if (!_isIdApproved(fundingCycleId)) fundingCycleId = _getStructFor(fundingCycleId).basedOn;\\n    }\\n\\n    // Base off of the active funding cycle if it exists.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(fundingCycleId);\\n\\n    // Make sure the funding cycle is recurring.\\n    require(_fundingCycle.discountRate < 10001, '0x1c: NON_RECURRING');\\n\\n    // Determine if the configurable funding cycle can only take effect on or after a certain date.\\n    uint256 _mustStartOnOrAfter;\\n\\n    // The ballot must have ended.\\n    _mustStartOnOrAfter = _getLatestTimeAfterBallotOf(_fundingCycle, _configured);\\n\\n    // Return the newly initialized configurable funding cycle.\\n    // No need to copy since a new configuration is going to be applied.\\n    fundingCycleId = _initFor(_projectId, _fundingCycle, _mustStartOnOrAfter, _weight);\\n  }\\n\\n  /**\\n    @notice \\n    Returns the funding cycle that can be tapped at the time of the call.\\n\\n    @param _projectId The ID of the project to find a tappable funding cycle for.\\n\\n    @return fundingCycleId The ID of the tappable funding cycle.\\n  */\\n  function _tappableOf(uint256 _projectId) private returns (uint256 fundingCycleId) {\\n    // Check for the ID of an eligible funding cycle.\\n    fundingCycleId = _eligibleOf(_projectId);\\n\\n    // No eligible funding cycle found, check for the ID of a standby funding cycle.\\n    // If this one exists, it will become eligible one it has started.\\n    if (fundingCycleId == 0) fundingCycleId = _standbyOf(_projectId);\\n\\n    // Keep a reference to the funding cycle eligible for being tappable.\\n    JBFundingCycle memory _fundingCycle;\\n\\n    // If the ID of an eligible funding cycle exists,\\n    // check to see if it has been approved by the based funding cycle's ballot.\\n    if (fundingCycleId > 0) {\\n      // Get the necessary properties for the funding cycle.\\n      _fundingCycle = _getStructFor(fundingCycleId);\\n\\n      // Check to see if the cycle is approved. If so, return it.\\n      if (_fundingCycle.start <= block.timestamp && _isApproved(_fundingCycle))\\n        return fundingCycleId;\\n\\n      // If it hasn't been approved, set the ID to be the base funding cycle,\\n      // which carries the last approved configuration.\\n      fundingCycleId = _fundingCycle.basedOn;\\n    } else {\\n      // No upcoming funding cycle found that is eligible to become active, clone the latest active funding cycle.\\n      // which carries the last configuration.\\n      fundingCycleId = latestIdOf[_projectId];\\n\\n      // Get the funding cycle for the latest ID.\\n      _fundingCycle = _getStructFor(fundingCycleId);\\n\\n      // If it's not approved, get a reference to the funding cycle that the latest is based on, which has the latest approved configuration.\\n      if (!_isApproved(_fundingCycle)) fundingCycleId = _fundingCycle.basedOn;\\n    }\\n\\n    // The funding cycle cant be 0.\\n    require(fundingCycleId > 0, '0x1d: NOT_FOUND');\\n\\n    // Set the eligible funding cycle.\\n    _fundingCycle = _getStructFor(fundingCycleId);\\n\\n    // Funding cycles with a discount rate of 100% are non-recurring.\\n    require(_fundingCycle.discountRate < 10001, '0x1e: NON_RECURRING');\\n\\n    // The time when the funding cycle immediately after the eligible funding cycle starts.\\n    uint256 _nextImmediateStart = _fundingCycle.start + (_fundingCycle.duration * _SECONDS_IN_DAY);\\n\\n    // The distance from now until the nearest past multiple of the cycle duration from its start.\\n    // A duration of zero means the reconfiguration can start right away.\\n    uint256 _timeFromImmediateStartMultiple = _fundingCycle.duration == 0\\n      ? 0\\n      : (block.timestamp - _nextImmediateStart) % (_fundingCycle.duration * _SECONDS_IN_DAY);\\n\\n    // Return the tappable funding cycle.\\n    fundingCycleId = _initFor(\\n      _projectId,\\n      _fundingCycle,\\n      block.timestamp - _timeFromImmediateStartMultiple,\\n      0\\n    );\\n\\n    // Copy the properties of the base funding cycle onto the new configuration efficiently.\\n    _packAndStoreConfigurationPropertiesOf(\\n      fundingCycleId,\\n      _fundingCycle.configured,\\n      _fundingCycle.ballot,\\n      _fundingCycle.duration,\\n      _fundingCycle.currency,\\n      _fundingCycle.fee,\\n      _fundingCycle.discountRate\\n    );\\n\\n    _metadataOf[fundingCycleId] = _metadataOf[_fundingCycle.id];\\n    _targetOf[fundingCycleId] = _targetOf[_fundingCycle.id];\\n  }\\n\\n  /**\\n    @notice \\n    Initializes a funding cycle with the appropriate properties.\\n\\n    @param _projectId The ID of the project to which the funding cycle being initialized belongs.\\n    @param _baseFundingCycle The funding cycle to base the initialized one on.\\n    @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\n\\n    @return newFundingCycleId The ID of the initialized funding cycle.\\n  */\\n  function _initFor(\\n    uint256 _projectId,\\n    JBFundingCycle memory _baseFundingCycle,\\n    uint256 _mustStartOnOrAfter,\\n    uint256 _weight\\n  ) private returns (uint256 newFundingCycleId) {\\n    // If there is no base, initialize a first cycle.\\n    if (_baseFundingCycle.id == 0) {\\n      // The first number is 1.\\n      uint256 _number = 1;\\n\\n      // Get the formatted ID.\\n      newFundingCycleId = _idFor(_projectId, _number);\\n\\n      // Set fresh intrinsic properties.\\n      _packAndStoreIntrinsicPropertiesOf(\\n        _projectId,\\n        _number,\\n        _weight,\\n        _baseFundingCycle.id,\\n        block.timestamp\\n      );\\n    } else {\\n      // Update the intrinsic properties of the funding cycle being initialized.\\n      newFundingCycleId = _updateFundingCycleBasedOn(\\n        _baseFundingCycle,\\n        _mustStartOnOrAfter,\\n        _weight\\n      );\\n    }\\n\\n    // Set the project's latest funding cycle ID to the new count.\\n    latestIdOf[_projectId] = newFundingCycleId;\\n\\n    emit Init(newFundingCycleId, _projectId, _baseFundingCycle.id);\\n  }\\n\\n  /** \\n    @notice\\n    Updates intrinsic properties for a funding cycle given a base cycle.\\n\\n    @param _baseFundingCycle The cycle that the one being updated is based on.\\n    @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\n    @param _weight The weight to store along with a newly updated configurable funding cycle.\\n\\n    @return fundingCycleId The ID of the funding cycle that was updated.\\n  */\\n  function _updateFundingCycleBasedOn(\\n    JBFundingCycle memory _baseFundingCycle,\\n    uint256 _mustStartOnOrAfter,\\n    uint256 _weight\\n  ) private returns (uint256 fundingCycleId) {\\n    // Derive the correct next start time from the base.\\n    uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartOnOrAfter);\\n\\n    // A weight of 1 is treated as a weight of 0.\\n    _weight = _weight > 0\\n      ? (_weight == 1 ? 0 : _weight)\\n      : _deriveWeightFrom(_baseFundingCycle, _start);\\n\\n    // Derive the correct number.\\n    uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\\n\\n    // Update the intrinsic properties.\\n    fundingCycleId = _packAndStoreIntrinsicPropertiesOf(\\n      _baseFundingCycle.projectId,\\n      _number,\\n      _weight,\\n      _baseFundingCycle.id,\\n      _start\\n    );\\n  }\\n\\n  /**\\n    @notice \\n    Efficiently stores a funding cycle's provided intrinsic properties.\\n\\n    @param _projectId The ID of the project to which the funding cycle belongs.\\n    @param _number The number of the funding cycle.\\n    @param _weight The weight of the funding cycle.\\n    @param _basedOn The ID of the based funding cycle.\\n    @param _start The start time of this funding cycle.\\n\\n    @return fundingCycleId The ID of the funding cycle that was updated.\\n  */\\n  function _packAndStoreIntrinsicPropertiesOf(\\n    uint256 _projectId,\\n    uint256 _number,\\n    uint256 _weight,\\n    uint256 _basedOn,\\n    uint256 _start\\n  ) private returns (uint256 fundingCycleId) {\\n    // weight in bytes 0-79 bytes.\\n    uint256 packed = _weight;\\n    // projectId in bytes 80-135 bytes.\\n    packed |= _projectId << 80;\\n    // basedOn in bytes 136-183 bytes.\\n    packed |= _basedOn << 136;\\n    // start in bytes 184-231 bytes.\\n    packed |= _start << 184;\\n    // number in bytes 232-255 bytes.\\n    packed |= _number << 232;\\n\\n    // Construct the ID.\\n    fundingCycleId = _idFor(_projectId, _number);\\n\\n    // Set in storage.\\n    _packedIntrinsicPropertiesOf[fundingCycleId] = packed;\\n  }\\n\\n  /**\\n    @notice \\n    Efficiently stores a funding cycles provided configuration properties.\\n\\n    @param _fundingCycleId The ID of the funding cycle to pack and store.\\n    @param _configured The timestamp of the configuration.\\n    @param _ballot The ballot to use for future reconfiguration approvals. \\n    @param _duration The duration of the funding cycle.\\n    @param _currency The currency of the funding cycle.\\n    @param _fee The fee of the funding cycle.\\n    @param _discountRate The discount rate of the base funding cycle.\\n  */\\n  function _packAndStoreConfigurationPropertiesOf(\\n    uint256 _fundingCycleId,\\n    uint256 _configured,\\n    IJBFundingCycleBallot _ballot,\\n    uint256 _duration,\\n    uint256 _currency,\\n    uint256 _fee,\\n    uint256 _discountRate\\n  ) private {\\n    // ballot in bytes 0-159 bytes.\\n    uint256 packed = uint160(address(_ballot));\\n    // configured in bytes 160-207 bytes.\\n    packed |= _configured << 160;\\n    // duration in bytes 208-223 bytes.\\n    packed |= _duration << 208;\\n    // basedOn in bytes 224-231 bytes.\\n    packed |= _currency << 224;\\n    // fee in bytes 232-239 bytes.\\n    packed |= _fee << 232;\\n    // discountRate in bytes 240-255 bytes.\\n    packed |= _discountRate << 240;\\n\\n    // Set in storage.\\n    _packedConfigurationPropertiesOf[_fundingCycleId] = packed;\\n  }\\n\\n  /**\\n    @notice \\n    The project's stored funding cycle that hasn't yet started, if one exists.\\n\\n    @dev\\n    A value of 0 is returned if no funding cycle was found.\\n    \\n    @param _projectId The ID of a project to look through for a standby cycle.\\n\\n    @return fundingCycleId The ID of the standby funding cycle.\\n  */\\n  function _standbyOf(uint256 _projectId) private view returns (uint256 fundingCycleId) {\\n    // Get a reference to the project's latest funding cycle.\\n    fundingCycleId = latestIdOf[_projectId];\\n\\n    // If there isn't one, theres also no standby funding cycle.\\n    if (fundingCycleId == 0) return 0;\\n\\n    // Get the necessary properties for the latest funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(fundingCycleId);\\n\\n    // There is no upcoming funding cycle if the latest funding cycle has already started.\\n    if (block.timestamp >= _fundingCycle.start) return 0;\\n  }\\n\\n  /**\\n    @notice \\n    The project's stored funding cycle that has started and hasn't yet expired.\\n    \\n    @dev\\n    A value of 0 is returned if no funding cycle was found.\\n\\n    @param _projectId The ID of the project to look through.\\n\\n    @return fundingCycleId The ID of the active funding cycle.\\n  */\\n  function _eligibleOf(uint256 _projectId) private view returns (uint256 fundingCycleId) {\\n    // Get a reference to the project's latest funding cycle.\\n    fundingCycleId = latestIdOf[_projectId];\\n\\n    // If there isn't one, theres also no eligible funding cycle.\\n    if (fundingCycleId == 0) return 0;\\n\\n    // Get the necessary properties for the latest funding cycle.\\n    JBFundingCycle memory _fundingCycle = _getStructFor(fundingCycleId);\\n\\n    // If the latest is expired, return an empty funding cycle.\\n    // A duration of 0 can not be expired.\\n    if (\\n      _fundingCycle.duration > 0 &&\\n      block.timestamp >= _fundingCycle.start + (_fundingCycle.duration * _SECONDS_IN_DAY)\\n    ) return 0;\\n\\n    // The base cant be expired.\\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_fundingCycle.basedOn);\\n\\n    // If the current time is past the end of the base, return 0.\\n    // A duration of 0 is always eligible.\\n    if (\\n      _baseFundingCycle.duration > 0 &&\\n      block.timestamp >= _baseFundingCycle.start + (_baseFundingCycle.duration * _SECONDS_IN_DAY)\\n    ) return 0;\\n\\n    // Return the funding cycle immediately before the latest.\\n    fundingCycleId = _fundingCycle.basedOn;\\n  }\\n\\n  /** \\n    @notice \\n    A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration.\\n\\n    @dev\\n    Returns an empty funding cycle if there can't be a mock funding cycle based on the provided one.\\n\\n    @param _baseFundingCycle The funding cycle that the resulting funding cycle should follow.\\n    @param _allowMidCycle A flag indicating if the mocked funding cycle is allowed to already be mid cycle.\\n\\n    @return A mock of what the next funding cycle will be.\\n  */\\n  function _mockFundingCycleBasedOn(JBFundingCycle memory _baseFundingCycle, bool _allowMidCycle)\\n    private\\n    view\\n    returns (JBFundingCycle memory)\\n  {\\n    // Can't mock a non recurring funding cycle.\\n    if (_baseFundingCycle.discountRate == 10001) return _getStructFor(0);\\n\\n    // The distance of the current time to the start of the next possible funding cycle.\\n    // If the returned mock cycle must not yet have started, the start time of the mock must be in the future so no need to adjust backwards.\\n    // If the base funding cycle doesn't have a duration, no adjustment is necessary because the next cycle can start immediately.\\n    uint256 _timeFromImmediateStartMultiple = !_allowMidCycle || _baseFundingCycle.duration == 0\\n      ? 0\\n      : _baseFundingCycle.duration * _SECONDS_IN_DAY;\\n\\n    // Derive what the start time should be.\\n    uint256 _start = _deriveStartFrom(\\n      _baseFundingCycle,\\n      block.timestamp - _timeFromImmediateStartMultiple\\n    );\\n\\n    // Derive what the number should be.\\n    uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\\n\\n    return\\n      JBFundingCycle(\\n        _idFor(_baseFundingCycle.projectId, _number),\\n        _baseFundingCycle.projectId,\\n        _number,\\n        _baseFundingCycle.id,\\n        _baseFundingCycle.configured,\\n        _deriveWeightFrom(_baseFundingCycle, _start),\\n        _baseFundingCycle.ballot,\\n        _start,\\n        _baseFundingCycle.duration,\\n        _baseFundingCycle.target,\\n        _baseFundingCycle.currency,\\n        _baseFundingCycle.fee,\\n        _baseFundingCycle.discountRate,\\n        0,\\n        _baseFundingCycle.metadata\\n      );\\n  }\\n\\n  /**\\n    @notice \\n    Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct.\\n\\n    @param _id The funding cycle ID to get the full struct for.\\n\\n    @return fundingCycle The funding cycle struct.\\n  */\\n  function _getStructFor(uint256 _id) private view returns (JBFundingCycle memory fundingCycle) {\\n    // Return an empty funding cycle if the ID specified is 0.\\n    if (_id == 0) return fundingCycle;\\n\\n    fundingCycle.id = _id;\\n\\n    uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_id];\\n\\n    fundingCycle.weight = uint256(uint80(_packedIntrinsicProperties));\\n    fundingCycle.projectId = uint256(uint56(_packedIntrinsicProperties >> 80));\\n    fundingCycle.basedOn = uint256(uint48(_packedIntrinsicProperties >> 136));\\n    fundingCycle.start = uint256(uint48(_packedIntrinsicProperties >> 184));\\n    fundingCycle.number = uint256(uint24(_packedIntrinsicProperties >> 232));\\n\\n    uint256 _packedConfigurationProperties = _packedConfigurationPropertiesOf[_id];\\n\\n    fundingCycle.ballot = IJBFundingCycleBallot(address(uint160(_packedConfigurationProperties)));\\n    fundingCycle.configured = uint256(uint48(_packedConfigurationProperties >> 160));\\n    fundingCycle.duration = uint256(uint16(_packedConfigurationProperties >> 208));\\n    fundingCycle.currency = uint256(uint8(_packedConfigurationProperties >> 224));\\n    fundingCycle.fee = uint256(uint8(_packedConfigurationProperties >> 232));\\n    fundingCycle.discountRate = uint256(uint16(_packedConfigurationProperties >> 240));\\n\\n    fundingCycle.target = _targetOf[_id];\\n    fundingCycle.tapped = _tappedAmountOf[_id];\\n    fundingCycle.metadata = _metadataOf[_id];\\n  }\\n\\n  /** \\n    @notice \\n    The date that is the nearest multiple of the specified funding cycle's duration from its end.\\n\\n    @param _baseFundingCycle The funding cycle to make the calculation for.\\n    @param _mustStartOnOrAfter A date that the derived start must be on or come after.\\n\\n    @return start The next start time.\\n  */\\n  function _deriveStartFrom(JBFundingCycle memory _baseFundingCycle, uint256 _mustStartOnOrAfter)\\n    private\\n    pure\\n    returns (uint256 start)\\n  {\\n    // A subsequent cycle to one with a duration of 0 should start as soon as possible.\\n    if (_baseFundingCycle.duration == 0) return _mustStartOnOrAfter;\\n\\n    // Save a reference to the cycle's duration measured in seconds.\\n    uint256 _cycleDurationInSeconds = _baseFundingCycle.duration * _SECONDS_IN_DAY;\\n\\n    // The time when the funding cycle immediately after the specified funding cycle starts.\\n    uint256 _nextImmediateStart = _baseFundingCycle.start + _cycleDurationInSeconds;\\n\\n    // If the next immediate start is now or in the future, return it.\\n    if (_nextImmediateStart >= _mustStartOnOrAfter) return _nextImmediateStart;\\n\\n    // The amount of seconds since the `_mustStartOnOrAfter` time that results in a start time that might satisfy the specified constraints.\\n    uint256 _timeFromImmediateStartMultiple = (_mustStartOnOrAfter - _nextImmediateStart) %\\n      _cycleDurationInSeconds;\\n\\n    // A reference to the first possible start timestamp.\\n    start = _mustStartOnOrAfter - _timeFromImmediateStartMultiple;\\n\\n    // Add increments of duration as necessary to satisfy the threshold.\\n    while (_mustStartOnOrAfter > start) start = start + _cycleDurationInSeconds;\\n  }\\n\\n  /** \\n    @notice \\n    The accumulated weight change since the specified funding cycle.\\n\\n    @param _baseFundingCycle The funding cycle to make the calculation with.\\n    @param _start The start time to derive a weight for.\\n\\n    @return weight The next weight.\\n  */\\n  function _deriveWeightFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\\n    private\\n    pure\\n    returns (uint256 weight)\\n  {\\n    // A subsequent cycle to one with a duration of 0 should have the next possible weight.\\n    if (_baseFundingCycle.duration == 0)\\n      return\\n        PRBMath.mulDiv(_baseFundingCycle.weight, 10000 - _baseFundingCycle.discountRate, 10000);\\n\\n    // The weight should be based off the base funding cycle's weight.\\n    weight = _baseFundingCycle.weight;\\n\\n    // If the discount is 0, the weight doesn't change.\\n    if (_baseFundingCycle.discountRate == 0) return weight;\\n\\n    // The difference between the start of the base funding cycle and the proposed start.\\n    uint256 _startDistance = _start - _baseFundingCycle.start;\\n\\n    // Apply the base funding cycle's discount rate for each cycle that has passed.\\n    uint256 _discountMultiple = _startDistance / (_baseFundingCycle.duration * _SECONDS_IN_DAY);\\n\\n    for (uint256 i = 0; i < _discountMultiple; i++)\\n      // The number of times to apply the discount rate.\\n      // Base the new weight on the specified funding cycle's weight.\\n      weight = PRBMath.mulDiv(weight, 10000 - _baseFundingCycle.discountRate, 10000);\\n  }\\n\\n  /** \\n    @notice \\n    The number of the next funding cycle given the specified funding cycle.\\n\\n    @param _baseFundingCycle The funding cycle to make the calculation with.\\n    @param _start The start time to derive a number for.\\n\\n    @return The next number.\\n  */\\n  function _deriveNumberFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // A subsequent cycle to one with a duration of 0 should be the next number.\\n    if (_baseFundingCycle.duration == 0) return _baseFundingCycle.number + 1;\\n\\n    // The difference between the start of the base funding cycle and the proposed start.\\n    uint256 _startDistance = _start - _baseFundingCycle.start;\\n\\n    // Find the number of base cycles that fit in the start distance.\\n    return\\n      _baseFundingCycle.number + (_startDistance / (_baseFundingCycle.duration * _SECONDS_IN_DAY));\\n  }\\n\\n  /** \\n    @notice \\n    Checks to see if the funding cycle of the provided ID is approved according to the correct ballot.\\n\\n    @param _fundingCycleId The ID of the funding cycle to get an approval flag for.\\n\\n    @return The approval flag.\\n  */\\n  function _isIdApproved(uint256 _fundingCycleId) private view returns (bool) {\\n    JBFundingCycle memory _fundingCycle = _getStructFor(_fundingCycleId);\\n    return _isApproved(_fundingCycle);\\n  }\\n\\n  /** \\n    @notice \\n    Checks to see if the provided funding cycle is approved according to the correct ballot.\\n\\n    @param _fundingCycle The ID of the funding cycle to get an approval flag for.\\n\\n    @return The approval flag.\\n  */\\n  function _isApproved(JBFundingCycle memory _fundingCycle) private view returns (bool) {\\n    return\\n      _ballotStateOf(_fundingCycle.id, _fundingCycle.configured, _fundingCycle.basedOn) ==\\n      JBBallotState.Approved;\\n  }\\n\\n  /**\\n    @notice \\n    A funding cycle configuration's current status.\\n\\n    @param _id The ID of the funding cycle configuration to check the status of.\\n    @param _configuration This differentiates reconfigurations onto the same upcoming funding cycle, which all would have the same ID but different configuration times.\\n    @param _ballotFundingCycleId The ID of the funding cycle which is configured with the ballot that should be used.\\n\\n    @return The funding cycle's configuration status.\\n  */\\n  function _ballotStateOf(\\n    uint256 _id,\\n    uint256 _configuration,\\n    uint256 _ballotFundingCycleId\\n  ) private view returns (JBBallotState) {\\n    // If there is no ballot funding cycle, implicitly approve.\\n    if (_ballotFundingCycleId == 0) return JBBallotState.Approved;\\n\\n    // Get the ballot funding cycle.\\n    JBFundingCycle memory _ballotFundingCycle = _getStructFor(_ballotFundingCycleId);\\n\\n    // If the configuration is the same as the ballot's funding cycle,\\n    // the ballot isn't applicable. Auto approve since the ballot funding cycle is approved.\\n    if (_ballotFundingCycle.configured >= _configuration) return JBBallotState.Approved;\\n\\n    // If there is no ballot, the ID is auto approved.\\n    // Otherwise, return the ballot's state.\\n    return\\n      _ballotFundingCycle.ballot == IJBFundingCycleBallot(address(0))\\n        ? JBBallotState.Approved\\n        : _ballotFundingCycle.ballot.state(_id, _configuration);\\n  }\\n\\n  /** \\n    @notice\\n    The time after the ballot of the provided funding cycle has expired.\\n\\n    @dev\\n    If the ballot ends in the past, the current block timestamp will be returned.\\n\\n    @param _fundingCycle The ID funding cycle to make the caluclation from.\\n    @param _from The time from which the ballot duration should be calculated.\\n\\n    @return The time when the ballot has officially ended.\\n  */\\n  function _getLatestTimeAfterBallotOf(JBFundingCycle memory _fundingCycle, uint256 _from)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // If the provided funding cycle has no ballot, return the current timestamp.\\n    if (_fundingCycle.ballot == IJBFundingCycleBallot(address(0))) return block.timestamp;\\n\\n    // Get a reference to the time the ballot ends.\\n    uint256 _ballotExpiration = _from + _fundingCycle.ballot.duration();\\n\\n    // If the ballot ends in past, return the current timestamp. Otherwise return the ballot's expiration.\\n    return block.timestamp > _ballotExpiration ? block.timestamp : _ballotExpiration;\\n  }\\n\\n  /** \\n    @notice \\n    Constructs a unique ID from a project ID and a number.\\n\\n    @param _projectId The ID of the project to use in the ID.\\n    @param _number The number to use in the ID\\n\\n    @return The ID that is unique to the provided inputs.\\n  */\\n  function _idFor(uint256 _projectId, uint256 _number) private pure returns (uint256) {\\n    return uint256(uint56(_projectId) | uint24(_number));\\n  }\\n}\\n\",\"keccak256\":\"0xb5430018d34aaa0423ccf0765358ce5a05b743bf0d0134b5364563f653da82c5\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBControllerUtility.sol';\\n\\n/** \\n  @notice\\n  Provides tools for contracts that has functionality that can only be accessed by a project's controller.\\n*/\\nabstract contract JBControllerUtility is IJBControllerUtility {\\n  modifier onlyController(uint256 _projectId) {\\n    require(address(directory.controllerOf(_projectId)) == msg.sender, '0x4f: UNAUTHORIZED');\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n  }\\n}\\n\",\"keccak256\":\"0xf756edf53b6d9810fcf76faeeecaa00da0caba904a36cba3468e4f13e6f6ec94\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function signalWithdrawlFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe45d63615c77167a07f91175d2ce30bab2393cbb9ee4215157e65c4c10e359a0\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBControllerUtility {\\n  function directory() external view returns (IJBDirectory);\\n}\\n\",\"keccak256\":\"0xb280df3e7bd6abc2fb533073a806a9b3edfea8f5be2791c6eb1767c79dd98f88\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x8c05acec8250a632abe806d827ab70abe3cbd0a1289bdb5aa2e67f527a962ccd\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function state(uint256 _fundingCycleId, uint256 _configured)\\n    external\\n    view\\n    returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x8ccee1e7cfe82b4d750775d57ba901f2534d2ba2b44c339c70b4ab2ffbc82dc1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 indexed configured,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Tap(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 newTappedAmount,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed fundingCycleId, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _fundingCycleId) external view returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _fee\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n\\n  function tapFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x638e3d0ab5496f25fa48ab83998d42c01b722556ef18967d06a55daa82c1f392\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataCidOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0xa437875cce9e3e9da493b5109635a3f843a4de0ec08dfeedb68ad344bb14720f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x1c385537292a40b3a9e15571afab37187b89d89979a5696c472fd898dd7a6a5a\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct JBFundingCycle {\\n  // A unique number that's incremented for each new funding cycle, starting with 1.\\n  uint256 id;\\n  // The ID of the project contract that this funding cycle belongs to.\\n  uint256 projectId;\\n  // The number of this funding cycle for the project.\\n  uint256 number;\\n  // The ID of a previous funding cycle that this one is based on.\\n  uint256 basedOn;\\n  // The time when this funding cycle was last configured.\\n  uint256 configured;\\n  // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n  uint256 weight;\\n  // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n  IJBFundingCycleBallot ballot;\\n  // The time when this funding cycle will become active.\\n  uint256 start;\\n  // The number of seconds until this funding cycle's surplus is redistributed.\\n  uint256 duration;\\n  // The amount that this funding cycle is targeting in terms of the currency.\\n  uint256 target;\\n  // The currency that the target is measured in.\\n  uint256 currency;\\n  // The percentage of each payment to send as a fee to the Juicebox admin.\\n  uint256 fee;\\n  // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n  uint256 discountRate;\\n  // The amount of available funds that have been tapped by the project in terms of the currency.\\n  uint256 tapped;\\n  // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0xe495726d5a173e13e92e7fa2f2ebb802cce2ddcbbec07a839235c1717415e19f\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The target of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // A value of 0 means that all funds in the treasury are overflow.\\n  // A value of uint256.max() means that the entire treasury can be distributed to the preprogrammed payout splits at anytime.\\n  // A value in betweem, say 3 x 10^18, means that up to 3 (ETH, USD, ...) can be distributed to splits, and the rest of the treasury is overflow.\\n  uint256 target;\\n  // The currency of the funding cycle. 0 is ETH, 1 is USD.\\n  uint256 currency;\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // The discount rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  // The protocol will use the discount rate to reduce the weight of the subsequent funding cycle by this percentage compared to this cycle's weight.\\n  uint256 discountRate;\\n  // The ballot of the funding cycle.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xa04c2b1004d964ecbb62c653561c4cca3b264e891fda0acb060b6ad86a4863ca\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "configureFor(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256)": {
        "details": "Only a project's current controller can configure its funding cycles._data.target The amount that the project wants to receive in each funding cycle. 18 decimals._data.currency The currency of the `_target`. Send 0 for ETH or 1 for USD._data.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days.  Set to 0 for no expiry and to be able to reconfigure anytime._data.discountRate A number from 0-10000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 9000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 10001, an non-recurring funding cycle will get made._data.ballot The new ballot that will be used to approve subsequent reconfigurations.",
        "params": {
          "_data": "The funding cycle configuration.",
          "_fee": "The fee that this configuration incurs when tapping.",
          "_metadata": "Data to associate with this funding cycle configuration.",
          "_projectId": "The ID of the project being configured."
        },
        "returns": {
          "_0": "The funding cycle that the configuration will take effect during."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project."
        }
      },
      "currentBallotStateOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to check the ballot state of."
        },
        "returns": {
          "_0": "The current ballot's state."
        }
      },
      "currentOf(uint256)": {
        "details": "Returns an empty funding cycle with an ID of 0 if a current funding cycle of the project is not found. This runs very similar logic to `_tappableOf`.",
        "params": {
          "_projectId": "The ID of the project to get the current funding cycle of."
        },
        "returns": {
          "fundingCycle": "The current funding cycle."
        }
      },
      "get(uint256)": {
        "params": {
          "_fundingCycleId": "The ID of the funding cycle to get."
        },
        "returns": {
          "fundingCycle": "The funding cycle."
        }
      },
      "queuedOf(uint256)": {
        "details": "Returns an empty funding cycle with an ID of 0 if a queued funding cycle of the project is not found. This runs roughly similar logic to `_configurableOf`.",
        "params": {
          "_projectId": "The ID of the project to get the queued funding cycle of."
        },
        "returns": {
          "_0": "_fundingCycle The queued funding cycle."
        }
      },
      "tapFrom(uint256,uint256)": {
        "details": "Only a project's current controller can tap funds for its funding cycles.",
        "params": {
          "_amount": "The amount being tapped.",
          "_projectId": "The ID of the project being tapped."
        },
        "returns": {
          "_0": "The tapped funding cycle."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "configureFor(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256)": {
        "notice": " Configures the next eligible funding cycle for the specified project."
      },
      "currentBallotStateOf(uint256)": {
        "notice": " The currency ballot state of the project."
      },
      "currentOf(uint256)": {
        "notice": " The funding cycle that is currently active for the specified project."
      },
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "get(uint256)": {
        "notice": " Get the funding cycle with the given ID."
      },
      "latestIdOf(uint256)": {
        "notice": " The ID of the latest funding cycle for each project. _projectId The ID of the project to get the latest funding cycle ID of."
      },
      "queuedOf(uint256)": {
        "notice": " The funding cycle that's next up for the specified project."
      },
      "tapFrom(uint256,uint256)": {
        "notice": " Tap funds from a project's currently tappable funding cycle."
      }
    },
    "notice": " Manages funding cycle configurations, accounting, and scheduling.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19629,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_packedConfigurationPropertiesOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19634,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_packedIntrinsicPropertiesOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19639,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_metadataOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19644,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_targetOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19649,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "_tappedAmountOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19655,
        "contract": "contracts/v2/JBFundingCycleStore.sol:JBFundingCycleStore",
        "label": "latestIdOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}