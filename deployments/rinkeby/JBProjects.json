{
  "address": "0x53e1FD0CA79fDC56502E0bba68A8D9b267ABc730",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeExpiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ChallengeHandle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ClaimHandle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RenewHandle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetHandle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetUri",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newHandle",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransferHandle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "challengeExpiryOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_handle",
          "type": "bytes32"
        }
      ],
      "name": "challengeHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_handle",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_transferAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "claimHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_handle",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_metadataCid",
          "type": "string"
        }
      ],
      "name": "createFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "handleOf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "idFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadataCidOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "renewHandleOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_handle",
          "type": "bytes32"
        }
      ],
      "name": "setHandleOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataCid",
          "type": "string"
        }
      ],
      "name": "setMetadataCidOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transferAddressFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_transferAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_newHandle",
          "type": "bytes32"
        }
      ],
      "name": "transferHandleOf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "handle",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfd775b3c766a08774db95a45961aea90592cc8bcdd809f5388d05b66731a378",
  "receipt": {
    "to": null,
    "from": "0x568Fb3Ea8EE0d15dfbcf63784ebb2795801c5Fb7",
    "contractAddress": "0x53e1FD0CA79fDC56502E0bba68A8D9b267ABc730",
    "transactionIndex": 0,
    "gasUsed": "2944591",
    "logsBloom": "0x
    "blockHash": "0xc743e1834f61236f9ea776d29e6eb2bd0638dc05e7b2ea5a6da32d07c696813d",
    "transactionHash": "0xcfd775b3c766a08774db95a45961aea90592cc8bcdd809f5388d05b66731a378",
    "logs": [],
    "blockNumber": 9568049,
    "cumulativeGasUsed": "2944591",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21c1E45E7EBC41f3ED0aB6660204d63c911c93a9"
  ],
  "solcInputHash": "12ce77e8870d3973a4bc817761b50cf5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ChallengeHandle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ClaimHandle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RenewHandle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetHandle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHandle\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransferHandle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"challengeExpiryOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"challengeHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_handle\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_transferAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"claimHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_handle\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_metadataCid\",\"type\":\"string\"}],\"name\":\"createFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"handleOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"idFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataCidOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"renewHandleOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"setHandleOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataCid\",\"type\":\"string\"}],\"name\":\"setMetadataCidOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transferAddressFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_transferAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_newHandle\",\"type\":\"bytes32\"}],\"name\":\"transferHandleOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Projects are represented as ERC-721's.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"challengeHandle(bytes32)\":{\"params\":{\"_handle\":\"The handle to challenge.\"}},\"claimHandle(bytes32,address,uint256)\":{\"details\":\" Only a project's owner or operator can claim a handle for it.\",\"params\":{\"_handle\":\"The handle being claimed.\",\"_projectId\":\"The ID of the project to assign to the claimed handle.\",\"_transferAddress\":\"The address to which the handle has been transferred, which can now assign the handle to a project.\"}},\"constructor\":{\"params\":{\"_operatorStore\":\"A contract storing operator assignments.\"}},\"createFor(address,bytes32,string)\":{\"details\":\" Anyone can create a project on an owner's behalf.\",\"params\":{\"_handle\":\"A unique string to associate with the project that will resolve to its token ID.\",\"_metadataCid\":\"An IPFS CID hash where metadata about the project has been uploaded. An empty string is acceptable if no metadata is being provided.\",\"_owner\":\"The address that will be the owner of the project.\"},\"returns\":{\"_0\":\"The token ID of the newly created project\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renewHandleOf(uint256)\":{\"details\":\" Only a project's owner or operator can renew its handle.\",\"params\":{\"_projectId\":\"The ID of the project to which the handle being renewed belongs. \"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setHandleOf(uint256,bytes32)\":{\"details\":\" Only a project's owner or operator can set its handle.\",\"params\":{\"_handle\":\"The new unique handle for the project.\",\"_projectId\":\"The ID of the project who's handle is being changed.\"}},\"setMetadataCidOf(uint256,string)\":{\"details\":\" Only a project's owner or operator can set its URI.\",\"params\":{\"_metadataCid\":\"The new IPFS CID hash where metadata about the project has been uploaded.\",\"_projectId\":\"The ID of the project who's URI is being changed.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferHandleOf(uint256,address,bytes32)\":{\"details\":\" Only a project's owner or operator can transfer its handle.\",\"params\":{\"_newHandle\":\"The new unique handle for the project that will replace the transferred one.\",\"_projectId\":\"The ID of the project to transfer the handle from.\",\"_transferAddress\":\"The address that should be able to reallocate the transferred handle.\"},\"returns\":{\"handle\":\"The handle that has been transferred.\"}}},\"stateVariables\":{\"challengeExpiryOf\":{\"details\":\"A value of 0 means a handle isn't yet being challenged. _handle The handle to look for the challenge expiry of.\"},\"count\":{\"details\":\"The count is incremented with each new project created.  The resulting ERC-721 token ID for each project is the newly incremented count value.\"},\"handleOf\":{\"details\":\"Each project must have a handle. _projectId The ID of the project to which the handle belongs.\"},\"metadataCidOf\":{\"details\":\"This is optional for each project. _projectId The ID of the project to which the URI belongs.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"challengeExpiryOf(bytes32)\":{\"notice\":\" The timestamps after which each handle can be openly claimed. \"},\"challengeHandle(bytes32)\":{\"notice\":\"Allows anyone to challenge a project's handle. After one year, the handle can be claimed by anyone if the challenge isn't answered by the handle's project. This can be used to make sure a handle belonging to a stale project isn't lost forever.\"},\"claimHandle(bytes32,address,uint256)\":{\"notice\":\" Allows an address to claim an handle that has been transferred to it, and apply it to a project of theirs. A handle can also be claimed if it has been challenged and the challenge has succeeded.\"},\"count()\":{\"notice\":\" The number of projects that have been created using this contract.\"},\"createFor(address,bytes32,string)\":{\"notice\":\" Create a new project for the specified owner, which mints an NFT (ERC-721) into their wallet.\"},\"handleOf(uint256)\":{\"notice\":\" The unique handle for each project.\"},\"idFor(bytes32)\":{\"notice\":\" The ID of the project that each unique handle is currently referencing. _handle The handle from which the project ID can be referenced.\"},\"metadataCidOf(uint256)\":{\"notice\":\" The IPFS CID for each project, which can be used to reference the project's metadata.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"renewHandleOf(uint256)\":{\"notice\":\"Allows a project to renew its handle, which cancels any pending challenges.\"},\"setHandleOf(uint256,bytes32)\":{\"notice\":\" Allows a project owner to set the project's handle.\"},\"setMetadataCidOf(uint256,string)\":{\"notice\":\" Allows a project owner to set the project's IPFS CID hash where metadata about the project has been uploaded.\"},\"transferAddressFor(bytes32)\":{\"notice\":\" The address that can reallocate a handle that have been transferred to it. _handle The handle to look for the transfer address for.\"},\"transferHandleOf(uint256,address,bytes32)\":{\"notice\":\" Allows a project owner to transfer its handle to another address.\"}},\"notice\":\" Stores project ownership and identifying information.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBProjects.sol\":\"JBProjects\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/v2/JBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\n\\nimport './abstract/JBOperatable.sol';\\nimport './interfaces/IJBProjects.sol';\\n\\nimport './libraries/JBOperations.sol';\\n\\n/** \\n  @notice \\n  Stores project ownership and identifying information.\\n\\n  @dev\\n  Projects are represented as ERC-721's.\\n*/\\ncontract JBProjects is ERC721, IJBProjects, JBOperatable {\\n  //*********************************************************************//\\n  // --------------------- private stored constants -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The number of seconds in 365 days.\\n  */\\n  uint256 private constant _SECONDS_IN_YEAR = 31536000;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The number of projects that have been created using this contract.\\n\\n    @dev\\n    The count is incremented with each new project created. \\n    The resulting ERC-721 token ID for each project is the newly incremented count value.\\n  */\\n  uint256 public override count = 0;\\n\\n  /** \\n    @notice \\n    The IPFS CID for each project, which can be used to reference the project's metadata.\\n\\n    @dev\\n    This is optional for each project.\\n\\n    _projectId The ID of the project to which the URI belongs.\\n  */\\n  mapping(uint256 => string) public override metadataCidOf;\\n\\n  /** \\n    @notice \\n    The unique handle for each project.\\n\\n    @dev\\n    Each project must have a handle.\\n\\n    _projectId The ID of the project to which the handle belongs.\\n  */\\n  mapping(uint256 => bytes32) public override handleOf;\\n\\n  /** \\n    @notice \\n    The ID of the project that each unique handle is currently referencing.\\n\\n    _handle The handle from which the project ID can be referenced.\\n  */\\n  mapping(bytes32 => uint256) public override idFor;\\n\\n  /** \\n    @notice \\n    The address that can reallocate a handle that have been transferred to it.\\n\\n    _handle The handle to look for the transfer address for.\\n  */\\n  mapping(bytes32 => address) public override transferAddressFor;\\n\\n  /** \\n    @notice \\n    The timestamps after which each handle can be openly claimed. \\n\\n    @dev\\n    A value of 0 means a handle isn't yet being challenged.\\n\\n    _handle The handle to look for the challenge expiry of.\\n  */\\n  mapping(bytes32 => uint256) public override challengeExpiryOf;\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore)\\n    ERC721('Juicebox project', 'JUICEBOX')\\n    JBOperatable(_operatorStore)\\n  {}\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Create a new project for the specified owner, which mints an NFT (ERC-721) into their wallet.\\n\\n    @dev \\n    Anyone can create a project on an owner's behalf.\\n\\n    @param _owner The address that will be the owner of the project.\\n    @param _handle A unique string to associate with the project that will resolve to its token ID.\\n    @param _metadataCid An IPFS CID hash where metadata about the project has been uploaded. An empty string is acceptable if no metadata is being provided.\\n\\n    @return The token ID of the newly created project\\n  */\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external override returns (uint256) {\\n    // Handle must exist.\\n    require(_handle != bytes32(0), '0x06: EMPTY_HANDLE');\\n\\n    // Handle must be unique.\\n    require(idFor[_handle] == 0 && transferAddressFor[_handle] == address(0), '0x07: HANDLE_TAKEN');\\n\\n    // Increment the count, which will be used as the ID.\\n    count++;\\n\\n    // Mint the project.\\n    _safeMint(_owner, count);\\n\\n    // Store the handle for the project ID.\\n    handleOf[count] = _handle;\\n\\n    // Store the project ID for the handle.\\n    idFor[_handle] = count;\\n\\n    // Set the URI if one was provided.\\n    if (bytes(_metadataCid).length > 0) metadataCidOf[count] = _metadataCid;\\n\\n    emit Create(count, _owner, _handle, _metadataCid, msg.sender);\\n\\n    return count;\\n  }\\n\\n  /**\\n    @notice \\n    Allows a project owner to set the project's handle.\\n\\n    @dev \\n    Only a project's owner or operator can set its handle.\\n\\n    @param _projectId The ID of the project who's handle is being changed.\\n    @param _handle The new unique handle for the project.\\n  */\\n  function setHandleOf(uint256 _projectId, bytes32 _handle)\\n    external\\n    override\\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_HANDLE)\\n  {\\n    // Handle must exist.\\n    require(_handle != bytes32(0), '0x08: EMPTY_HANDLE');\\n\\n    // Handle must be unique.\\n    require(idFor[_handle] == 0 && transferAddressFor[_handle] == address(0), '0x09: HANDLE_TAKEN');\\n\\n    // Register the change in the resolver.\\n    idFor[handleOf[_projectId]] = 0;\\n\\n    // Store the handle for the project ID.\\n    handleOf[_projectId] = _handle;\\n\\n    // Store the project ID for the handle.\\n    idFor[_handle] = _projectId;\\n\\n    emit SetHandle(_projectId, _handle, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Allows a project owner to set the project's IPFS CID hash where metadata about the project has been uploaded.\\n\\n    @dev \\n    Only a project's owner or operator can set its URI.\\n\\n    @param _projectId The ID of the project who's URI is being changed.\\n    @param _metadataCid The new IPFS CID hash where metadata about the project has been uploaded.\\n\\n  */\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid)\\n    external\\n    override\\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_METADATA_CID)\\n  {\\n    // Set the new uri.\\n    metadataCidOf[_projectId] = _metadataCid;\\n\\n    emit SetUri(_projectId, _metadataCid, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Allows a project owner to transfer its handle to another address.\\n\\n    @dev \\n    Only a project's owner or operator can transfer its handle.\\n\\n    @param _projectId The ID of the project to transfer the handle from.\\n    @param _transferAddress The address that should be able to reallocate the transferred handle.\\n    @param _newHandle The new unique handle for the project that will replace the transferred one.\\n\\n    @return handle The handle that has been transferred.\\n  */\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  )\\n    external\\n    override\\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_HANDLE)\\n    returns (bytes32 handle)\\n  {\\n    // A new handle must have been provided.\\n    require(_newHandle != bytes32(0), '0x0a: EMPTY_HANDLE');\\n\\n    // The new handle must be available.\\n    require(\\n      idFor[_newHandle] == 0 && transferAddressFor[_newHandle] == address(0),\\n      '0x0b: HANDLE_TAKEN'\\n    );\\n\\n    // Get a reference to the project's current handle.\\n    handle = handleOf[_projectId];\\n\\n    // Remove the project ID for the transferred handle.\\n    idFor[handle] = 0;\\n\\n    // Store the new handle for the project ID.\\n    idFor[_newHandle] = _projectId;\\n\\n    // Store the project ID for the new handle.\\n    handleOf[_projectId] = _newHandle;\\n\\n    // Give the address the power to transfer the current handle.\\n    transferAddressFor[handle] = _transferAddress;\\n\\n    emit TransferHandle(_projectId, _transferAddress, handle, _newHandle, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Allows an address to claim an handle that has been transferred to it, and apply it to a project of theirs.\\n    A handle can also be claimed if it has been challenged and the challenge has succeeded.\\n\\n    @dev \\n    Only a project's owner or operator can claim a handle for it.\\n\\n    @param _handle The handle being claimed.\\n    @param _transferAddress The address to which the handle has been transferred, which can now assign the handle to a project.\\n    @param _projectId The ID of the project to assign to the claimed handle.\\n  */\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _transferAddress,\\n    uint256 _projectId\\n  )\\n    external\\n    override\\n    requirePermission(_transferAddress, _projectId, JBOperations.CLAIM_HANDLE)\\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.CLAIM_HANDLE)\\n  {\\n    // The handle must have been transferred to the specified address,\\n    // or the handle challenge must have expired before being renewed.\\n    require(\\n      transferAddressFor[_handle] == _transferAddress ||\\n        (challengeExpiryOf[_handle] > 0 && block.timestamp > challengeExpiryOf[_handle]),\\n      '0x0c: UNAUTHORIZED'\\n    );\\n\\n    // Remove the project ID for the current handle of the specified project.\\n    idFor[handleOf[_projectId]] = 0;\\n\\n    // Set the project ID for the provided handle to be the specified project.\\n    idFor[_handle] = _projectId;\\n\\n    // Set the new handle.\\n    handleOf[_projectId] = _handle;\\n\\n    // Set the handle as not being transferred.\\n    transferAddressFor[_handle] = address(0);\\n\\n    // Reset the challenge to 0.\\n    challengeExpiryOf[_handle] = 0;\\n\\n    emit ClaimHandle(_projectId, _transferAddress, _handle, msg.sender);\\n  }\\n\\n  /** \\n    @notice\\n    Allows anyone to challenge a project's handle. After one year, the handle can be claimed by anyone if the challenge isn't answered by the handle's project.\\n    This can be used to make sure a handle belonging to a stale project isn't lost forever.\\n\\n    @param _handle The handle to challenge.\\n  */\\n  function challengeHandle(bytes32 _handle) external override {\\n    // Get a reference to the ID of the project to which the handle belongs.\\n    uint256 _projectId = idFor[_handle];\\n\\n    // No need to challenge a handle that's not taken.\\n    require(_projectId > 0, '0x0d: HANDLE_NOT_TAKEN');\\n\\n    // No need to challenge again if a handle is already being challenged.\\n    require(challengeExpiryOf[_handle] == 0, '0x0e: CHALLENGE_OPEN');\\n\\n    // The challenge will expire in a year, at which point the handle can be claimed if it has yet to be renewed.\\n    uint256 _challengeExpiry = block.timestamp + _SECONDS_IN_YEAR;\\n\\n    // Store the challenge expiry for the handle.\\n    challengeExpiryOf[_handle] = _challengeExpiry;\\n\\n    emit ChallengeHandle(_handle, _projectId, _challengeExpiry, msg.sender);\\n  }\\n\\n  /** \\n    @notice\\n    Allows a project to renew its handle, which cancels any pending challenges.\\n\\n    @dev \\n    Only a project's owner or operator can renew its handle.\\n\\n    @param _projectId The ID of the project to which the handle being renewed belongs. \\n  */\\n  function renewHandleOf(uint256 _projectId)\\n    external\\n    override\\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.RENEW_HANDLE)\\n  {\\n    // Get the handle of the project.\\n    bytes32 _handle = handleOf[_projectId];\\n\\n    // Reset the challenge to 0.\\n    challengeExpiryOf[_handle] = 0;\\n\\n    emit RenewHandle(_handle, _projectId, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x6175b2f004b8ee607c5bfe5485d036a0ddad1f3b52225380fccaf002ff521a33\",\"license\":\"MIT\"},\"contracts/v2/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    require(\\n      msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    require(\\n      _override ||\\n        msg.sender == _account ||\\n        operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) ||\\n        operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex),\\n      'Operatable: UNAUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x8b5b41ab9dfe24ec6da1cbf2de40535d1af341a2fba0d531e959e2d25a514922\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function signalWithdrawlFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe45d63615c77167a07f91175d2ce30bab2393cbb9ee4215157e65c4c10e359a0\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x8c05acec8250a632abe806d827ab70abe3cbd0a1289bdb5aa2e67f527a962ccd\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function state(uint256 _fundingCycleId, uint256 _configured)\\n    external\\n    view\\n    returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x8ccee1e7cfe82b4d750775d57ba901f2534d2ba2b44c339c70b4ab2ffbc82dc1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 indexed configured,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Tap(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 newTappedAmount,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed fundingCycleId, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _fundingCycleId) external view returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _fee\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n\\n  function tapFrom(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x638e3d0ab5496f25fa48ab83998d42c01b722556ef18967d06a55daa82c1f392\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataCidOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0xa437875cce9e3e9da493b5109635a3f843a4de0ec08dfeedb68ad344bb14720f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0x1c385537292a40b3a9e15571afab37187b89d89979a5696c472fd898dd7a6a5a\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant PRINT_PREMINED_TOKENS = 2;\\n  uint256 public constant REDEEM = 3;\\n  uint256 public constant MIGRATE_CONTROLLER = 4;\\n  uint256 public constant MIGRATE_TERMINAL = 5;\\n  uint256 public constant PROCESS_FEES = 6;\\n  uint256 public constant SET_HANDLE = 7;\\n  uint256 public constant SET_METADATA_CID = 8;\\n  uint256 public constant CLAIM_HANDLE = 9;\\n  uint256 public constant RENEW_HANDLE = 10;\\n  uint256 public constant ISSUE = 11;\\n  uint256 public constant CHANGE_TOKEN = 12;\\n  uint256 public constant MINT = 13;\\n  uint256 public constant BURN = 14;\\n  uint256 public constant TRANSFER = 15;\\n  uint256 public constant REQUIRE_CLAIM = 16;\\n  uint256 public constant SET_CONTROLLER = 17;\\n  uint256 public constant ADD_TERMINAL = 18;\\n  uint256 public constant REMOVE_TERMINAL = 19;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 20;\\n  uint256 public constant USE_ALLOWANCE = 21;\\n  uint256 public constant SET_SPLITS = 22;\\n}\\n\",\"keccak256\":\"0x293bde08a89e6a263d54a067c79cd84550756eb53d0120e6d0c9e505a5b9f524\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct JBFundingCycle {\\n  // A unique number that's incremented for each new funding cycle, starting with 1.\\n  uint256 id;\\n  // The ID of the project contract that this funding cycle belongs to.\\n  uint256 projectId;\\n  // The number of this funding cycle for the project.\\n  uint256 number;\\n  // The ID of a previous funding cycle that this one is based on.\\n  uint256 basedOn;\\n  // The time when this funding cycle was last configured.\\n  uint256 configured;\\n  // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n  uint256 weight;\\n  // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n  IJBFundingCycleBallot ballot;\\n  // The time when this funding cycle will become active.\\n  uint256 start;\\n  // The number of seconds until this funding cycle's surplus is redistributed.\\n  uint256 duration;\\n  // The amount that this funding cycle is targeting in terms of the currency.\\n  uint256 target;\\n  // The currency that the target is measured in.\\n  uint256 currency;\\n  // The percentage of each payment to send as a fee to the Juicebox admin.\\n  uint256 fee;\\n  // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n  uint256 discountRate;\\n  // The amount of available funds that have been tapped by the project in terms of the currency.\\n  uint256 tapped;\\n  // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0xe495726d5a173e13e92e7fa2f2ebb802cce2ddcbbec07a839235c1717415e19f\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The target of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // A value of 0 means that all funds in the treasury are overflow.\\n  // A value of uint256.max() means that the entire treasury can be distributed to the preprogrammed payout splits at anytime.\\n  // A value in betweem, say 3 x 10^18, means that up to 3 (ETH, USD, ...) can be distributed to splits, and the rest of the treasury is overflow.\\n  uint256 target;\\n  // The currency of the funding cycle. 0 is ETH, 1 is USD.\\n  uint256 currency;\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // The discount rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  // The protocol will use the discount rate to reduce the weight of the subsequent funding cycle by this percentage compared to this cycle's weight.\\n  uint256 discountRate;\\n  // The ballot of the funding cycle.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xa04c2b1004d964ecbb62c653561c4cca3b264e891fda0acb060b6ad86a4863ca\",\"license\":\"MIT\"},\"contracts/v2/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006006553480156200001657600080fd5b50604051620035ed380380620035ed833981016040819052620000399162000168565b604080518082018252601081526f129d5a58d9589bde081c1c9bda9958dd60821b602080830191825283518085019094526008845267094aa92868a849eb60c31b908401528151849391620000929160009190620000c2565b508051620000a8906001906020840190620000c2565b50505060601b6001600160601b03191660805250620001d7565b828054620000d0906200019a565b90600052602060002090601f016020900481019282620000f457600085556200013f565b82601f106200010f57805160ff19168380011785556200013f565b828001600101855582156200013f579182015b828111156200013f57825182559160200191906001019062000122565b506200014d92915062000151565b5090565b5b808211156200014d576000815560010162000152565b6000602082840312156200017b57600080fd5b81516001600160a01b03811681146200019357600080fd5b9392505050565b600181811c90821680620001af57607f821691505b60208210811415620001d157634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c6133a36200024a600039600081816103570152818161092a01528181610a0301528181610bc601528181610c9f015281816116740152818161174d01528181611a3101528181611b0a01528181611c9c01528181611d7501528181611ebf0152611f9801526133a36000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063733f0127116100f9578063ba8e8c1d11610097578063d5af3d2911610071578063d5af3d2914610408578063e985e9c51461041b578063ee1dd35314610464578063fc1dd6de1461047757600080fd5b8063ba8e8c1d1461039f578063c87b56dd146103bf578063d39afed9146103d257600080fd5b8063a22cb465116100d3578063a22cb4651461033f578063ad007d6314610352578063af90cb2014610379578063b88d4fde1461038c57600080fd5b8063733f0127146103115780637b0230141461032457806395d89b411461033757600080fd5b8063403446b011610166578063494919871161014057806349491987146102b857806350ca58df146102d85780636352211e146102eb57806370a08231146102fe57600080fd5b8063403446b01461027257806342842e0e146102855780634737e5321461029857600080fd5b8063081812fc11610197578063081812fc14610212578063095ea7b31461024a57806323b872dd1461025f57600080fd5b806301ffc9a7146101be57806306661abd146101e657806306fdde03146101fd575b600080fd5b6101d16101cc366004612f78565b61048a565b60405190151581526020015b60405180910390f35b6101ef60065481565b6040519081526020016101dd565b61020561056f565b6040516101dd919061314f565b610225610220366004612f3a565b610601565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b61025d610258366004612ef3565b6106c6565b005b61025d61026d366004612d2c565b61081f565b61025d610280366004612fd4565b6108a6565b61025d610293366004612d2c565b610b27565b6101ef6102a6366004612f3a565b60096020526000908152604090205481565b6101ef6102c6366004612f3a565b60086020526000908152604090205481565b61025d6102e6366004612fb2565b610b42565b6102256102f9366004612f3a565b610ea3565b6101ef61030c366004612cde565b610f3b565b6101ef61031f366004612e99565b610fef565b61025d610332366004612f3a565b611196565b6102056112b7565b61025d61034d366004612e62565b6112c6565b6102257f000000000000000000000000000000000000000000000000000000000000000081565b610205610387366004612f3a565b6113c3565b61025d61039a366004612d68565b61145d565b6101ef6103ad366004612f3a565b600b6020526000908152604090205481565b6102056103cd366004612f3a565b6114eb565b6102256103e0366004612f3a565b600a6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101ef610416366004612f53565b6115ee565b6101d1610429366004612cf9565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b61025d610472366004612f3a565b6119ad565b61025d610485366004612f53565b611c20565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061051d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061056957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461057e906131d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa906131d1565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661069d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106d182610ea3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107755760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610694565b3373ffffffffffffffffffffffffffffffffffffffff8216148061079e575061079e8133610429565b6108105760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610694565b61081a83836121be565b505050565b610829338261225e565b61089b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610694565b61081a8383836123b0565b6108af83610ea3565b8360083373ffffffffffffffffffffffffffffffffffffffff841614806109a457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561096c57600080fd5b505afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190612f1d565b80610a7d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190612f1d565b610ac95760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b6000868152600760205260409020610ae2908686612bb5565b50857f0f3d240fe5efaeda774d27bf0425f932ddd2098297b26de8070d6c8bef534b16868633604051610b17939291906130e2565b60405180910390a2505050505050565b61081a8383836040518060200160405280600081525061145d565b610b4b82610ea3565b8260073373ffffffffffffffffffffffffffffffffffffffff84161480610c4057506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c0857600080fd5b505afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190612f1d565b80610d1957506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610ce157600080fd5b505afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190612f1d565b610d655760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b83610db25760405162461bcd60e51b815260206004820152601260248201527f307830383a20454d5054595f48414e444c4500000000000000000000000000006044820152606401610694565b600084815260096020526040902054158015610df057506000848152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16155b610e3c5760405162461bcd60e51b815260206004820152601260248201527f307830393a2048414e444c455f54414b454e00000000000000000000000000006044820152606401610694565b60008581526008602090815260408083208054845260098352818420849055879055868352918290208790559051338152859187917e079d7af084def275bc880ac88a2e556cf9a2001231b27a71d0082607876ac591015b60405180910390a35050505050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806105695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610694565b600073ffffffffffffffffffffffffffffffffffffffff8216610fc65760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610694565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b60008361103e5760405162461bcd60e51b815260206004820152601260248201527f307830363a20454d5054595f48414e444c4500000000000000000000000000006044820152606401610694565b60008481526009602052604090205415801561107c57506000848152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16155b6110c85760405162461bcd60e51b815260206004820152601260248201527f307830373a2048414e444c455f54414b454e00000000000000000000000000006044820152606401610694565b600680549060006110d883613225565b91905055506110e9856006546125e3565b60068054600090815260086020908152604080832088905592548783526009909152919020558115611133576006546000908152600760205260409020611131908484612bb5565b505b838573ffffffffffffffffffffffffffffffffffffffff166006547fd90717abd887cf93b92f5ba6ed5d1c02c3e91767e2af12834b01d64a16a1ed9c868633604051611181939291906130e2565b60405180910390a4506006545b949350505050565b600081815260096020526040902054806111f25760405162461bcd60e51b815260206004820152601660248201527f307830643a2048414e444c455f4e4f545f54414b454e000000000000000000006044820152606401610694565b6000828152600b60205260409020541561124e5760405162461bcd60e51b815260206004820152601460248201527f307830653a204348414c4c454e47455f4f50454e0000000000000000000000006044820152606401610694565b600061125e6301e1338042613162565b6000848152600b602090815260409182902083905581518381523391810191909152919250839185917fa98d4166a279687385a76a4399d08fa62a1b30b7019b27ec4076e66112bac36d910160405180910390a3505050565b60606001805461057e906131d1565b73ffffffffffffffffffffffffffffffffffffffff821633141561132c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610694565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600760205260009081526040902080546113dc906131d1565b80601f0160208091040260200160405190810160405280929190818152602001828054611408906131d1565b80156114555780601f1061142a57610100808354040283529160200191611455565b820191906000526020600020905b81548152906001019060200180831161143857829003601f168201915b505050505081565b611467338361225e565b6114d95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610694565b6114e584848484612601565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff166115855760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610694565b600061159c60408051602081019091526000815290565b905060008151116115bc57604051806020016040528060008152506115e7565b806115c68461268a565b6040516020016115d792919061306a565b6040516020818303038152906040525b9392505050565b60006115f984610ea3565b8460073373ffffffffffffffffffffffffffffffffffffffff841614806116ee57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156116b657600080fd5b505afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee9190612f1d565b806117c757506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561178f57600080fd5b505afa1580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c79190612f1d565b6118135760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b846118605760405162461bcd60e51b815260206004820152601260248201527f307830613a20454d5054595f48414e444c4500000000000000000000000000006044820152606401610694565b60008581526009602052604090205415801561189e57506000858152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16155b6118ea5760405162461bcd60e51b815260206004820152601260248201527f307830623a2048414e444c455f54414b454e00000000000000000000000000006044820152606401610694565b60008781526008602090815260408083208054808552600984528285208590558985528285208c905590899055808452600a83529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b16908117909155815189815233938101939093529296508692918a917fd46a8ff77c59c98b930d834768ba8d0983b5a0b99ebbd12af00f2f182eeeeee1910160405180910390a45050509392505050565b6119b681610ea3565b81600a3373ffffffffffffffffffffffffffffffffffffffff84161480611aab57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611a7357600080fd5b505afa158015611a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aab9190612f1d565b80611b8457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b849190612f1d565b611bd05760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b600084815260086020908152604080832054808452600b83528184209390935551338152869183917f6eec1e60946fbfd12ab0bde53c7c27478f3c07b42ffea7d25a719af24590eebf9101610e94565b818160093373ffffffffffffffffffffffffffffffffffffffff84161480611d1657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d169190612f1d565b80611def57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611db757600080fd5b505afa158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def9190612f1d565b611e3b5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b611e4484610ea3565b8460093373ffffffffffffffffffffffffffffffffffffffff84161480611f3957506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611f0157600080fd5b505afa158015611f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f399190612f1d565b8061201257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120129190612f1d565b61205e5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b6000898152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff898116911614806120b857506000898152600b6020526040902054158015906120b857506000898152600b602052604090205442115b6121045760405162461bcd60e51b815260206004820152601260248201527f307830633a20554e415554484f52495a454400000000000000000000000000006044820152606401610694565b600087815260086020908152604080832080548452600983528184208490558c84528184208b90558c9055600a825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600b82528083209290925590513381528a9173ffffffffffffffffffffffffffffffffffffffff8b16918a917f1fad793256b964b482b25642d6fc37842634e3f800528f0a943a4863078846ba910160405180910390a4505050505050505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061221882610ea3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff166122f55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610694565b600061230083610ea3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061236f57508373ffffffffffffffffffffffffffffffffffffffff1661235784610601565b73ffffffffffffffffffffffffffffffffffffffff16145b8061118e575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff1661118e565b8273ffffffffffffffffffffffffffffffffffffffff166123d082610ea3565b73ffffffffffffffffffffffffffffffffffffffff16146124595760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610694565b73ffffffffffffffffffffffffffffffffffffffff82166124e15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610694565b6124ec6000826121be565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812080546001929061252290849061318e565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080546001929061255d908490613162565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6125fd8282604051806020016040528060008152506127bc565b5050565b61260c8484846123b0565b61261884848484612845565b6114e55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610694565b6060816126ca57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156126f457806126de81613225565b91506126ed9050600a8361317a565b91506126ce565b60008167ffffffffffffffff81111561270f5761270f6132ff565b6040519080825280601f01601f191660200182016040528015612739576020820181803683370190505b5090505b841561118e5761274e60018361318e565b915061275b600a8661325e565b612766906030613162565b60f81b81838151811061277b5761277b6132d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506127b5600a8661317a565b945061273d565b6127c68383612a27565b6127d36000848484612845565b61081a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610694565b600073ffffffffffffffffffffffffffffffffffffffff84163b15612a1f576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906128bc903390899088908890600401613099565b602060405180830381600087803b1580156128d657600080fd5b505af1925050508015612924575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261292191810190612f95565b60015b6129d4573d808015612952576040519150601f19603f3d011682016040523d82523d6000602084013e612957565b606091505b5080516129cc5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610694565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061118e565b50600161118e565b73ffffffffffffffffffffffffffffffffffffffff8216612a8a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610694565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612afc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610694565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290612b32908490613162565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612bc1906131d1565b90600052602060002090601f016020900481019282612be35760008555612c47565b82601f10612c1a578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612c47565b82800160010185558215612c47579182015b82811115612c47578235825591602001919060010190612c2c565b50612c53929150612c57565b5090565b5b80821115612c535760008155600101612c58565b803573ffffffffffffffffffffffffffffffffffffffff81168114612c9057600080fd5b919050565b60008083601f840112612ca757600080fd5b50813567ffffffffffffffff811115612cbf57600080fd5b602083019150836020828501011115612cd757600080fd5b9250929050565b600060208284031215612cf057600080fd5b6115e782612c6c565b60008060408385031215612d0c57600080fd5b612d1583612c6c565b9150612d2360208401612c6c565b90509250929050565b600080600060608486031215612d4157600080fd5b612d4a84612c6c565b9250612d5860208501612c6c565b9150604084013590509250925092565b60008060008060808587031215612d7e57600080fd5b612d8785612c6c565b9350612d9560208601612c6c565b925060408501359150606085013567ffffffffffffffff80821115612db957600080fd5b818701915087601f830112612dcd57600080fd5b813581811115612ddf57612ddf6132ff565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612e2557612e256132ff565b816040528281528a6020848701011115612e3e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612e7557600080fd5b612e7e83612c6c565b91506020830135612e8e8161332e565b809150509250929050565b60008060008060608587031215612eaf57600080fd5b612eb885612c6c565b935060208501359250604085013567ffffffffffffffff811115612edb57600080fd5b612ee787828801612c95565b95989497509550505050565b60008060408385031215612f0657600080fd5b612f0f83612c6c565b946020939093013593505050565b600060208284031215612f2f57600080fd5b81516115e78161332e565b600060208284031215612f4c57600080fd5b5035919050565b600080600060608486031215612f6857600080fd5b83359250612d5860208501612c6c565b600060208284031215612f8a57600080fd5b81356115e78161333f565b600060208284031215612fa757600080fd5b81516115e78161333f565b60008060408385031215612fc557600080fd5b50508035926020909101359150565b600080600060408486031215612fe957600080fd5b83359250602084013567ffffffffffffffff81111561300757600080fd5b61301386828701612c95565b9497909650939450505050565b600081518084526130388160208601602086016131a5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000835161307c8184602088016131a5565b8351908301906130908183602088016131a5565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526130d86080830184613020565b9695505050505050565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b6020815260006115e76020830184613020565b6000821982111561317557613175613272565b500190565b600082613189576131896132a1565b500490565b6000828210156131a0576131a0613272565b500390565b60005b838110156131c05781810151838201526020016131a8565b838111156114e55750506000910152565b600181811c908216806131e557607f821691505b6020821081141561321f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561325757613257613272565b5060010190565b60008261326d5761326d6132a1565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461333c57600080fd5b50565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461333c57600080fdfea264697066735822122084b5e27d2ef687b621125e0036df6e0bfaa3223a4ec4990a4b86af4969963c2a64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c8063733f0127116100f9578063ba8e8c1d11610097578063d5af3d2911610071578063d5af3d2914610408578063e985e9c51461041b578063ee1dd35314610464578063fc1dd6de1461047757600080fd5b8063ba8e8c1d1461039f578063c87b56dd146103bf578063d39afed9146103d257600080fd5b8063a22cb465116100d3578063a22cb4651461033f578063ad007d6314610352578063af90cb2014610379578063b88d4fde1461038c57600080fd5b8063733f0127146103115780637b0230141461032457806395d89b411461033757600080fd5b8063403446b011610166578063494919871161014057806349491987146102b857806350ca58df146102d85780636352211e146102eb57806370a08231146102fe57600080fd5b8063403446b01461027257806342842e0e146102855780634737e5321461029857600080fd5b8063081812fc11610197578063081812fc14610212578063095ea7b31461024a57806323b872dd1461025f57600080fd5b806301ffc9a7146101be57806306661abd146101e657806306fdde03146101fd575b600080fd5b6101d16101cc366004612f78565b61048a565b60405190151581526020015b60405180910390f35b6101ef60065481565b6040519081526020016101dd565b61020561056f565b6040516101dd919061314f565b610225610220366004612f3a565b610601565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b61025d610258366004612ef3565b6106c6565b005b61025d61026d366004612d2c565b61081f565b61025d610280366004612fd4565b6108a6565b61025d610293366004612d2c565b610b27565b6101ef6102a6366004612f3a565b60096020526000908152604090205481565b6101ef6102c6366004612f3a565b60086020526000908152604090205481565b61025d6102e6366004612fb2565b610b42565b6102256102f9366004612f3a565b610ea3565b6101ef61030c366004612cde565b610f3b565b6101ef61031f366004612e99565b610fef565b61025d610332366004612f3a565b611196565b6102056112b7565b61025d61034d366004612e62565b6112c6565b6102257f000000000000000000000000000000000000000000000000000000000000000081565b610205610387366004612f3a565b6113c3565b61025d61039a366004612d68565b61145d565b6101ef6103ad366004612f3a565b600b6020526000908152604090205481565b6102056103cd366004612f3a565b6114eb565b6102256103e0366004612f3a565b600a6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101ef610416366004612f53565b6115ee565b6101d1610429366004612cf9565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b61025d610472366004612f3a565b6119ad565b61025d610485366004612f53565b611c20565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061051d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061056957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461057e906131d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa906131d1565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661069d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106d182610ea3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107755760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610694565b3373ffffffffffffffffffffffffffffffffffffffff8216148061079e575061079e8133610429565b6108105760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610694565b61081a83836121be565b505050565b610829338261225e565b61089b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610694565b61081a8383836123b0565b6108af83610ea3565b8360083373ffffffffffffffffffffffffffffffffffffffff841614806109a457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561096c57600080fd5b505afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190612f1d565b80610a7d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190612f1d565b610ac95760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b6000868152600760205260409020610ae2908686612bb5565b50857f0f3d240fe5efaeda774d27bf0425f932ddd2098297b26de8070d6c8bef534b16868633604051610b17939291906130e2565b60405180910390a2505050505050565b61081a8383836040518060200160405280600081525061145d565b610b4b82610ea3565b8260073373ffffffffffffffffffffffffffffffffffffffff84161480610c4057506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c0857600080fd5b505afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190612f1d565b80610d1957506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610ce157600080fd5b505afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190612f1d565b610d655760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b83610db25760405162461bcd60e51b815260206004820152601260248201527f307830383a20454d5054595f48414e444c4500000000000000000000000000006044820152606401610694565b600084815260096020526040902054158015610df057506000848152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16155b610e3c5760405162461bcd60e51b815260206004820152601260248201527f307830393a2048414e444c455f54414b454e00000000000000000000000000006044820152606401610694565b60008581526008602090815260408083208054845260098352818420849055879055868352918290208790559051338152859187917e079d7af084def275bc880ac88a2e556cf9a2001231b27a71d0082607876ac591015b60405180910390a35050505050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806105695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610694565b600073ffffffffffffffffffffffffffffffffffffffff8216610fc65760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610694565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b60008361103e5760405162461bcd60e51b815260206004820152601260248201527f307830363a20454d5054595f48414e444c4500000000000000000000000000006044820152606401610694565b60008481526009602052604090205415801561107c57506000848152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16155b6110c85760405162461bcd60e51b815260206004820152601260248201527f307830373a2048414e444c455f54414b454e00000000000000000000000000006044820152606401610694565b600680549060006110d883613225565b91905055506110e9856006546125e3565b60068054600090815260086020908152604080832088905592548783526009909152919020558115611133576006546000908152600760205260409020611131908484612bb5565b505b838573ffffffffffffffffffffffffffffffffffffffff166006547fd90717abd887cf93b92f5ba6ed5d1c02c3e91767e2af12834b01d64a16a1ed9c868633604051611181939291906130e2565b60405180910390a4506006545b949350505050565b600081815260096020526040902054806111f25760405162461bcd60e51b815260206004820152601660248201527f307830643a2048414e444c455f4e4f545f54414b454e000000000000000000006044820152606401610694565b6000828152600b60205260409020541561124e5760405162461bcd60e51b815260206004820152601460248201527f307830653a204348414c4c454e47455f4f50454e0000000000000000000000006044820152606401610694565b600061125e6301e1338042613162565b6000848152600b602090815260409182902083905581518381523391810191909152919250839185917fa98d4166a279687385a76a4399d08fa62a1b30b7019b27ec4076e66112bac36d910160405180910390a3505050565b60606001805461057e906131d1565b73ffffffffffffffffffffffffffffffffffffffff821633141561132c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610694565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600760205260009081526040902080546113dc906131d1565b80601f0160208091040260200160405190810160405280929190818152602001828054611408906131d1565b80156114555780601f1061142a57610100808354040283529160200191611455565b820191906000526020600020905b81548152906001019060200180831161143857829003601f168201915b505050505081565b611467338361225e565b6114d95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610694565b6114e584848484612601565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff166115855760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610694565b600061159c60408051602081019091526000815290565b905060008151116115bc57604051806020016040528060008152506115e7565b806115c68461268a565b6040516020016115d792919061306a565b6040516020818303038152906040525b9392505050565b60006115f984610ea3565b8460073373ffffffffffffffffffffffffffffffffffffffff841614806116ee57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156116b657600080fd5b505afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee9190612f1d565b806117c757506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561178f57600080fd5b505afa1580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c79190612f1d565b6118135760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b846118605760405162461bcd60e51b815260206004820152601260248201527f307830613a20454d5054595f48414e444c4500000000000000000000000000006044820152606401610694565b60008581526009602052604090205415801561189e57506000858152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16155b6118ea5760405162461bcd60e51b815260206004820152601260248201527f307830623a2048414e444c455f54414b454e00000000000000000000000000006044820152606401610694565b60008781526008602090815260408083208054808552600984528285208590558985528285208c905590899055808452600a83529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b16908117909155815189815233938101939093529296508692918a917fd46a8ff77c59c98b930d834768ba8d0983b5a0b99ebbd12af00f2f182eeeeee1910160405180910390a45050509392505050565b6119b681610ea3565b81600a3373ffffffffffffffffffffffffffffffffffffffff84161480611aab57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611a7357600080fd5b505afa158015611a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aab9190612f1d565b80611b8457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b849190612f1d565b611bd05760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b600084815260086020908152604080832054808452600b83528184209390935551338152869183917f6eec1e60946fbfd12ab0bde53c7c27478f3c07b42ffea7d25a719af24590eebf9101610e94565b818160093373ffffffffffffffffffffffffffffffffffffffff84161480611d1657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d169190612f1d565b80611def57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611db757600080fd5b505afa158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def9190612f1d565b611e3b5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b611e4484610ea3565b8460093373ffffffffffffffffffffffffffffffffffffffff84161480611f3957506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611f0157600080fd5b505afa158015611f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f399190612f1d565b8061201257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120129190612f1d565b61205e5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610694565b6000898152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff898116911614806120b857506000898152600b6020526040902054158015906120b857506000898152600b602052604090205442115b6121045760405162461bcd60e51b815260206004820152601260248201527f307830633a20554e415554484f52495a454400000000000000000000000000006044820152606401610694565b600087815260086020908152604080832080548452600983528184208490558c84528184208b90558c9055600a825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600b82528083209290925590513381528a9173ffffffffffffffffffffffffffffffffffffffff8b16918a917f1fad793256b964b482b25642d6fc37842634e3f800528f0a943a4863078846ba910160405180910390a4505050505050505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061221882610ea3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff166122f55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610694565b600061230083610ea3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061236f57508373ffffffffffffffffffffffffffffffffffffffff1661235784610601565b73ffffffffffffffffffffffffffffffffffffffff16145b8061118e575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff1661118e565b8273ffffffffffffffffffffffffffffffffffffffff166123d082610ea3565b73ffffffffffffffffffffffffffffffffffffffff16146124595760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610694565b73ffffffffffffffffffffffffffffffffffffffff82166124e15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610694565b6124ec6000826121be565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812080546001929061252290849061318e565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080546001929061255d908490613162565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6125fd8282604051806020016040528060008152506127bc565b5050565b61260c8484846123b0565b61261884848484612845565b6114e55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610694565b6060816126ca57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156126f457806126de81613225565b91506126ed9050600a8361317a565b91506126ce565b60008167ffffffffffffffff81111561270f5761270f6132ff565b6040519080825280601f01601f191660200182016040528015612739576020820181803683370190505b5090505b841561118e5761274e60018361318e565b915061275b600a8661325e565b612766906030613162565b60f81b81838151811061277b5761277b6132d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506127b5600a8661317a565b945061273d565b6127c68383612a27565b6127d36000848484612845565b61081a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610694565b600073ffffffffffffffffffffffffffffffffffffffff84163b15612a1f576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906128bc903390899088908890600401613099565b602060405180830381600087803b1580156128d657600080fd5b505af1925050508015612924575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261292191810190612f95565b60015b6129d4573d808015612952576040519150601f19603f3d011682016040523d82523d6000602084013e612957565b606091505b5080516129cc5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610694565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061118e565b50600161118e565b73ffffffffffffffffffffffffffffffffffffffff8216612a8a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610694565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612afc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610694565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290612b32908490613162565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612bc1906131d1565b90600052602060002090601f016020900481019282612be35760008555612c47565b82601f10612c1a578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612c47565b82800160010185558215612c47579182015b82811115612c47578235825591602001919060010190612c2c565b50612c53929150612c57565b5090565b5b80821115612c535760008155600101612c58565b803573ffffffffffffffffffffffffffffffffffffffff81168114612c9057600080fd5b919050565b60008083601f840112612ca757600080fd5b50813567ffffffffffffffff811115612cbf57600080fd5b602083019150836020828501011115612cd757600080fd5b9250929050565b600060208284031215612cf057600080fd5b6115e782612c6c565b60008060408385031215612d0c57600080fd5b612d1583612c6c565b9150612d2360208401612c6c565b90509250929050565b600080600060608486031215612d4157600080fd5b612d4a84612c6c565b9250612d5860208501612c6c565b9150604084013590509250925092565b60008060008060808587031215612d7e57600080fd5b612d8785612c6c565b9350612d9560208601612c6c565b925060408501359150606085013567ffffffffffffffff80821115612db957600080fd5b818701915087601f830112612dcd57600080fd5b813581811115612ddf57612ddf6132ff565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612e2557612e256132ff565b816040528281528a6020848701011115612e3e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612e7557600080fd5b612e7e83612c6c565b91506020830135612e8e8161332e565b809150509250929050565b60008060008060608587031215612eaf57600080fd5b612eb885612c6c565b935060208501359250604085013567ffffffffffffffff811115612edb57600080fd5b612ee787828801612c95565b95989497509550505050565b60008060408385031215612f0657600080fd5b612f0f83612c6c565b946020939093013593505050565b600060208284031215612f2f57600080fd5b81516115e78161332e565b600060208284031215612f4c57600080fd5b5035919050565b600080600060608486031215612f6857600080fd5b83359250612d5860208501612c6c565b600060208284031215612f8a57600080fd5b81356115e78161333f565b600060208284031215612fa757600080fd5b81516115e78161333f565b60008060408385031215612fc557600080fd5b50508035926020909101359150565b600080600060408486031215612fe957600080fd5b83359250602084013567ffffffffffffffff81111561300757600080fd5b61301386828701612c95565b9497909650939450505050565b600081518084526130388160208601602086016131a5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000835161307c8184602088016131a5565b8351908301906130908183602088016131a5565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526130d86080830184613020565b9695505050505050565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b6020815260006115e76020830184613020565b6000821982111561317557613175613272565b500190565b600082613189576131896132a1565b500490565b6000828210156131a0576131a0613272565b500390565b60005b838110156131c05781810151838201526020016131a8565b838111156114e55750506000910152565b600181811c908216806131e557607f821691505b6020821081141561321f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561325757613257613272565b5060010190565b60008261326d5761326d6132a1565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461333c57600080fd5b50565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461333c57600080fdfea264697066735822122084b5e27d2ef687b621125e0036df6e0bfaa3223a4ec4990a4b86af4969963c2a64736f6c63430008060033",
  "devdoc": {
    "details": "Projects are represented as ERC-721's.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "challengeHandle(bytes32)": {
        "params": {
          "_handle": "The handle to challenge."
        }
      },
      "claimHandle(bytes32,address,uint256)": {
        "details": " Only a project's owner or operator can claim a handle for it.",
        "params": {
          "_handle": "The handle being claimed.",
          "_projectId": "The ID of the project to assign to the claimed handle.",
          "_transferAddress": "The address to which the handle has been transferred, which can now assign the handle to a project."
        }
      },
      "constructor": {
        "params": {
          "_operatorStore": "A contract storing operator assignments."
        }
      },
      "createFor(address,bytes32,string)": {
        "details": " Anyone can create a project on an owner's behalf.",
        "params": {
          "_handle": "A unique string to associate with the project that will resolve to its token ID.",
          "_metadataCid": "An IPFS CID hash where metadata about the project has been uploaded. An empty string is acceptable if no metadata is being provided.",
          "_owner": "The address that will be the owner of the project."
        },
        "returns": {
          "_0": "The token ID of the newly created project"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renewHandleOf(uint256)": {
        "details": " Only a project's owner or operator can renew its handle.",
        "params": {
          "_projectId": "The ID of the project to which the handle being renewed belongs. "
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setHandleOf(uint256,bytes32)": {
        "details": " Only a project's owner or operator can set its handle.",
        "params": {
          "_handle": "The new unique handle for the project.",
          "_projectId": "The ID of the project who's handle is being changed."
        }
      },
      "setMetadataCidOf(uint256,string)": {
        "details": " Only a project's owner or operator can set its URI.",
        "params": {
          "_metadataCid": "The new IPFS CID hash where metadata about the project has been uploaded.",
          "_projectId": "The ID of the project who's URI is being changed."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferHandleOf(uint256,address,bytes32)": {
        "details": " Only a project's owner or operator can transfer its handle.",
        "params": {
          "_newHandle": "The new unique handle for the project that will replace the transferred one.",
          "_projectId": "The ID of the project to transfer the handle from.",
          "_transferAddress": "The address that should be able to reallocate the transferred handle."
        },
        "returns": {
          "handle": "The handle that has been transferred."
        }
      }
    },
    "stateVariables": {
      "challengeExpiryOf": {
        "details": "A value of 0 means a handle isn't yet being challenged. _handle The handle to look for the challenge expiry of."
      },
      "count": {
        "details": "The count is incremented with each new project created.  The resulting ERC-721 token ID for each project is the newly incremented count value."
      },
      "handleOf": {
        "details": "Each project must have a handle. _projectId The ID of the project to which the handle belongs."
      },
      "metadataCidOf": {
        "details": "This is optional for each project. _projectId The ID of the project to which the URI belongs."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "challengeExpiryOf(bytes32)": {
        "notice": " The timestamps after which each handle can be openly claimed. "
      },
      "challengeHandle(bytes32)": {
        "notice": "Allows anyone to challenge a project's handle. After one year, the handle can be claimed by anyone if the challenge isn't answered by the handle's project. This can be used to make sure a handle belonging to a stale project isn't lost forever."
      },
      "claimHandle(bytes32,address,uint256)": {
        "notice": " Allows an address to claim an handle that has been transferred to it, and apply it to a project of theirs. A handle can also be claimed if it has been challenged and the challenge has succeeded."
      },
      "count()": {
        "notice": " The number of projects that have been created using this contract."
      },
      "createFor(address,bytes32,string)": {
        "notice": " Create a new project for the specified owner, which mints an NFT (ERC-721) into their wallet."
      },
      "handleOf(uint256)": {
        "notice": " The unique handle for each project."
      },
      "idFor(bytes32)": {
        "notice": " The ID of the project that each unique handle is currently referencing. _handle The handle from which the project ID can be referenced."
      },
      "metadataCidOf(uint256)": {
        "notice": " The IPFS CID for each project, which can be used to reference the project's metadata."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "renewHandleOf(uint256)": {
        "notice": "Allows a project to renew its handle, which cancels any pending challenges."
      },
      "setHandleOf(uint256,bytes32)": {
        "notice": " Allows a project owner to set the project's handle."
      },
      "setMetadataCidOf(uint256,string)": {
        "notice": " Allows a project owner to set the project's IPFS CID hash where metadata about the project has been uploaded."
      },
      "transferAddressFor(bytes32)": {
        "notice": " The address that can reallocate a handle that have been transferred to it. _handle The handle to look for the transfer address for."
      },
      "transferHandleOf(uint256,address,bytes32)": {
        "notice": " Allows a project owner to transfer its handle to another address."
      }
    },
    "notice": " Stores project ownership and identifying information.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1293,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1295,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1299,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1303,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1307,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1313,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 21956,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "count",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 21962,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "metadataCidOf",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 21968,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "handleOf",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 21974,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "idFor",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 21980,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "transferAddressFor",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 21986,
        "contract": "contracts/v2/JBProjects.sol:JBProjects",
        "label": "challengeExpiryOf",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}