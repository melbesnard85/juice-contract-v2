{
  "address": "0x5eaBF1D7A8c6942534cCb3489Ff221b2CBc0255b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBPrices",
          "name": "_prices",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "_fundingCycleStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBTokenStore",
          "name": "_tokenStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IJBPayDelegate",
          "name": "delegate",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "delegateMetadata",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct JBDidPayData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "DelegateDidPay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IJBRedemptionDelegate",
          "name": "delegate",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimAmount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct JBDidRedeemData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "DelegateDidRedeem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        }
      ],
      "name": "claimableOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentTotalOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycleStore",
      "outputs": [
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prices",
      "outputs": [
        {
          "internalType": "contract IJBPrices",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recordAddedBalanceFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        }
      ],
      "name": "recordDistributionFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "distributedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "recordMigration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preferClaimedTokensAndBeneficiary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_delegateMetadata",
          "type": "bytes"
        }
      ],
      "name": "recordPaymentFrom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_delegateMetadata",
          "type": "bytes"
        }
      ],
      "name": "recordRedemptionFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        }
      ],
      "name": "recordUsedAllowanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminal",
      "outputs": [
        {
          "internalType": "contract IJBTerminal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenStore",
      "outputs": [
        {
          "internalType": "contract IJBTokenStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedDistributionLimitOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedOverflowAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x254fb0059f49b28151b9a37c0ec3a927cf67bc60326320f1b37b6b79518b3c45",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x5eaBF1D7A8c6942534cCb3489Ff221b2CBc0255b",
    "transactionIndex": 1,
    "gasUsed": "3866036",
    "logsBloom": "0x
    "blockHash": "0x042b79a505a263c76adeef72f36938d4edc35f5fd974c0e20fd922f5413c9a8e",
    "transactionHash": "0x254fb0059f49b28151b9a37c0ec3a927cf67bc60326320f1b37b6b79518b3c45",
    "logs": [],
    "blockNumber": 9631509,
    "cumulativeGasUsed": "4178487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8E97174ad1527dace164d8248246c5b79A32A90F",
    "0x0a75928644d0E25Dc9340c33d0D946Fabef2046C",
    "0xf4326041BE30a4b7fc4db9Bb6286fef458F71fe2",
    "0x1bd2d2D0a5F5981636a4EC1b28195722E1D333bD",
    "0x9afc7156d8034A6Bbd4297D450f17cB4027BF9F5"
  ],
  "solcInputHash": "5f321124cef92f5734094814cf45799b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBPrices\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"_fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBTokenStore\",\"name\":\"_tokenStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IJBPayDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"delegateMetadata\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct JBDidPayData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"DelegateDidPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IJBRedemptionDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct JBDidRedeemData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"DelegateDidRedeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"claimableOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentTotalOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycleStore\",\"outputs\":[{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"contract IJBPrices\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recordAddedBalanceFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"}],\"name\":\"recordDistributionFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"recordMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preferClaimedTokensAndBeneficiary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_delegateMetadata\",\"type\":\"bytes\"}],\"name\":\"recordPaymentFrom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_delegateMetadata\",\"type\":\"bytes\"}],\"name\":\"recordRedemptionFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"}],\"name\":\"recordUsedAllowanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminal\",\"outputs\":[{\"internalType\":\"contract IJBTerminal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStore\",\"outputs\":[{\"internalType\":\"contract IJBTokenStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedDistributionLimitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedOverflowAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\" A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time. Inherits from: IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\",\"kind\":\"dev\",\"methods\":{\"claimableOverflowOf(uint256,uint256)\":{\"details\":\"If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\",\"params\":{\"_projectId\":\"The ID of the project to get a claimable amount for.\",\"_tokenCount\":\"The number of tokens to make the calculation with. \"},\"returns\":{\"_0\":\"The amount of overflowed ETH that can be claimed.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_fundingCycleStore\":\"A contract storing all funding cycle configurations.\",\"_prices\":\"A contract that exposes price feeds.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\",\"_tokenStore\":\"A contract that manages token minting and burning.\"}},\"currentOverflowOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get overflow for.\"},\"returns\":{\"_0\":\"The current amount of overflow that project has in this terminal.\"}},\"currentTotalOverflowOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get total overflow for.\"},\"returns\":{\"_0\":\"The current total amount of overflow that project has across all terminals.\"}},\"recordAddedBalanceFor(uint256,uint256)\":{\"details\":\"Only the associated payment terminal can record an added balance.\",\"params\":{\"_amount\":\"The amount added, in wei.\",\"_projectId\":\"The ID of the project to which the funds being added belong.\"},\"returns\":{\"fundingCycle\":\"The current funding cycle for the project.\"}},\"recordDistributionFor(uint256,uint256,uint256,uint256)\":{\"details\":\"Only the associated payment terminal can record a distribution.\",\"params\":{\"_amount\":\"The amount being distributed. Send as wei (18 decimals).\",\"_currency\":\"The expected currency of the `_amount` being tapped. This must match the project's current funding cycle's currency.\",\"_minReturnedWei\":\"The minimum number of wei that should be distributed.\",\"_projectId\":\"The ID of the project that is having funds distributed.\"},\"returns\":{\"distributedAmount\":\"The amount distribution.\",\"fundingCycle\":\"The funding cycle during which the withdrawal was made.\"}},\"recordMigration(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project being migrated.\"},\"returns\":{\"balance\":\"The project's current balance.\"}},\"recordPaymentFrom(address,uint256,uint256,uint256,uint256,string,bytes)\":{\"details\":\"Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution. Only the associated payment terminal can record a payment.\",\"params\":{\"_amount\":\"The amount that is being paid.\",\"_delegateMetadata\":\"Bytes to send along to the delegate, if one is used.\",\"_memo\":\"A memo that will be included in the published event.\",\"_minReturnedTokens\":\"The minimum number of tokens expected to be minted in return.\",\"_payer\":\"The original address that sent the payment to the terminal.\",\"_preferClaimedTokensAndBeneficiary\":\"Two properties are included in this packed uint256: The first bit contains the flag indicating whether the request prefers to issue tokens claimed as ERC-20s. The remaining bits contains the address that should receive benefits from the payment. This design is necessary two prevent a \\\"Stack too deep\\\" compiler error that comes up if the variables are declared seperately.\",\"_projectId\":\"The ID of the project being paid.\"},\"returns\":{\"fundingCycle\":\"The project's funding cycle during which payment was made.\",\"memo\":\"A memo that should be passed along to the emitted event.\",\"tokenCount\":\"The number of tokens that were minted.\",\"weight\":\"The weight according to which new token supply was minted.\"}},\"recordRedemptionFor(address,uint256,uint256,uint256,address,string,bytes)\":{\"details\":\" Only the associated payment terminal can record a redemption.\",\"params\":{\"_beneficiary\":\"The address that will benefit from the claimed amount.\",\"_delegateMetadata\":\"Bytes to send along to the delegate, if one is used.\",\"_holder\":\"The account that is having its tokens redeemed.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_minReturnedWei\":\"The minimum amount of wei expected in return.\",\"_projectId\":\"The ID of the project to which the tokens being redeemed belong.\",\"_tokenCount\":\"The number of tokens to redeemed.\"},\"returns\":{\"claimAmount\":\"The amount of wei claimed.\",\"fundingCycle\":\"The funding cycle during which the redemption was made.\",\"memo\":\"A memo that should be passed along to the emitted event.\"}},\"recordUsedAllowanceOf(uint256,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the allowance to use.\",\"_currency\":\"The currency of the `_amount` value. Must match the funding cycle's currency.\",\"_minReturnedWei\":\"The amount of wei that is expected to be withdrawn.\",\"_projectId\":\"The ID of the project to use the allowance of.\"},\"returns\":{\"fundingCycle\":\"The funding cycle during which the withdrawal is being made.\",\"withdrawnAmount\":\"The amount withdrawn.\"}}},\"stateVariables\":{\"usedDistributionLimitOf\":{\"details\":\" Increases as projects use their distribution limit. _projectId The ID of the project to get the used distribution limit of. _configuration The configuration of the during which the disitrution limit applies.\"},\"usedOverflowAllowanceOf\":{\"details\":\" Increases as projects use their allowance. _projectId The ID of the project to get the used overflow allowance of. _configuration The configuration of the during which the allowance applies.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"balanceOf(uint256)\":{\"notice\":\" The amount of ETH that each project has. _projectId The ID of the project to get the balance of.\"},\"claimFor(address)\":{\"notice\":\"Allows this store to be claimed by an address so that it recognized the address as its terminal.\"},\"claimableOverflowOf(uint256,uint256)\":{\"notice\":\"The amount of overflowed ETH that can be claimed by the specified number of tokens.\"},\"currentOverflowOf(uint256)\":{\"notice\":\"Gets the current overflowed amount in this terminal for a specified project.\"},\"currentTotalOverflowOf(uint256)\":{\"notice\":\"Gets the current overflowed amount for a specified project across all terminals.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"fundingCycleStore()\":{\"notice\":\" The contract storing all funding cycle configurations.\"},\"prices()\":{\"notice\":\" The contract that exposes price feeds.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"recordAddedBalanceFor(uint256,uint256)\":{\"notice\":\"Records newly added funds for the project.\"},\"recordDistributionFor(uint256,uint256,uint256,uint256)\":{\"notice\":\"Records newly distributed funds for a project.\"},\"recordMigration(uint256)\":{\"notice\":\"Records the migration of this terminal to another.\"},\"recordPaymentFrom(address,uint256,uint256,uint256,uint256,string,bytes)\":{\"notice\":\"Records newly contributed ETH to a project.\"},\"recordRedemptionFor(address,uint256,uint256,uint256,address,string,bytes)\":{\"notice\":\"Records newly redeemed tokens of a project.\"},\"recordUsedAllowanceOf(uint256,uint256,uint256,uint256)\":{\"notice\":\" Records newly used allowance funds of a project.\"},\"terminal()\":{\"notice\":\"The associated payment terminal for which this contract stores data.\"},\"tokenStore()\":{\"notice\":\" The contract that manages token minting and burning.\"},\"usedDistributionLimitOf(uint256,uint256)\":{\"notice\":\" The amount that a project has distributed from its limit during the current funding cycle. \"},\"usedOverflowAllowanceOf(uint256,uint256)\":{\"notice\":\" The amount of overflow that a project has used from its allowance during the current funding cycle configuration. \"}},\"notice\":\"This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBETHPaymentTerminalStore.sol\":\"JBETHPaymentTerminalStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"@paulrberg/contracts/math/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\",\"keccak256\":\"0xcf4e9eaa70b33ae4e949fb9c48ad13737dd807030e5555aca515dc555e10c9e4\",\"license\":\"UNLICENSED\"},\"contracts/v2/JBETHPaymentTerminalStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBTokenStore.sol';\\nimport './interfaces/IJBTerminal.sol';\\n\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\n/**\\n  @notice\\n  This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\\n\\n  @dev \\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time.\\n\\n  Inherits from:\\n\\n  IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules.\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\ncontract JBETHPaymentTerminalStore {\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  // A modifier only allowing the associated payment terminal to access the function.\\n  modifier onlyAssociatedPaymentTerminal() {\\n    require(msg.sender == address(terminal), '0x3a: UNAUTHORIZED');\\n    _;\\n  }\\n\\n  event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data);\\n\\n  event DelegateDidRedeem(IJBRedemptionDelegate indexed delegate, JBDidRedeemData data);\\n\\n  /** \\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable projects;\\n\\n  /** \\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable directory;\\n\\n  /** \\n    @notice \\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable fundingCycleStore;\\n\\n  /** \\n    @notice \\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable tokenStore;\\n\\n  /** \\n    @notice \\n    The contract that exposes price feeds.\\n  */\\n  IJBPrices public immutable prices;\\n\\n  /** \\n    @notice\\n    The associated payment terminal for which this contract stores data.\\n  */\\n  IJBTerminal public terminal;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The amount of ETH that each project has.\\n\\n    _projectId The ID of the project to get the balance of.\\n  */\\n  mapping(uint256 => uint256) public balanceOf;\\n\\n  /**\\n    @notice \\n    The amount of overflow that a project has used from its allowance during the current funding cycle configuration. \\n\\n    @dev \\n    Increases as projects use their allowance.\\n\\n    _projectId The ID of the project to get the used overflow allowance of.\\n    _configuration The configuration of the during which the allowance applies.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) public usedOverflowAllowanceOf;\\n\\n  /**\\n    @notice \\n    The amount that a project has distributed from its limit during the current funding cycle. \\n\\n    @dev \\n    Increases as projects use their distribution limit.\\n\\n    _projectId The ID of the project to get the used distribution limit of.\\n    _configuration The configuration of the during which the disitrution limit applies.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) public usedDistributionLimitOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount in this terminal for a specified project.\\n\\n    @param _projectId The ID of the project to get overflow for.\\n\\n    @return The current amount of overflow that project has in this terminal.\\n  */\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _overflowDuring(_projectId, _fundingCycle);\\n  }\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount for a specified project across all terminals.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n\\n    @return The current total amount of overflow that project has across all terminals.\\n  */\\n  function currentTotalOverflowOf(uint256 _projectId) external view returns (uint256) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _totalOverflowDuring(_projectId, _fundingCycle);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflowed ETH that can be claimed by the specified number of tokens.\\n\\n    @dev If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\\n\\n    @param _projectId The ID of the project to get a claimable amount for.\\n    @param _tokenCount The number of tokens to make the calculation with. \\n\\n    @return The amount of overflowed ETH that can be claimed.\\n  */\\n  function claimableOverflowOf(uint256 _projectId, uint256 _tokenCount)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _claimableOverflowOf(_projectId, fundingCycleStore.currentOf(_projectId), _tokenCount);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _prices A contract that exposes price feeds.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n  */\\n  constructor(\\n    IJBPrices _prices,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore\\n  ) {\\n    prices = _prices;\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Records newly contributed ETH to a project.\\n\\n    @dev\\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\\n\\n    @dev \\n    Only the associated payment terminal can record a payment.\\n\\n    @param _payer The original address that sent the payment to the terminal.\\n    @param _amount The amount that is being paid.\\n    @param _projectId The ID of the project being paid.\\n    @param _preferClaimedTokensAndBeneficiary Two properties are included in this packed uint256:\\n      The first bit contains the flag indicating whether the request prefers to issue tokens claimed as ERC-20s.\\n      The remaining bits contains the address that should receive benefits from the payment.\\n\\n      This design is necessary two prevent a \\\"Stack too deep\\\" compiler error that comes up if the variables are declared seperately.\\n    @param _minReturnedTokens The minimum number of tokens expected to be minted in return.\\n    @param _memo A memo that will be included in the published event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\\n\\n    @return fundingCycle The project's funding cycle during which payment was made.\\n    @return weight The weight according to which new token supply was minted.\\n    @return tokenCount The number of tokens that were minted.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordPaymentFrom(\\n    address _payer,\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _preferClaimedTokensAndBeneficiary,\\n    uint256 _minReturnedTokens,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 weight,\\n      uint256 tokenCount,\\n      string memory memo\\n    )\\n  {\\n    // Get a reference to the current funding cycle for the project.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The project must have a funding cycle configured.\\n    require(fundingCycle.number > 0, '0x3a: NOT_FOUND');\\n\\n    // Must not be paused.\\n    require(!fundingCycle.payPaused(), '0x3b: PAUSED');\\n\\n    // Save a reference to the delegate to use.\\n    IJBPayDelegate _delegate;\\n\\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\\n    if (fundingCycle.useDataSourceForPay()) {\\n      (weight, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().payParams(\\n        JBPayParamsData(\\n          _payer,\\n          _amount,\\n          fundingCycle.weight,\\n          fundingCycle.reservedRate(),\\n          address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\\n          _memo,\\n          _delegateMetadata\\n        )\\n      );\\n      // Otherwise use the funding cycle's weight\\n    } else {\\n      weight = fundingCycle.weight;\\n      memo = _memo;\\n    }\\n\\n    // Multiply the amount by the weight to determine the amount of tokens to mint.\\n    uint256 _weightedAmount = PRBMathUD60x18.mul(_amount, weight);\\n\\n    // Add the amount to the balance of the project if needed.\\n    if (_amount > 0) balanceOf[_projectId] = balanceOf[_projectId] + _amount;\\n\\n    if (_weightedAmount > 0)\\n      tokenCount = directory.controllerOf(_projectId).mintTokensOf(\\n        _projectId,\\n        _weightedAmount,\\n        address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\\n        'ETH received',\\n        (_preferClaimedTokensAndBeneficiary & 1) == 0,\\n        fundingCycle.reservedRate()\\n      );\\n\\n    // The token count for the beneficiary must be greater than or equal to the minimum expected.\\n    require(tokenCount >= _minReturnedTokens, '0x3c: INADEQUATE');\\n\\n    // If a delegate was returned by the data source, issue a callback to it.\\n    if (_delegate != IJBPayDelegate(address(0))) {\\n      JBDidPayData memory _data = JBDidPayData(\\n        _payer,\\n        _projectId,\\n        _amount,\\n        weight,\\n        tokenCount,\\n        payable(address(uint160(_preferClaimedTokensAndBeneficiary >> 1))),\\n        memo,\\n        _delegateMetadata\\n      );\\n      _delegate.didPay(_data);\\n      emit DelegateDidPay(_delegate, _data);\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Records newly distributed funds for a project.\\n\\n    @dev\\n    Only the associated payment terminal can record a distribution.\\n\\n    @param _projectId The ID of the project that is having funds distributed.\\n    @param _amount The amount being distributed. Send as wei (18 decimals).\\n    @param _currency The expected currency of the `_amount` being tapped. This must match the project's current funding cycle's currency.\\n    @param _minReturnedWei The minimum number of wei that should be distributed.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal was made.\\n    @return distributedAmount The amount distribution.\\n  */\\n  function recordDistributionFor(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The funding cycle must not be configured to have distributions paused.\\n    require(!fundingCycle.distributionsPaused(), '0x3e: PAUSED');\\n\\n    // Make sure the currencies match.\\n    require(\\n      _currency ==\\n        directory.controllerOf(_projectId).currencyOf(\\n          _projectId,\\n          fundingCycle.configuration,\\n          terminal\\n        ),\\n      '0x3f: UNEXPECTED_CURRENCY'\\n    );\\n\\n    // The new total amount that has been distributed during this funding cycle.\\n    uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[_projectId][fundingCycle.number] +\\n      _amount;\\n\\n    // Amount must be within what is still distributable.\\n    require(\\n      _newUsedDistributionLimitOf <=\\n        directory.controllerOf(_projectId).distributionLimitOf(\\n          _projectId,\\n          fundingCycle.configuration,\\n          terminal\\n        ),\\n      '0x1b: LIMIT_REACHED'\\n    );\\n\\n    // Convert the amount to wei.\\n    // A currency of 0 should be interpreted as whatever the currency being distributed is.\\n    distributedAmount = _currency == 0\\n      ? _amount\\n      : PRBMathUD60x18.div(_amount, prices.priceFor(_currency, JBCurrencies.ETH));\\n\\n    // The amount being distributed must be available.\\n    require(distributedAmount <= balanceOf[_projectId], '0x40: INSUFFICIENT_FUNDS');\\n\\n    // The amount being distributed must be at least as much as was expected.\\n    require(_minReturnedWei <= distributedAmount, '0x41: INADEQUATE');\\n\\n    // Store the new amount.\\n    usedDistributionLimitOf[_projectId][fundingCycle.number] = _newUsedDistributionLimitOf;\\n\\n    // Removed the distributed funds from the project's balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] - distributedAmount;\\n  }\\n\\n  /** \\n    @notice \\n    Records newly used allowance funds of a project.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount of the allowance to use.\\n    @param _currency The currency of the `_amount` value. Must match the funding cycle's currency.\\n    @param _minReturnedWei The amount of wei that is expected to be withdrawn.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal is being made.\\n    @return withdrawnAmount The amount withdrawn.\\n  */\\n  function recordUsedAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Make sure the currencies match.\\n    require(\\n      _currency ==\\n        directory.controllerOf(_projectId).currencyOf(\\n          _projectId,\\n          fundingCycle.configuration,\\n          terminal\\n        ),\\n      '0x42: UNEXPECTED_CURRENCY'\\n    );\\n\\n    // Convert the amount to wei.\\n    // A currency of 0 should be interpreted as whatever the currency being withdrawn is.\\n    withdrawnAmount = _currency == 0\\n      ? _amount\\n      : PRBMathUD60x18.div(_amount, prices.priceFor(_currency, JBCurrencies.ETH));\\n\\n    // There must be sufficient allowance available.\\n    require(\\n      withdrawnAmount <=\\n        directory.controllerOf(_projectId).overflowAllowanceOf(\\n          _projectId,\\n          fundingCycle.configuration,\\n          terminal\\n        ) -\\n          usedOverflowAllowanceOf[_projectId][fundingCycle.configuration],\\n      '0x43: NOT_ALLOWED'\\n    );\\n\\n    // The amount being withdrawn must be available.\\n    require(withdrawnAmount <= balanceOf[_projectId], '0x44: INSUFFICIENT_FUNDS');\\n\\n    // The amount being withdrawn must be at least as much as was expected.\\n    require(_minReturnedWei <= withdrawnAmount, '0x45: INADEQUATE');\\n\\n    // Store the decremented value.\\n    usedOverflowAllowanceOf[_projectId][fundingCycle.configuration] =\\n      usedOverflowAllowanceOf[_projectId][fundingCycle.configuration] +\\n      withdrawnAmount;\\n\\n    // Update the project's balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] - withdrawnAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly redeemed tokens of a project.\\n\\n    @dev \\n    Only the associated payment terminal can record a redemption.\\n\\n    @param _holder The account that is having its tokens redeemed.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of tokens to redeemed.\\n    @param _minReturnedWei The minimum amount of wei expected in return.\\n    @param _beneficiary The address that will benefit from the claimed amount.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\\n\\n    @return fundingCycle The funding cycle during which the redemption was made.\\n    @return claimAmount The amount of wei claimed.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordRedemptionFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 claimAmount,\\n      string memory memo\\n    )\\n  {\\n    // The holder must have the specified number of the project's tokens.\\n    require(tokenStore.balanceOf(_holder, _projectId) >= _tokenCount, '0x46: INSUFFICIENT_TOKENS');\\n\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    require(!fundingCycle.redeemPaused(), '0x47: PAUSED');\\n\\n    // Save a reference to the delegate to use.\\n    IJBRedemptionDelegate _delegate;\\n\\n    // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\\n    if (fundingCycle.useDataSourceForRedeem()) {\\n      (claimAmount, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().redeemParams(\\n        JBRedeemParamsData(\\n          _holder,\\n          _tokenCount,\\n          fundingCycle.redemptionRate(),\\n          fundingCycle.ballotRedemptionRate(),\\n          _beneficiary,\\n          _memo,\\n          _delegateMetadata\\n        )\\n      );\\n    } else {\\n      claimAmount = _claimableOverflowOf(_projectId, fundingCycle, _tokenCount);\\n      memo = _memo;\\n    }\\n\\n    // The amount being claimed must be within the project's balance.\\n    require(claimAmount <= balanceOf[_projectId], '0x48: INSUFFICIENT_FUNDS');\\n\\n    // The amount being claimed must be at least as much as was expected.\\n    require(claimAmount >= _minReturnedWei, '0x49: INADEQUATE');\\n\\n    // Redeem the tokens, which burns them.\\n    if (_tokenCount > 0)\\n      directory.controllerOf(_projectId).burnTokensOf(\\n        _holder,\\n        _projectId,\\n        _tokenCount,\\n        'Redeem for ETH',\\n        true\\n      );\\n\\n    // Remove the redeemed funds from the project's balance.\\n    if (claimAmount > 0) balanceOf[_projectId] = balanceOf[_projectId] - claimAmount;\\n\\n    // If a delegate was returned by the data source, issue a callback to it.\\n    if (_delegate != IJBRedemptionDelegate(address(0))) {\\n      JBDidRedeemData memory _data = JBDidRedeemData(\\n        _holder,\\n        _projectId,\\n        _tokenCount,\\n        claimAmount,\\n        _beneficiary,\\n        memo,\\n        _delegateMetadata\\n      );\\n      _delegate.didRedeem(_data);\\n      emit DelegateDidRedeem(_delegate, _data);\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Records newly added funds for the project.\\n\\n    @dev\\n    Only the associated payment terminal can record an added balance.\\n\\n    @param _projectId The ID of the project to which the funds being added belong.\\n    @param _amount The amount added, in wei.\\n\\n    @return fundingCycle The current funding cycle for the project.\\n  */\\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount)\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Increment the balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] + _amount;\\n  }\\n\\n  /** \\n    @notice\\n    Records the migration of this terminal to another.\\n\\n    @param _projectId The ID of the project being migrated.\\n\\n    @return balance The project's current balance.\\n  */\\n  function recordMigration(uint256 _projectId)\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (uint256 balance)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    require(_fundingCycle.terminalMigrationAllowed(), '0x4a: NOT_ALLOWED');\\n\\n    // Return the current balance.\\n    balance = balanceOf[_projectId];\\n\\n    // Set the balance to 0.\\n    balanceOf[_projectId] = 0;\\n  }\\n\\n  /** \\n    @notice\\n    Allows this store to be claimed by an address so that it recognized the address as its terminal.\\n  */\\n  function claimFor(IJBTerminal _terminal) external {\\n    // This store can only be claimed once.\\n    require(terminal == IJBTerminal(address(0)), '0x4b: ALREADY_CLAIMED');\\n\\n    // Set the terminal.\\n    terminal = _terminal;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    See docs for `claimableOverflowOf`\\n  */\\n  function _claimableOverflowOf(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _tokenCount\\n  ) private view returns (uint256) {\\n    // Get the amount of current overflow.\\n    // Use the local overflow if the funding cycle specifies that it should be used. Otherwise use the project's total overflow across all of its terminals.\\n    uint256 _currentOverflow = _fundingCycle.shouldUseLocalBalanceForRedemptions()\\n      ? _overflowDuring(_projectId, _fundingCycle)\\n      : _totalOverflowDuring(_projectId, _fundingCycle);\\n\\n    // If there is no overflow, nothing is claimable.\\n    if (_currentOverflow == 0) return 0;\\n\\n    // Get the total number of tokens in circulation.\\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get the number of reserved tokens the project has.\\n    uint256 _reservedTokenAmount = directory.controllerOf(_projectId).reservedTokenBalanceOf(\\n      _projectId,\\n      _fundingCycle.reservedRate()\\n    );\\n\\n    // If there are reserved tokens, add them to the total supply.\\n    if (_reservedTokenAmount > 0) _totalSupply = _totalSupply + _reservedTokenAmount;\\n\\n    // If the amount being redeemed is the the total supply, return the rest of the overflow.\\n    if (_tokenCount == _totalSupply) return _currentOverflow;\\n\\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) ==\\n      JBBallotState.Active\\n      ? _fundingCycle.ballotRedemptionRate()\\n      : _fundingCycle.redemptionRate();\\n\\n    // If the redemption rate is 0, nothing is claimable.\\n    if (_redemptionRate == 0) return 0;\\n\\n    // Get a reference to the linear proportion.\\n    uint256 _base = PRBMath.mulDiv(_currentOverflow, _tokenCount, _totalSupply);\\n\\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\\n    if (_redemptionRate == 10000) return _base;\\n    return\\n      PRBMath.mulDiv(\\n        _base,\\n        _redemptionRate + PRBMath.mulDiv(_tokenCount, 10000 - _redemptionRate, _totalSupply),\\n        10000\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of ETH changes in relation to the currency being used to measure the distribution limit.\\n\\n    @param _projectId The ID of the project to get overflow for.\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n\\n    @return overflow The overflow of funds.\\n  */\\n  function _overflowDuring(uint256 _projectId, JBFundingCycle memory _fundingCycle)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // Get the current balance of the project.\\n    uint256 _balanceOf = balanceOf[_projectId];\\n\\n    // If there's no balance, there's no overflow.\\n    if (_balanceOf == 0) return 0;\\n\\n    // Get a reference to the amount still withdrawable during the funding cycle.\\n    uint256 _distributionRemaining = directory.controllerOf(_projectId).distributionLimitOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      terminal\\n    ) - usedDistributionLimitOf[_projectId][_fundingCycle.number];\\n\\n    // Get a reference to the current funding cycle's currency for this terminal.\\n    uint256 _currency = directory.controllerOf(_projectId).currencyOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      terminal\\n    );\\n\\n    // Convert the _distributionRemaining to ETH.\\n    uint256 _ethDistributionRemaining = _distributionRemaining == 0\\n      ? 0 // Get the current price of ETH. // A currency of 0 should be interpreted as whatever the currency being withdrawn is.\\n      : _currency == 0\\n      ? _distributionRemaining\\n      : PRBMathUD60x18.div(_distributionRemaining, prices.priceFor(_currency, JBCurrencies.ETH));\\n\\n    // Overflow is the balance of this project minus the amount that can still be distributed.\\n    return _balanceOf < _ethDistributionRemaining ? 0 : _balanceOf - _ethDistributionRemaining;\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing across all terminals when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of ETH changes in relation to the currency being used to measure the distribution limits.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n\\n    @return overflow The overflow of funds.\\n  */\\n  function _totalOverflowDuring(uint256 _projectId, JBFundingCycle memory _fundingCycle)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // Get a reference to the project's terminals.\\n    IJBTerminal[] memory _terminals = directory.terminalsOf(_projectId);\\n\\n    // Keep a reference to the current eth balance of the project across all terminals, and the current eth distribution limit across all terminals.\\n    uint256 _ethBalanceOf;\\n    uint256 _ethDistributionLimitRemaining;\\n\\n    for (uint256 _i = 0; _i < _terminals.length; _i++) {\\n      _ethBalanceOf = _ethBalanceOf + _terminals[_i].ethBalanceOf(_projectId);\\n\\n      // Get a reference to the amount still withdrawable during the funding cycle.\\n      uint256 _distributionRemaining = _terminals[_i].remainingDistributionLimitOf(\\n        _projectId,\\n        _fundingCycle.configuration,\\n        _fundingCycle.number\\n      );\\n\\n      // Get a reference to the current funding cycle's currency for this terminal.\\n      uint256 _currency = directory.controllerOf(_projectId).currencyOf(\\n        _projectId,\\n        _fundingCycle.configuration,\\n        _terminals[_i]\\n      );\\n\\n      // Convert the _distributionRemaining to ETH.\\n      _ethDistributionLimitRemaining =\\n        _ethDistributionLimitRemaining +\\n        (\\n          _distributionRemaining == 0\\n            ? 0 // Get the current price of ETH. // A currency of 0 should be interpreted as whatever the currency being withdrawn is.\\n            : _currency == 0\\n            ? _distributionRemaining\\n            : PRBMathUD60x18.div(\\n              _distributionRemaining,\\n              prices.priceFor(_currency, JBCurrencies.ETH)\\n            )\\n        );\\n    }\\n\\n    // Overflow is the balance of this project minus the amount that can still be distributed.\\n    return\\n      _ethBalanceOf < _ethDistributionLimitRemaining\\n        ? 0\\n        : _ethBalanceOf - _ethDistributionLimitRemaining;\\n  }\\n}\\n\",\"keccak256\":\"0xae7de334a4248942da887afabb6acd34d2a00fa24abad1d044097cda83d8075a\",\"license\":\"MIT\"},\"contracts/v2/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed,\\n  Standby\\n}\\n\",\"keccak256\":\"0x6fad35e4775acd47bfa66436a633f9632a81c79af3cceed1622b7e8f96b9f0a1\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function currencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e4385f3bc7b2c078211344a393f6f4c3256ee755d334c03e93d0483621bcfe3\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0xcc2fa4db1c2684f106e0353fad26b45fb0dc09027d3509d40d5e9fce84a07148\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n}\\n\",\"keccak256\":\"0xe689c3a2c9e75d368de61b3344df96015bb4421b264d98056d8aa351e8faf739\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x5ef8969ff2fc6c58e521f1f930e7fcf0330a421d1643d9e88ea2b30e137df553\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xec7fcab267fc1227d983c9420373beece78a2a4243c44bfab01d12262818ab8e\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, AggregatorV3Interface feed);\\n\\n  function TARGET_DECIMALS() external returns (uint256);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\\n\\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2309ad881e3851c6d002dfa283e562f51327ef28243ef9bf09365df3d98eda39\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBTerminal.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    bytes32 indexed handle,\\n    string uri,\\n    address caller\\n  );\\n\\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n  event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n  event TransferHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    bytes32 newHandle,\\n    address caller\\n  );\\n\\n  event ClaimHandle(\\n    uint256 indexed projectId,\\n    address indexed transferAddress,\\n    bytes32 indexed handle,\\n    address caller\\n  );\\n\\n  event ChallengeHandle(\\n    bytes32 indexed handle,\\n    uint256 indexed projectId,\\n    uint256 challengeExpiry,\\n    address caller\\n  );\\n\\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataCidOf(uint256 _projectId) external view returns (string memory);\\n\\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\\n\\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n  function createFor(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _metadataCid\\n  ) external returns (uint256 id);\\n\\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\\n\\n  function setMetadataCidOf(uint256 _projectId, string calldata _metadataCid) external;\\n\\n  function transferHandleOf(\\n    uint256 _projectId,\\n    address _transferAddress,\\n    bytes32 _newHandle\\n  ) external returns (bytes32 _handle);\\n\\n  function claimHandle(\\n    bytes32 _handle,\\n    address _for,\\n    uint256 _projectId\\n  ) external;\\n\\n  function challengeHandle(bytes32 _handle) external;\\n\\n  function renewHandleOf(uint256 _projectId) external;\\n}\\n\",\"keccak256\":\"0xa437875cce9e3e9da493b5109635a3f843a4de0ec08dfeedb68ad344bb14720f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xbfeeb100e450c3cf5565a53a34a693f4963f09136bfea7e050efc3f8e1dea095\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBVault.sol';\\n\\ninterface IJBTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xe2f62536c63548587b291b2c37fd474e835df9a2a5829c7c49a3d5d280c7a2c9\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(uint256 _projectId, address _account) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xbe143668f21d389bb89e1a3a4d50a5fd21fac9c13f53b92fe96d672c4aa4d8cd\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unclaimedTokenBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    address indexed owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7beba1de2a273359c50194b00ffc083b010e80e3478bfa265a6a2403b766957f\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBVault {\\n  event Deposit(uint256 indexed projectId, uint256 amount, address caller);\\n  event Withdraw(uint256 indexed projectId, uint256 amount, address to, address caller);\\n\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 _projectId, uint256 _amount) external payable;\\n\\n  function withdraw(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf88018441399e9abfbcf9cb0fca64bde08a25d98015823a78c9cc64deca7a972\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBCurrencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBCurrencies {\\n  uint256 public constant ETH = 1;\\n  uint256 public constant USD = 2;\\n}\\n\",\"keccak256\":\"0x3077e365b09d45e3a82d6710bfda7323a0366c3cafc318ea9dc442a1a93036d7\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return 10000 - uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return 10000 - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 56) & 1) == 0;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 57) & 1) == 0;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 58) & 1) == 0;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 59) & 1) == 0;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 60) & 1) == 0;\\n  }\\n\\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 61) & 1) == 0;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 62) & 1) == 0;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 63) & 1) == 0;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 64) & 1) == 0;\\n  }\\n\\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 65) & 1) == 0;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 66) & 1 == 0;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 67) & 1 == 0;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bytes specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the first 8 bytes.\\n    packed = 1;\\n    // reserved rate in bits 8-23.\\n    packed |= _metadata.reservedRate << 8;\\n    // bonding curve in bits 24-39.\\n    // Redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (10000 - _metadata.redemptionRate) << 24;\\n    // reconfiguration bonding curve rate in bits 40-55.\\n    // Redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (10000 - _metadata.ballotRedemptionRate) << 50;\\n    // pause pay in bit 56.\\n    packed |= (_metadata.pausePay ? 1 : 0) << 56;\\n    // pause tap in bit 57.\\n    packed |= (_metadata.pauseDistributions ? 1 : 0) << 57;\\n    // pause redeem in bit 58.\\n    packed |= (_metadata.pauseRedeem ? 1 : 0) << 58;\\n    // pause mint in bit 59.\\n    packed |= (_metadata.pauseMint ? 1 : 0) << 59;\\n    // pause mint in bit 60.\\n    packed |= (_metadata.pauseBurn ? 1 : 0) << 60;\\n    // pause change token in bit 61.\\n    packed |= (_metadata.allowChangeToken ? 1 : 0) << 61;\\n    // allow terminal migration in bit 62.\\n    packed |= (_metadata.allowTerminalMigration ? 1 : 0) << 62;\\n    // allow controller migration in bit 63.\\n    packed |= (_metadata.allowControllerMigration ? 1 : 0) << 63;\\n    // hold fees in bit 64.\\n    packed |= (_metadata.holdFees ? 1 : 0) << 64;\\n    // useLocalBalanceForRedemptions in bit 65.\\n    packed |= (_metadata.useLocalBalanceForRedemptions ? 1 : 0) << 65;\\n    // use pay data source in bit 66.\\n    packed |= (_metadata.useDataSourceForPay ? 1 : 0) << 66;\\n    // use redeem data source in bit 67.\\n    packed |= (_metadata.useDataSourceForRedeem ? 1 : 0) << 67;\\n    // data source address in bits 68-227.\\n    packed |= uint160(address(_metadata.dataSource)) << 68;\\n  }\\n}\\n\",\"keccak256\":\"0xdd238b8cfa5cf605094fe506ce8eb8e89ddaa99ee18bda41d94600a266c66a4a\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_HANDLE = 6;\\n  uint256 public constant SET_METADATA_CID = 7;\\n  uint256 public constant CLAIM_HANDLE = 8;\\n  uint256 public constant RENEW_HANDLE = 9;\\n  uint256 public constant ISSUE = 10;\\n  uint256 public constant CHANGE_TOKEN = 11;\\n  uint256 public constant MINT = 12;\\n  uint256 public constant BURN = 13;\\n  uint256 public constant TRANSFER = 14;\\n  uint256 public constant REQUIRE_CLAIM = 15;\\n  uint256 public constant SET_CONTROLLER = 16;\\n  uint256 public constant ADD_TERMINALS = 17;\\n  uint256 public constant REMOVE_TERMINAL = 18;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 19;\\n  uint256 public constant USE_ALLOWANCE = 20;\\n  uint256 public constant SET_SPLITS = 21;\\n}\\n\",\"keccak256\":\"0xb1ef002f9fe9aa4ebd36d678765e9a3d607b99ada900660e6f5d45b7e17c0053\",\"license\":\"MIT\"},\"contracts/v2/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/v2/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of ETH that was paid.\\n  uint256 amount;\\n  // The weight that was used for minting tokens.\\n  uint256 weight;\\n  // The number of tokens minted.\\n  uint256 tokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0x3fabe50ca2d00e24420061165124d1f43d8489605d84d0ab0a942a7ba8b02101\",\"license\":\"MIT\"},\"contracts/v2/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The amount of ETH being claimed.\\n  uint256 claimAmount;\\n  // The address to which the ETH will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x9415d894e263a90d824a1cde4a6f17d1a325f5183226e02b2e2318afd6103e27\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  // A duration has a minimum of 1000 seconds to prevent extractive miner behavior, see https://ethereum.stackexchange.com/questions/413/can-a-contract-safely-rely-on-block-timestamp.\\n  uint256 duration;\\n  // A number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  // If the number is 1000000001, the funding cycle is non-recurrin so there cannot be a next cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x34ff85de4898979b20db9c968c538588cc7acde263afc81c0b29ac2dbd821d4c\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // A number from 0-1000000001 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  // If the number is 1000000001, an non-recurring funding cycle will get made.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x448584648a8baf62f56e0cc5a434c793d172453b969360f7fdb31e612b28eab4\",\"license\":\"MIT\"},\"contracts/v2/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of 200.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of 200.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of 200.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's local terminal balance instead of the project's balance held in all terminals.\\n  bool useLocalBalanceForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x447c3aa102dfd7260b7a59c9c97fde5fe45cf694cb7923386869f925723be13c\",\"license\":\"MIT\"},\"contracts/v2/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBPayParamsData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ETH amount of the payment.\\n  uint256 amount;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the payment.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0xa8e66f087a787ef56d6c533a9e4ec871954d25642891aef48b1b8a824c07f1c1\",\"license\":\"MIT\"},\"contracts/v2/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBRedeemParamsData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The proposed number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0xa7d2c92c504a81dbf35f8620129931517de9742e0644d13dcd7d8403e71569ae\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding towards zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc6b47a506b52834c45984320f3a74bfe13a433806471cdd5570105e233c1337\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620047933803806200479383398101604081905262000035916200006d565b6001600160601b0319606095861b81166101005293851b841660805291841b831660a052831b821660c05290911b1660e05262000106565b600080600080600060a086880312156200008657600080fd5b85516200009381620000ed565b6020870151909550620000a681620000ed565b6040870151909450620000b981620000ed565b6060870151909350620000cc81620000ed565b6080870151909250620000df81620000ed565b809150509295509295909350565b6001600160a01b03811681146200010357600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c61457c6200021760003960008181610319015281816107c4015281816119d70152818161337b015261379301526000818161023c01528181611e4c0152612b760152600081816101f0015281816104fc01528181610cc90152818161149501528181611bf701528181611f5e015281816125ea0152818161278801528181612924015281816129f00152612de20152600081816102f2015281816105be0152818161089c01528181611003015281816115c9015281816117d0015281816122cd01528181612c4f01528181612f59015281816131d201528181613465015261360001526000610276015261457c6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80639cc7f708116100cd578063ddeae03311610081578063e7c8e3e311610066578063e7c8e3e31461038e578063f45d0bc6146103ae578063f548c86f146103ce57600080fd5b8063ddeae03314610366578063ddfd414a1461037b57600080fd5b8063c41c2f24116100b2578063c41c2f24146102ed578063d3419bf314610314578063dcc3041b1461033b57600080fd5b80639cc7f708146102ba578063c13d5070146102da57600080fd5b8063557e7155116101245780636bb6a5ad116101095780636bb6a5ad1461025e5780638b79543c146102715780639225bf1a1461029857600080fd5b8063557e7155146101eb578063619306301461023757600080fd5b8063115cdd8e146101565780631837d6e31461019457806329c705c7146101b55780634d9cd5ac146101d8575b600080fd5b610181610164366004613e0d565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101a76101a2366004613e2f565b6103e1565b60405161018b929190614115565b6101c86101c3366004613b67565b610bae565b60405161018b9493929190614231565b6101a76101e6366004613e2f565b61137f565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018b565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b61018161026c366004613d5a565b611b43565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b6102ab6102a6366004613ac1565b611d15565b60405161018b9392919061419d565b6101816102c8366004613d5a565b60016020526000908152604090205481565b6101816102e8366004613d5a565b6125a1565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b610181610349366004613e0d565b600360209081526000928352604080842090915290825290205481565b610379610374366004613c9c565b612678565b005b610181610389366004613d5a565b61273f565b6103a161039c366004613e0d565b61280f565b60405161018b919061409b565b6000546102129073ffffffffffffffffffffffffffffffffffffffff1681565b6101816103dc366004613e0d565b6129e8565b61044660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146104cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064015b60405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190613cda565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018890529092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190613c7f565b60208301516000546040517f3732d12c000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690633732d12c9060640160206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190613d73565b841461076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307834323a20554e45585045435445445f43555252454e43590000000000000060448201526064016104c4565b8315610849576040517ff48cc101000000000000000000000000000000000000000000000000000000008152600481018590526001602482015261084490869073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044015b60206040518083038186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190613d73565b612aa9565b61084b565b845b6000878152600260209081526040808320868301518452909152908190205490517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101899052919250907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b9190613c7f565b60208401516000546040517f5172a2bf000000000000000000000000000000000000000000000000000000008152600481018b9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690635172a2bf9060640160206040518083038186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190613d73565b6109ed91906143b6565b811115610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307834333a204e4f545f414c4c4f57454400000000000000000000000000000060448201526064016104c4565b600086815260016020526040902054811115610ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307834343a20494e53554646494349454e545f46554e4453000000000000000060448201526064016104c4565b80831115610b38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307834353a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b6000868152600260209081526040808320858301518452909152902054610b6090829061439e565b6000878152600260209081526040808320868301518452825280832093909355888252600190522054610b949082906143b6565b600096875260016020526040909620959095559492505050565b610c1360405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008054819060609073ffffffffffffffffffffffffffffffffffffffff163314610c9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190613cda565b8051909450610dc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307833613a204e4f545f464f554e44000000000000000000000000000000000060448201526064016104c4565b61010084015160381c600116610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f307833623a20504155534544000000000000000000000000000000000000000060448201526064016104c4565b61010084015160009060421c600116610f855761010085015160441c73ffffffffffffffffffffffffffffffffffffffff1663b64a835b6040518060e001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020018860a001518152602001610eba89610100015161ffff60089190911c1690565b815260200160018d901c73ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152506040518263ffffffff1660e01b8152600401610f0591906142cc565b60006040518083038186803b158015610f1d57600080fd5b505afa158015610f31573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f779190810190613d8c565b985091955092509050610f90565b8460a0015193508691505b6000610f9c8c86612abe565b90508b15610fce5760008b815260016020526040902054610fbe908d9061439e565b60008c8152600160205260409020555b80156111c0576040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190613c7f565b73ffffffffffffffffffffffffffffffffffffffff1663369e6f348c8360018e811c908f16156110ce8c610100015161ffff60089190911c1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526004810195909552602485019390935273ffffffffffffffffffffffffffffffffffffffff909116604484015260c06064840152600c60c48401527f455448207265636569766564000000000000000000000000000000000000000060e48401521515608483015260a482015261010401602060405180830381600087803b15801561118557600080fd5b505af1158015611199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bd9190613d73565b93505b8884101561122a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307833633a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b73ffffffffffffffffffffffffffffffffffffffff82161561136f5760006040518061010001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018e815260200187815260200186815260200160018d901c73ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018981525090508273ffffffffffffffffffffffffffffffffffffffff16639dd959ac826040518263ffffffff1660e01b81526004016112ed9190613f2e565b600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f15ee90cb2deade4db341563d03958a7ca23fdde537483702ed7a8697ab14599e826040516113659190613f2e565b60405180910390a2505b5050975097509750979350505050565b6113e460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115259190613cda565b61010081015190925060391c60011661159a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f307833653a20504155534544000000000000000000000000000000000000000060448201526064016104c4565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190613c7f565b60208301516000546040517f3732d12c000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690633732d12c9060640160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190613d73565b8414611778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307833663a20554e45585045435445445f43555252454e43590000000000000060448201526064016104c4565b60008681526003602090815260408083208551845290915281205461179e90879061439e565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018990529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190613c7f565b60208401516000546040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018b9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690635578dfd79060640160206040518083038186803b1580156118df57600080fd5b505afa1580156118f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119179190613d73565b811115611980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f307831623a204c494d49545f524541434845440000000000000000000000000060448201526064016104c4565b8415611a0b576040517ff48cc1010000000000000000000000000000000000000000000000000000000081526004810186905260016024820152611a0690879073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044016107ef565b611a0d565b855b600088815260016020526040902054909250821115611a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307834303a20494e53554646494349454e545f46554e4453000000000000000060448201526064016104c4565b81841115611af2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307834313a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b60008781526003602090815260408083208651845282528083208490558983526001909152902054611b259083906143b6565b60009788526001602052604090972096909655909590945092505050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611bc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611c4f57600080fd5b505afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c879190613cda565b610100810151909150603e1c60011615611cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307834613a204e4f545f414c4c4f57454400000000000000000000000000000060448201526064016104c4565b50506000908152600160205260408120805491905590565b611d7a60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000805460609073ffffffffffffffffffffffffffffffffffffffff163314611dff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b905289917f00000000000000000000000000000000000000000000000000000000000000009091169062fdd58e9060440160206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec79190613d73565b1015611f2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307834363a20494e53554646494349454e545f544f4b454e530000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611fb657600080fd5b505afa158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190613cda565b610100810151909350603a1c600116612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f307834373a20504155534544000000000000000000000000000000000000000060448201526064016104c4565b61010083015160009060431c6001166121a55761010084015160441c73ffffffffffffffffffffffffffffffffffffffff166331168a2b6040518060e001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020016120d088612aca565b81526020016120de88612ae7565b81526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152506040518263ffffffff1660e01b815260040161212591906142cc565b60006040518083038186803b15801561213d57600080fd5b505afa158015612151573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526121979190810190613d8c565b9750919450925090506121b6565b6121b08a858b612b04565b92508591505b60008a81526001602052604090205483111561222e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307834383a20494e53554646494349454e545f46554e4453000000000000000060448201526064016104c4565b87831015612298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307834393a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b8815612429576040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018b90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561232457600080fd5b505afa158015612338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235c9190613c7f565b6040517f1665bc0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d81166004830152602482018d9052604482018c905260a06064830152600e60a48301527f52656465656d20666f722045544800000000000000000000000000000000000060c4830152600160848301529190911690631665bc0f9060e401600060405180830381600087803b15801561241057600080fd5b505af1158015612424573d6000803e3d6000fd5b505050505b82156124595760008a8152600160205260409020546124499084906143b6565b60008b8152600160205260409020555b73ffffffffffffffffffffffffffffffffffffffff8116156125935760006040518060e001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b81526020018581526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018781525090508173ffffffffffffffffffffffffffffffffffffffff16631f1dfa32826040518263ffffffff1660e01b81526004016125119190613ff7565b600060405180830381600087803b15801561252b57600080fd5b505af115801561253f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167ff11663550d7ff25b1a5d208bdd025d7b1001a24cfcd134ccad18fabe158cdcee826040516125899190613ff7565b60405180910390a2505b509750975097945050505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b15801561262d57600080fd5b505afa158015612641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126659190613cda565b90506126718382612f10565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16156126f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f307834623a20414c52454144595f434c41494d4544000000000000000000000060448201526064016104c4565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b1580156127cb57600080fd5b505afa1580156127df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128039190613cda565b905061267183826133fd565b61287460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146128f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561297c57600080fd5b505afa158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b49190613cda565b6000848152600160205260409020549091506129d190839061439e565b600093845260016020526040909320929092555090565b6000612aa0837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343a266c2866040518263ffffffff1660e01b8152600401612a4991815260200190565b6101206040518083038186803b158015612a6257600080fd5b505afa158015612a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9a9190613cda565b84612b04565b90505b92915050565b6000612aa083670de0b6b3a7640000846137f6565b6000612aa083836138fb565b60006018826101000151901c61ffff16612710612aa391906143b6565b60006028826101000151901c61ffff16612710612aa391906143b6565b610100820151600090819060411c60011615612b2957612b248585612f10565b612b33565b612b3385856133fd565b905080612b44576000915050612671565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b158015612bcd57600080fd5b505afa158015612be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c059190613d73565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810188905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015612c9157600080fd5b505afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc99190613c7f565b73ffffffffffffffffffffffffffffffffffffffff1663f033b3b488612cfb89610100015161ffff60089190911c1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015260440160206040518083038186803b158015612d4f57600080fd5b505afa158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190613d73565b90508015612d9c57612d99818361439e565b91505b81851415612daf57829350505050612671565b600060016040517fc55f571c000000000000000000000000000000000000000000000000000000008152600481018a90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c55f571c9060240160206040518083038186803b158015612e3957600080fd5b505afa158015612e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e719190613cb9565b6003811115612e8257612e82614494565b14612e9557612e9087612aca565b612e9e565b612e9e87612ae7565b905080612eb2576000945050505050612671565b6000612ebf8588866137f6565b9050816127101415612ed75794506126719350505050565b612f0381612ef189612eeb866127106143b6565b886137f6565b612efb908561439e565b6127106137f6565b9998505050505050505050565b6040517fd175415300000000000000000000000000000000000000000000000000000000815260048101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d17541539060240160006040518083038186803b158015612f9b57600080fd5b505afa158015612faf573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612ff59190810190613bc6565b905060008060005b83518110156133d957838181518110613018576130186144c3565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16635de60314886040518263ffffffff1660e01b815260040161305a91815260200190565b60206040518083038186803b15801561307257600080fd5b505afa158015613086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130aa9190613d73565b6130b4908461439e565b925060008482815181106130ca576130ca6144c3565b6020908102919091018101519088015188516040517fc99d3e83000000000000000000000000000000000000000000000000000000008152600481018c90526024810192909252604482015273ffffffffffffffffffffffffffffffffffffffff9091169063c99d3e839060640160206040518083038186803b15801561315057600080fd5b505afa158015613164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131889190613d73565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018a905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561321457600080fd5b505afa158015613228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324c9190613c7f565b73ffffffffffffffffffffffffffffffffffffffff16633732d12c8a8a6020015189878151811061327f5761327f6144c3565b60200260200101516040518463ffffffff1660e01b81526004016132cc93929190928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b60206040518083038186803b1580156132e457600080fd5b505afa1580156132f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331c9190613d73565b905081156133b55780156133af576040517ff48cc10100000000000000000000000000000000000000000000000000000000815260048101829052600160248201526133aa90839073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044016107ef565b6133b8565b816133b8565b60005b6133c2908561439e565b9350505080806133d1906143fd565b915050612ffd565b508082106133f0576133eb81836143b6565b6133f3565b60005b9695505050505050565b6000828152600160205260408120548061341b576000915050612aa3565b6000848152600360209081526040808320865184529091528082205490517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156134bc57600080fd5b505afa1580156134d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f49190613c7f565b60208601516000546040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690635578dfd79060640160206040518083038186803b15801561357457600080fd5b505afa158015613588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ac9190613d73565b6135b691906143b6565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810187905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561364257600080fd5b505afa158015613656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367a9190613c7f565b60208601516000546040517f3732d12c000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690633732d12c9060640160206040518083038186803b1580156136fa57600080fd5b505afa15801561370e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137329190613d73565b9050600082156137cd5781156137c7576040517ff48cc10100000000000000000000000000000000000000000000000000000000815260048101839052600160248201526137c290849073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044016107ef565b6137d0565b826137d0565b60005b90508084106137e8576137e381856143b6565b6137eb565b60005b979650505050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561384f5783828161384557613845614465565b0492505050612671565b838110613892576040517f773cc18c00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044016104c4565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848609848602925082811083820303915050670de0b6b3a76400008110613976576040517fd31b3402000000000000000000000000000000000000000000000000000000008152600481018290526024016104c4565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826139b05780670de0b6b3a7640000850401945050505050612aa3565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082601f830112613a1f57600080fd5b8135613a32613a2d82614358565b614309565b818152846020838601011115613a4757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613a7557600080fd5b8151613a83613a2d82614358565b818152846020838601011115613a9857600080fd5b613aa98260208301602087016143cd565b949350505050565b8051613abc81614521565b919050565b600080600080600080600060e0888a031215613adc57600080fd5b8735613ae781614521565b96506020880135955060408801359450606088013593506080880135613b0c81614521565b925060a088013567ffffffffffffffff80821115613b2957600080fd5b613b358b838c01613a0e565b935060c08a0135915080821115613b4b57600080fd5b50613b588a828b01613a0e565b91505092959891949750929550565b600080600080600080600060e0888a031215613b8257600080fd5b8735613b8d81614521565b96506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115613b2957600080fd5b60006020808385031215613bd957600080fd5b825167ffffffffffffffff80821115613bf157600080fd5b818501915085601f830112613c0557600080fd5b815181811115613c1757613c176144f2565b8060051b9150613c28848301614309565b8181528481019084860184860187018a1015613c4357600080fd5b600095505b83861015613c725780519450613c5d85614521565b84835260019590950194918601918601613c48565b5098975050505050505050565b600060208284031215613c9157600080fd5b815161267181614521565b600060208284031215613cae57600080fd5b813561267181614521565b600060208284031215613ccb57600080fd5b81516004811061267157600080fd5b60006101208284031215613ced57600080fd5b613cf56142df565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152613d4160e08401613ab1565b60e0820152610100928301519281019290925250919050565b600060208284031215613d6c57600080fd5b5035919050565b600060208284031215613d8557600080fd5b5051919050565b60008060008060808587031215613da257600080fd5b84519350602085015167ffffffffffffffff80821115613dc157600080fd5b613dcd88838901613a64565b945060408701519150613ddf82614521565b606087015191935080821115613df457600080fd5b50613e0187828801613a64565b91505092959194509250565b60008060408385031215613e2057600080fd5b50508035926020909101359150565b60008060008060808587031215613e4557600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613e798160208601602086016143cd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff8083511684526020830151602085015260408301516040850152606083015160608501528060808401511660808501525060a082015160e060a0850152613f0c60e0850182613e61565b905060c083015184820360c0860152613f258282613e61565b95945050505050565b6020815273ffffffffffffffffffffffffffffffffffffffff8251166020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a0830151613fa060c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c08301516101008060e0850152613fbd610120850183613e61565b915060e08501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301828601526133f38382613e61565b60208152600073ffffffffffffffffffffffffffffffffffffffff8084511660208401526020840151604084015260408401516060840152606084015160808401528060808501511660a08401525060a083015160e060c0840152614060610100840182613e61565b905060c08401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160e0850152613f258282613e61565b6101208101612aa38284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b610140810161418f8285805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b826101208301529392505050565b60006101606142178387805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b84610120840152806101408401526133f381840185613e61565b60006101806142ab8388805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b8561012084015284610140840152806101608401526137eb81840185613e61565b602081526000612aa06020830184613eab565b604051610120810167ffffffffffffffff81118282101715614303576143036144f2565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614350576143506144f2565b604052919050565b600067ffffffffffffffff821115614372576143726144f2565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082198211156143b1576143b1614436565b500190565b6000828210156143c8576143c8614436565b500390565b60005b838110156143e85781810151838201526020016143d0565b838111156143f7576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561442f5761442f614436565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461454357600080fd5b5056fea26469706673582212206682fa4c89d0b50566396db2ff8959b6ebdf401dc63c65e0c7f17a56b72ff1a864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80639cc7f708116100cd578063ddeae03311610081578063e7c8e3e311610066578063e7c8e3e31461038e578063f45d0bc6146103ae578063f548c86f146103ce57600080fd5b8063ddeae03314610366578063ddfd414a1461037b57600080fd5b8063c41c2f24116100b2578063c41c2f24146102ed578063d3419bf314610314578063dcc3041b1461033b57600080fd5b80639cc7f708146102ba578063c13d5070146102da57600080fd5b8063557e7155116101245780636bb6a5ad116101095780636bb6a5ad1461025e5780638b79543c146102715780639225bf1a1461029857600080fd5b8063557e7155146101eb578063619306301461023757600080fd5b8063115cdd8e146101565780631837d6e31461019457806329c705c7146101b55780634d9cd5ac146101d8575b600080fd5b610181610164366004613e0d565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101a76101a2366004613e2f565b6103e1565b60405161018b929190614115565b6101c86101c3366004613b67565b610bae565b60405161018b9493929190614231565b6101a76101e6366004613e2f565b61137f565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018b565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b61018161026c366004613d5a565b611b43565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b6102ab6102a6366004613ac1565b611d15565b60405161018b9392919061419d565b6101816102c8366004613d5a565b60016020526000908152604090205481565b6101816102e8366004613d5a565b6125a1565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b610181610349366004613e0d565b600360209081526000928352604080842090915290825290205481565b610379610374366004613c9c565b612678565b005b610181610389366004613d5a565b61273f565b6103a161039c366004613e0d565b61280f565b60405161018b919061409b565b6000546102129073ffffffffffffffffffffffffffffffffffffffff1681565b6101816103dc366004613e0d565b6129e8565b61044660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146104cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064015b60405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190613cda565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018890529092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190613c7f565b60208301516000546040517f3732d12c000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690633732d12c9060640160206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190613d73565b841461076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307834323a20554e45585045435445445f43555252454e43590000000000000060448201526064016104c4565b8315610849576040517ff48cc101000000000000000000000000000000000000000000000000000000008152600481018590526001602482015261084490869073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044015b60206040518083038186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190613d73565b612aa9565b61084b565b845b6000878152600260209081526040808320868301518452909152908190205490517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101899052919250907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b9190613c7f565b60208401516000546040517f5172a2bf000000000000000000000000000000000000000000000000000000008152600481018b9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690635172a2bf9060640160206040518083038186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190613d73565b6109ed91906143b6565b811115610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307834333a204e4f545f414c4c4f57454400000000000000000000000000000060448201526064016104c4565b600086815260016020526040902054811115610ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307834343a20494e53554646494349454e545f46554e4453000000000000000060448201526064016104c4565b80831115610b38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307834353a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b6000868152600260209081526040808320858301518452909152902054610b6090829061439e565b6000878152600260209081526040808320868301518452825280832093909355888252600190522054610b949082906143b6565b600096875260016020526040909620959095559492505050565b610c1360405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008054819060609073ffffffffffffffffffffffffffffffffffffffff163314610c9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190613cda565b8051909450610dc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307833613a204e4f545f464f554e44000000000000000000000000000000000060448201526064016104c4565b61010084015160381c600116610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f307833623a20504155534544000000000000000000000000000000000000000060448201526064016104c4565b61010084015160009060421c600116610f855761010085015160441c73ffffffffffffffffffffffffffffffffffffffff1663b64a835b6040518060e001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020018860a001518152602001610eba89610100015161ffff60089190911c1690565b815260200160018d901c73ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152506040518263ffffffff1660e01b8152600401610f0591906142cc565b60006040518083038186803b158015610f1d57600080fd5b505afa158015610f31573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f779190810190613d8c565b985091955092509050610f90565b8460a0015193508691505b6000610f9c8c86612abe565b90508b15610fce5760008b815260016020526040902054610fbe908d9061439e565b60008c8152600160205260409020555b80156111c0576040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190613c7f565b73ffffffffffffffffffffffffffffffffffffffff1663369e6f348c8360018e811c908f16156110ce8c610100015161ffff60089190911c1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526004810195909552602485019390935273ffffffffffffffffffffffffffffffffffffffff909116604484015260c06064840152600c60c48401527f455448207265636569766564000000000000000000000000000000000000000060e48401521515608483015260a482015261010401602060405180830381600087803b15801561118557600080fd5b505af1158015611199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bd9190613d73565b93505b8884101561122a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307833633a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b73ffffffffffffffffffffffffffffffffffffffff82161561136f5760006040518061010001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018e815260200187815260200186815260200160018d901c73ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018981525090508273ffffffffffffffffffffffffffffffffffffffff16639dd959ac826040518263ffffffff1660e01b81526004016112ed9190613f2e565b600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f15ee90cb2deade4db341563d03958a7ca23fdde537483702ed7a8697ab14599e826040516113659190613f2e565b60405180910390a2505b5050975097509750979350505050565b6113e460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115259190613cda565b61010081015190925060391c60011661159a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f307833653a20504155534544000000000000000000000000000000000000000060448201526064016104c4565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190613c7f565b60208301516000546040517f3732d12c000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690633732d12c9060640160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190613d73565b8414611778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307833663a20554e45585045435445445f43555252454e43590000000000000060448201526064016104c4565b60008681526003602090815260408083208551845290915281205461179e90879061439e565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018990529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190613c7f565b60208401516000546040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018b9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690635578dfd79060640160206040518083038186803b1580156118df57600080fd5b505afa1580156118f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119179190613d73565b811115611980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f307831623a204c494d49545f524541434845440000000000000000000000000060448201526064016104c4565b8415611a0b576040517ff48cc1010000000000000000000000000000000000000000000000000000000081526004810186905260016024820152611a0690879073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044016107ef565b611a0d565b855b600088815260016020526040902054909250821115611a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307834303a20494e53554646494349454e545f46554e4453000000000000000060448201526064016104c4565b81841115611af2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307834313a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b60008781526003602090815260408083208651845282528083208490558983526001909152902054611b259083906143b6565b60009788526001602052604090972096909655909590945092505050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611bc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611c4f57600080fd5b505afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c879190613cda565b610100810151909150603e1c60011615611cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f307834613a204e4f545f414c4c4f57454400000000000000000000000000000060448201526064016104c4565b50506000908152600160205260408120805491905590565b611d7a60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000805460609073ffffffffffffffffffffffffffffffffffffffff163314611dff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b905289917f00000000000000000000000000000000000000000000000000000000000000009091169062fdd58e9060440160206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec79190613d73565b1015611f2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f307834363a20494e53554646494349454e545f544f4b454e530000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611fb657600080fd5b505afa158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190613cda565b610100810151909350603a1c600116612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f307834373a20504155534544000000000000000000000000000000000000000060448201526064016104c4565b61010083015160009060431c6001166121a55761010084015160441c73ffffffffffffffffffffffffffffffffffffffff166331168a2b6040518060e001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020016120d088612aca565b81526020016120de88612ae7565b81526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152506040518263ffffffff1660e01b815260040161212591906142cc565b60006040518083038186803b15801561213d57600080fd5b505afa158015612151573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526121979190810190613d8c565b9750919450925090506121b6565b6121b08a858b612b04565b92508591505b60008a81526001602052604090205483111561222e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f307834383a20494e53554646494349454e545f46554e4453000000000000000060448201526064016104c4565b87831015612298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f307834393a20494e41444551554154450000000000000000000000000000000060448201526064016104c4565b8815612429576040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018b90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561232457600080fd5b505afa158015612338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235c9190613c7f565b6040517f1665bc0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d81166004830152602482018d9052604482018c905260a06064830152600e60a48301527f52656465656d20666f722045544800000000000000000000000000000000000060c4830152600160848301529190911690631665bc0f9060e401600060405180830381600087803b15801561241057600080fd5b505af1158015612424573d6000803e3d6000fd5b505050505b82156124595760008a8152600160205260409020546124499084906143b6565b60008b8152600160205260409020555b73ffffffffffffffffffffffffffffffffffffffff8116156125935760006040518060e001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b81526020018581526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018781525090508173ffffffffffffffffffffffffffffffffffffffff16631f1dfa32826040518263ffffffff1660e01b81526004016125119190613ff7565b600060405180830381600087803b15801561252b57600080fd5b505af115801561253f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167ff11663550d7ff25b1a5d208bdd025d7b1001a24cfcd134ccad18fabe158cdcee826040516125899190613ff7565b60405180910390a2505b509750975097945050505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b15801561262d57600080fd5b505afa158015612641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126659190613cda565b90506126718382612f10565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16156126f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f307834623a20414c52454144595f434c41494d4544000000000000000000000060448201526064016104c4565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b1580156127cb57600080fd5b505afa1580156127df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128039190613cda565b905061267183826133fd565b61287460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146128f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307833613a20554e415554484f52495a4544000000000000000000000000000060448201526064016104c4565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561297c57600080fd5b505afa158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b49190613cda565b6000848152600160205260409020549091506129d190839061439e565b600093845260016020526040909320929092555090565b6000612aa0837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343a266c2866040518263ffffffff1660e01b8152600401612a4991815260200190565b6101206040518083038186803b158015612a6257600080fd5b505afa158015612a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9a9190613cda565b84612b04565b90505b92915050565b6000612aa083670de0b6b3a7640000846137f6565b6000612aa083836138fb565b60006018826101000151901c61ffff16612710612aa391906143b6565b60006028826101000151901c61ffff16612710612aa391906143b6565b610100820151600090819060411c60011615612b2957612b248585612f10565b612b33565b612b3385856133fd565b905080612b44576000915050612671565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b158015612bcd57600080fd5b505afa158015612be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c059190613d73565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810188905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015612c9157600080fd5b505afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc99190613c7f565b73ffffffffffffffffffffffffffffffffffffffff1663f033b3b488612cfb89610100015161ffff60089190911c1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015260440160206040518083038186803b158015612d4f57600080fd5b505afa158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190613d73565b90508015612d9c57612d99818361439e565b91505b81851415612daf57829350505050612671565b600060016040517fc55f571c000000000000000000000000000000000000000000000000000000008152600481018a90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c55f571c9060240160206040518083038186803b158015612e3957600080fd5b505afa158015612e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e719190613cb9565b6003811115612e8257612e82614494565b14612e9557612e9087612aca565b612e9e565b612e9e87612ae7565b905080612eb2576000945050505050612671565b6000612ebf8588866137f6565b9050816127101415612ed75794506126719350505050565b612f0381612ef189612eeb866127106143b6565b886137f6565b612efb908561439e565b6127106137f6565b9998505050505050505050565b6040517fd175415300000000000000000000000000000000000000000000000000000000815260048101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d17541539060240160006040518083038186803b158015612f9b57600080fd5b505afa158015612faf573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612ff59190810190613bc6565b905060008060005b83518110156133d957838181518110613018576130186144c3565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16635de60314886040518263ffffffff1660e01b815260040161305a91815260200190565b60206040518083038186803b15801561307257600080fd5b505afa158015613086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130aa9190613d73565b6130b4908461439e565b925060008482815181106130ca576130ca6144c3565b6020908102919091018101519088015188516040517fc99d3e83000000000000000000000000000000000000000000000000000000008152600481018c90526024810192909252604482015273ffffffffffffffffffffffffffffffffffffffff9091169063c99d3e839060640160206040518083038186803b15801561315057600080fd5b505afa158015613164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131889190613d73565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018a905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561321457600080fd5b505afa158015613228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324c9190613c7f565b73ffffffffffffffffffffffffffffffffffffffff16633732d12c8a8a6020015189878151811061327f5761327f6144c3565b60200260200101516040518463ffffffff1660e01b81526004016132cc93929190928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b60206040518083038186803b1580156132e457600080fd5b505afa1580156132f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331c9190613d73565b905081156133b55780156133af576040517ff48cc10100000000000000000000000000000000000000000000000000000000815260048101829052600160248201526133aa90839073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044016107ef565b6133b8565b816133b8565b60005b6133c2908561439e565b9350505080806133d1906143fd565b915050612ffd565b508082106133f0576133eb81836143b6565b6133f3565b60005b9695505050505050565b6000828152600160205260408120548061341b576000915050612aa3565b6000848152600360209081526040808320865184529091528082205490517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156134bc57600080fd5b505afa1580156134d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f49190613c7f565b60208601516000546040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690635578dfd79060640160206040518083038186803b15801561357457600080fd5b505afa158015613588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ac9190613d73565b6135b691906143b6565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810187905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561364257600080fd5b505afa158015613656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367a9190613c7f565b60208601516000546040517f3732d12c000000000000000000000000000000000000000000000000000000008152600481018a9052602481019290925273ffffffffffffffffffffffffffffffffffffffff90811660448301529190911690633732d12c9060640160206040518083038186803b1580156136fa57600080fd5b505afa15801561370e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137329190613d73565b9050600082156137cd5781156137c7576040517ff48cc10100000000000000000000000000000000000000000000000000000000815260048101839052600160248201526137c290849073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f48cc101906044016107ef565b6137d0565b826137d0565b60005b90508084106137e8576137e381856143b6565b6137eb565b60005b979650505050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561384f5783828161384557613845614465565b0492505050612671565b838110613892576040517f773cc18c00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044016104c4565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848609848602925082811083820303915050670de0b6b3a76400008110613976576040517fd31b3402000000000000000000000000000000000000000000000000000000008152600481018290526024016104c4565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826139b05780670de0b6b3a7640000850401945050505050612aa3565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082601f830112613a1f57600080fd5b8135613a32613a2d82614358565b614309565b818152846020838601011115613a4757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613a7557600080fd5b8151613a83613a2d82614358565b818152846020838601011115613a9857600080fd5b613aa98260208301602087016143cd565b949350505050565b8051613abc81614521565b919050565b600080600080600080600060e0888a031215613adc57600080fd5b8735613ae781614521565b96506020880135955060408801359450606088013593506080880135613b0c81614521565b925060a088013567ffffffffffffffff80821115613b2957600080fd5b613b358b838c01613a0e565b935060c08a0135915080821115613b4b57600080fd5b50613b588a828b01613a0e565b91505092959891949750929550565b600080600080600080600060e0888a031215613b8257600080fd5b8735613b8d81614521565b96506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115613b2957600080fd5b60006020808385031215613bd957600080fd5b825167ffffffffffffffff80821115613bf157600080fd5b818501915085601f830112613c0557600080fd5b815181811115613c1757613c176144f2565b8060051b9150613c28848301614309565b8181528481019084860184860187018a1015613c4357600080fd5b600095505b83861015613c725780519450613c5d85614521565b84835260019590950194918601918601613c48565b5098975050505050505050565b600060208284031215613c9157600080fd5b815161267181614521565b600060208284031215613cae57600080fd5b813561267181614521565b600060208284031215613ccb57600080fd5b81516004811061267157600080fd5b60006101208284031215613ced57600080fd5b613cf56142df565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152613d4160e08401613ab1565b60e0820152610100928301519281019290925250919050565b600060208284031215613d6c57600080fd5b5035919050565b600060208284031215613d8557600080fd5b5051919050565b60008060008060808587031215613da257600080fd5b84519350602085015167ffffffffffffffff80821115613dc157600080fd5b613dcd88838901613a64565b945060408701519150613ddf82614521565b606087015191935080821115613df457600080fd5b50613e0187828801613a64565b91505092959194509250565b60008060408385031215613e2057600080fd5b50508035926020909101359150565b60008060008060808587031215613e4557600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613e798160208601602086016143cd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff8083511684526020830151602085015260408301516040850152606083015160608501528060808401511660808501525060a082015160e060a0850152613f0c60e0850182613e61565b905060c083015184820360c0860152613f258282613e61565b95945050505050565b6020815273ffffffffffffffffffffffffffffffffffffffff8251166020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a0830151613fa060c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c08301516101008060e0850152613fbd610120850183613e61565b915060e08501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301828601526133f38382613e61565b60208152600073ffffffffffffffffffffffffffffffffffffffff8084511660208401526020840151604084015260408401516060840152606084015160808401528060808501511660a08401525060a083015160e060c0840152614060610100840182613e61565b905060c08401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160e0850152613f258282613e61565b6101208101612aa38284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b610140810161418f8285805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b826101208301529392505050565b60006101606142178387805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b84610120840152806101408401526133f381840185613e61565b60006101806142ab8388805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b8561012084015284610140840152806101608401526137eb81840185613e61565b602081526000612aa06020830184613eab565b604051610120810167ffffffffffffffff81118282101715614303576143036144f2565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614350576143506144f2565b604052919050565b600067ffffffffffffffff821115614372576143726144f2565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082198211156143b1576143b1614436565b500190565b6000828210156143c8576143c8614436565b500390565b60005b838110156143e85781810151838201526020016143d0565b838111156143f7576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561442f5761442f614436565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461454357600080fd5b5056fea26469706673582212206682fa4c89d0b50566396db2ff8959b6ebdf401dc63c65e0c7f17a56b72ff1a864736f6c63430008060033",
  "devdoc": {
    "details": " A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time. Inherits from: IJBPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.",
    "kind": "dev",
    "methods": {
      "claimableOverflowOf(uint256,uint256)": {
        "details": "If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.",
        "params": {
          "_projectId": "The ID of the project to get a claimable amount for.",
          "_tokenCount": "The number of tokens to make the calculation with. "
        },
        "returns": {
          "_0": "The amount of overflowed ETH that can be claimed."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_fundingCycleStore": "A contract storing all funding cycle configurations.",
          "_prices": "A contract that exposes price feeds.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers.",
          "_tokenStore": "A contract that manages token minting and burning."
        }
      },
      "currentOverflowOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get overflow for."
        },
        "returns": {
          "_0": "The current amount of overflow that project has in this terminal."
        }
      },
      "currentTotalOverflowOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get total overflow for."
        },
        "returns": {
          "_0": "The current total amount of overflow that project has across all terminals."
        }
      },
      "recordAddedBalanceFor(uint256,uint256)": {
        "details": "Only the associated payment terminal can record an added balance.",
        "params": {
          "_amount": "The amount added, in wei.",
          "_projectId": "The ID of the project to which the funds being added belong."
        },
        "returns": {
          "fundingCycle": "The current funding cycle for the project."
        }
      },
      "recordDistributionFor(uint256,uint256,uint256,uint256)": {
        "details": "Only the associated payment terminal can record a distribution.",
        "params": {
          "_amount": "The amount being distributed. Send as wei (18 decimals).",
          "_currency": "The expected currency of the `_amount` being tapped. This must match the project's current funding cycle's currency.",
          "_minReturnedWei": "The minimum number of wei that should be distributed.",
          "_projectId": "The ID of the project that is having funds distributed."
        },
        "returns": {
          "distributedAmount": "The amount distribution.",
          "fundingCycle": "The funding cycle during which the withdrawal was made."
        }
      },
      "recordMigration(uint256)": {
        "params": {
          "_projectId": "The ID of the project being migrated."
        },
        "returns": {
          "balance": "The project's current balance."
        }
      },
      "recordPaymentFrom(address,uint256,uint256,uint256,uint256,string,bytes)": {
        "details": "Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution. Only the associated payment terminal can record a payment.",
        "params": {
          "_amount": "The amount that is being paid.",
          "_delegateMetadata": "Bytes to send along to the delegate, if one is used.",
          "_memo": "A memo that will be included in the published event.",
          "_minReturnedTokens": "The minimum number of tokens expected to be minted in return.",
          "_payer": "The original address that sent the payment to the terminal.",
          "_preferClaimedTokensAndBeneficiary": "Two properties are included in this packed uint256: The first bit contains the flag indicating whether the request prefers to issue tokens claimed as ERC-20s. The remaining bits contains the address that should receive benefits from the payment. This design is necessary two prevent a \"Stack too deep\" compiler error that comes up if the variables are declared seperately.",
          "_projectId": "The ID of the project being paid."
        },
        "returns": {
          "fundingCycle": "The project's funding cycle during which payment was made.",
          "memo": "A memo that should be passed along to the emitted event.",
          "tokenCount": "The number of tokens that were minted.",
          "weight": "The weight according to which new token supply was minted."
        }
      },
      "recordRedemptionFor(address,uint256,uint256,uint256,address,string,bytes)": {
        "details": " Only the associated payment terminal can record a redemption.",
        "params": {
          "_beneficiary": "The address that will benefit from the claimed amount.",
          "_delegateMetadata": "Bytes to send along to the delegate, if one is used.",
          "_holder": "The account that is having its tokens redeemed.",
          "_memo": "A memo to pass along to the emitted event.",
          "_minReturnedWei": "The minimum amount of wei expected in return.",
          "_projectId": "The ID of the project to which the tokens being redeemed belong.",
          "_tokenCount": "The number of tokens to redeemed."
        },
        "returns": {
          "claimAmount": "The amount of wei claimed.",
          "fundingCycle": "The funding cycle during which the redemption was made.",
          "memo": "A memo that should be passed along to the emitted event."
        }
      },
      "recordUsedAllowanceOf(uint256,uint256,uint256,uint256)": {
        "params": {
          "_amount": "The amount of the allowance to use.",
          "_currency": "The currency of the `_amount` value. Must match the funding cycle's currency.",
          "_minReturnedWei": "The amount of wei that is expected to be withdrawn.",
          "_projectId": "The ID of the project to use the allowance of."
        },
        "returns": {
          "fundingCycle": "The funding cycle during which the withdrawal is being made.",
          "withdrawnAmount": "The amount withdrawn."
        }
      }
    },
    "stateVariables": {
      "usedDistributionLimitOf": {
        "details": " Increases as projects use their distribution limit. _projectId The ID of the project to get the used distribution limit of. _configuration The configuration of the during which the disitrution limit applies."
      },
      "usedOverflowAllowanceOf": {
        "details": " Increases as projects use their allowance. _projectId The ID of the project to get the used overflow allowance of. _configuration The configuration of the during which the allowance applies."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "balanceOf(uint256)": {
        "notice": " The amount of ETH that each project has. _projectId The ID of the project to get the balance of."
      },
      "claimFor(address)": {
        "notice": "Allows this store to be claimed by an address so that it recognized the address as its terminal."
      },
      "claimableOverflowOf(uint256,uint256)": {
        "notice": "The amount of overflowed ETH that can be claimed by the specified number of tokens."
      },
      "currentOverflowOf(uint256)": {
        "notice": "Gets the current overflowed amount in this terminal for a specified project."
      },
      "currentTotalOverflowOf(uint256)": {
        "notice": "Gets the current overflowed amount for a specified project across all terminals."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "fundingCycleStore()": {
        "notice": " The contract storing all funding cycle configurations."
      },
      "prices()": {
        "notice": " The contract that exposes price feeds."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "recordAddedBalanceFor(uint256,uint256)": {
        "notice": "Records newly added funds for the project."
      },
      "recordDistributionFor(uint256,uint256,uint256,uint256)": {
        "notice": "Records newly distributed funds for a project."
      },
      "recordMigration(uint256)": {
        "notice": "Records the migration of this terminal to another."
      },
      "recordPaymentFrom(address,uint256,uint256,uint256,uint256,string,bytes)": {
        "notice": "Records newly contributed ETH to a project."
      },
      "recordRedemptionFor(address,uint256,uint256,uint256,address,string,bytes)": {
        "notice": "Records newly redeemed tokens of a project."
      },
      "recordUsedAllowanceOf(uint256,uint256,uint256,uint256)": {
        "notice": " Records newly used allowance funds of a project."
      },
      "terminal()": {
        "notice": "The associated payment terminal for which this contract stores data."
      },
      "tokenStore()": {
        "notice": " The contract that manages token minting and burning."
      },
      "usedDistributionLimitOf(uint256,uint256)": {
        "notice": " The amount that a project has distributed from its limit during the current funding cycle. "
      },
      "usedOverflowAllowanceOf(uint256,uint256)": {
        "notice": " The amount of overflow that a project has used from its allowance during the current funding cycle configuration. "
      }
    },
    "notice": "This contract manages all inflows and outflows of funds into the Juicebox ecosystem.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18776,
        "contract": "contracts/v2/JBETHPaymentTerminalStore.sol:JBETHPaymentTerminalStore",
        "label": "terminal",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IJBTerminal)25094"
      },
      {
        "astId": 18781,
        "contract": "contracts/v2/JBETHPaymentTerminalStore.sol:JBETHPaymentTerminalStore",
        "label": "balanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18788,
        "contract": "contracts/v2/JBETHPaymentTerminalStore.sol:JBETHPaymentTerminalStore",
        "label": "usedOverflowAllowanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 18795,
        "contract": "contracts/v2/JBETHPaymentTerminalStore.sol:JBETHPaymentTerminalStore",
        "label": "usedDistributionLimitOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_contract(IJBTerminal)25094": {
        "encoding": "inplace",
        "label": "contract IJBTerminal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}