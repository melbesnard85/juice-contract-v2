{
  "address": "0x990E0d768240B651760cE07502D89b3DBe7A2EC2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currency",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract AggregatorV3Interface",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "AddFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TARGET_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_base",
          "type": "uint256"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "addFeedFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedDecimalAdjusterFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedFor",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_base",
          "type": "uint256"
        }
      ],
      "name": "priceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e440ef364fa7c6d59aaa13e342ec7e23b780d7d14c3d9ec8d6ffa29790c0663",
  "receipt": {
    "to": null,
    "from": "0x754F37225CE0E30639093Af47C16ef057B544b4f",
    "contractAddress": "0x990E0d768240B651760cE07502D89b3DBe7A2EC2",
    "transactionIndex": 45,
    "gasUsed": "695059",
    "logsBloom": "0x
    "blockHash": "0x19e1359c781150df1de3671ef176655b957b23779c5867c11dfe8a7425c4bc6c",
    "transactionHash": "0x1e440ef364fa7c6d59aaa13e342ec7e23b780d7d14c3d9ec8d6ffa29790c0663",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 9320467,
        "transactionHash": "0x1e440ef364fa7c6d59aaa13e342ec7e23b780d7d14c3d9ec8d6ffa29790c0663",
        "address": "0x990E0d768240B651760cE07502D89b3DBe7A2EC2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000754f37225ce0e30639093af47c16ef057b544b4f"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x19e1359c781150df1de3671ef176655b957b23779c5867c11dfe8a7425c4bc6c"
      }
    ],
    "blockNumber": 9320467,
    "cumulativeGasUsed": "9768812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "096d8193c9ef3fa94853075f8aa2d2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"AddFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TARGET_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"addFeedFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedDecimalAdjusterFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedFor\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"name\":\"priceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addFeedFor(uint256,uint256,address)\":{\"details\":\"Current feeds can't be modified.\",\"params\":{\"_base\":\"The currency that the price feed is based on.\",\"_currency\":\"The currency that the price feed is for.\",\"_feed\":\"The price feed being added.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"priceFor(uint256,uint256)\":{\"params\":{\"_base\":\"The currency to base the price on.\",\"_currency\":\"The currency to get a price for.\"},\"returns\":{\"_0\":\"The price of the currency in terms of the base, with 18 decimals.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"TARGET_DECIMALS()\":{\"notice\":\" The normalized number of decimals each price feed has.\"},\"addFeedFor(uint256,uint256,address)\":{\"notice\":\" Add a price feed for a currency in terms of the provided base currency.\"},\"feedDecimalAdjusterFor(uint256,uint256)\":{\"notice\":\" The number to multiply each price feed by to get to the target decimals. [_currency][_base]\"},\"feedFor(uint256,uint256)\":{\"notice\":\" The available price feeds. [_currency][_base]\"},\"priceFor(uint256,uint256)\":{\"notice\":\" Gets the current price of the provided currency in terms of the provided base currency.\"}},\"notice\":\"Manages and normalizes price feeds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/JBPrices.sol\":\"JBPrices\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/v2/JBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\n\\n/** \\n  @notice Manages and normalizes price feeds.\\n*/\\ncontract JBPrices is IJBPrices, Ownable {\\n  //*********************************************************************//\\n  // ---------------- public constant stored properties ---------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The normalized number of decimals each price feed has.\\n  */\\n  uint256 public constant override TARGET_DECIMALS = 18;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The number to multiply each price feed by to get to the target decimals.\\n\\n    [_currency][_base]\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) public override feedDecimalAdjusterFor;\\n\\n  /** \\n    @notice \\n    The available price feeds.\\n\\n    [_currency][_base]\\n  */\\n  mapping(uint256 => mapping(uint256 => AggregatorV3Interface)) public override feedFor;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n      @notice \\n      Gets the current price of the provided currency in terms of the provided base currency.\\n      \\n      @param _currency The currency to get a price for.\\n      @param _base The currency to base the price on.\\n      \\n      @return The price of the currency in terms of the base, with 18 decimals.\\n    */\\n  function priceFor(uint256 _currency, uint256 _base) external view override returns (uint256) {\\n    // If the currency is the base, return 1 since they are priced the same.\\n    if (_currency == _base) return 10**TARGET_DECIMALS;\\n\\n    // Get a reference to the feed.\\n    AggregatorV3Interface _feed = feedFor[_currency][_base];\\n\\n    // Feed must exist.\\n    require(_feed != AggregatorV3Interface(address(0)), '0x03: NOT_FOUND');\\n\\n    // Get the latest round information. Only need the price is needed.\\n    (, int256 _price, , , ) = _feed.latestRoundData();\\n\\n    // Multiply the price by the decimal adjuster to get the normalized result.\\n    return uint256(_price) * feedDecimalAdjusterFor[_currency][_base];\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Add a price feed for a currency in terms of the provided base currency.\\n\\n    @dev\\n    Current feeds can't be modified.\\n\\n    @param _currency The currency that the price feed is for.\\n    @param _base The currency that the price feed is based on.\\n    @param _feed The price feed being added.\\n  */\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _feed\\n  ) external override onlyOwner {\\n    // There can't already be a feed for the specified currency.\\n    require(feedFor[_currency][_base] == AggregatorV3Interface(address(0)), '0x04: ALREADY_EXISTS');\\n\\n    // Get a reference to the number of decimals the feed uses.\\n    uint256 _decimals = _feed.decimals();\\n\\n    // Decimals should be less than or equal to the target number of decimals.\\n    require(_decimals <= TARGET_DECIMALS, '0x05: BAD_DECIMALS');\\n\\n    // Set the feed.\\n    feedFor[_currency][_base] = _feed;\\n\\n    // Set the decimal adjuster for the currency.\\n    feedDecimalAdjusterFor[_currency][_base] = 10**(TARGET_DECIMALS - _decimals);\\n\\n    emit AddFeed(_currency, _base, _decimals, _feed);\\n  }\\n}\\n\",\"keccak256\":\"0xa8088ced6adcf5bbe9c658ee4d8993093477430d1175166daf83eb66d479e351\",\"license\":\"MIT\"},\"contracts/v2/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(\\n    uint256 indexed currency,\\n    uint256 indexed base,\\n    uint256 decimals,\\n    AggregatorV3Interface feed\\n  );\\n\\n  function TARGET_DECIMALS() external returns (uint256);\\n\\n  function feedDecimalAdjusterFor(uint256 _currency, uint256 _base) external returns (uint256);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\\n\\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x91d4708e7da84113a6ae8be4e9e3e561a653c24e9ff220edddc6075b84ffa874\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b398061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806396364e6d1161005b57806396364e6d14610136578063cd9ab73714610149578063f2fde38b14610174578063f48cc1011461018757600080fd5b806315d63a911461008d578063715018a6146100f85780638670588b146101025780638da5cb5b14610118575b600080fd5b6100ce61009b366004610869565b600260209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61010061019a565b005b61010a601281565b6040519081526020016100ef565b60005473ffffffffffffffffffffffffffffffffffffffff166100ce565b61010061014436600461088b565b61022c565b61010a610157366004610869565b600160209081526000928352604080842090915290825290205481565b610100610182366004610845565b610517565b61010a610195366004610869565b610647565b60005473ffffffffffffffffffffffffffffffffffffffff163314610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61022a60006107b1565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610217565b600083815260026020908152604080832085845290915290205473ffffffffffffffffffffffffffffffffffffffff1615610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f307830343a20414c52454144595f4558495354530000000000000000000000006044820152606401610217565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610914565b60ff1690506012811115610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307830353a204241445f444543494d414c5300000000000000000000000000006044820152606401610217565b6000848152600260209081526040808320868452909152902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610496816012610a9b565b6104a190600a610998565b600085815260016020908152604080832087845282529182902092909255805183815273ffffffffffffffffffffffffffffffffffffffff851692810192909252849186917fa7f60ac66d52296ed468854c6fd74704509964314d1ab0c9ee3e5617d411e8b3910160405180910390a350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610217565b73ffffffffffffffffffffffffffffffffffffffff811661063b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610217565b610644816107b1565b50565b6000818314156106645761065d6012600a610998565b90506107ab565b600083815260026020908152604080832085845290915290205473ffffffffffffffffffffffffffffffffffffffff16806106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307830333a204e4f545f464f554e4400000000000000000000000000000000006044820152606401610217565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561074357600080fd5b505afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b91906108c4565b50505060008781526001602090815260408083208984529091529020549092506107a6915082610a5e565b925050505b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805169ffffffffffffffffffff8116811461084057600080fd5b919050565b60006020828403121561085757600080fd5b813561086281610ae1565b9392505050565b6000806040838503121561087c57600080fd5b50508035926020909101359150565b6000806000606084860312156108a057600080fd5b833592506020840135915060408401356108b981610ae1565b809150509250925092565b600080600080600060a086880312156108dc57600080fd5b6108e586610826565b945060208601519350604086015192506060860151915061090860808701610826565b90509295509295909350565b60006020828403121561092657600080fd5b815160ff8116811461086257600080fd5b600181815b8085111561099057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561097657610976610ab2565b8085161561098357918102915b93841c939080029061093c565b509250929050565b600061086283836000826109ae575060016107ab565b816109bb575060006107ab565b81600181146109d157600281146109db576109f7565b60019150506107ab565b60ff8411156109ec576109ec610ab2565b50506001821b6107ab565b5060208310610133831016604e8410600b8410161715610a1a575081810a6107ab565b610a248383610937565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610a5657610a56610ab2565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9657610a96610ab2565b500290565b600082821015610aad57610aad610ab2565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461064457600080fdfea2646970667358221220aa5576ce2f9c74d070e70f81c6e1dfd46890d02873f3f4ba759e32f644b3b15c64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806396364e6d1161005b57806396364e6d14610136578063cd9ab73714610149578063f2fde38b14610174578063f48cc1011461018757600080fd5b806315d63a911461008d578063715018a6146100f85780638670588b146101025780638da5cb5b14610118575b600080fd5b6100ce61009b366004610869565b600260209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61010061019a565b005b61010a601281565b6040519081526020016100ef565b60005473ffffffffffffffffffffffffffffffffffffffff166100ce565b61010061014436600461088b565b61022c565b61010a610157366004610869565b600160209081526000928352604080842090915290825290205481565b610100610182366004610845565b610517565b61010a610195366004610869565b610647565b60005473ffffffffffffffffffffffffffffffffffffffff163314610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61022a60006107b1565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610217565b600083815260026020908152604080832085845290915290205473ffffffffffffffffffffffffffffffffffffffff1615610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f307830343a20414c52454144595f4558495354530000000000000000000000006044820152606401610217565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610914565b60ff1690506012811115610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f307830353a204241445f444543494d414c5300000000000000000000000000006044820152606401610217565b6000848152600260209081526040808320868452909152902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610496816012610a9b565b6104a190600a610998565b600085815260016020908152604080832087845282529182902092909255805183815273ffffffffffffffffffffffffffffffffffffffff851692810192909252849186917fa7f60ac66d52296ed468854c6fd74704509964314d1ab0c9ee3e5617d411e8b3910160405180910390a350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610217565b73ffffffffffffffffffffffffffffffffffffffff811661063b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610217565b610644816107b1565b50565b6000818314156106645761065d6012600a610998565b90506107ab565b600083815260026020908152604080832085845290915290205473ffffffffffffffffffffffffffffffffffffffff16806106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f307830333a204e4f545f464f554e4400000000000000000000000000000000006044820152606401610217565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561074357600080fd5b505afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b91906108c4565b50505060008781526001602090815260408083208984529091529020549092506107a6915082610a5e565b925050505b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805169ffffffffffffffffffff8116811461084057600080fd5b919050565b60006020828403121561085757600080fd5b813561086281610ae1565b9392505050565b6000806040838503121561087c57600080fd5b50508035926020909101359150565b6000806000606084860312156108a057600080fd5b833592506020840135915060408401356108b981610ae1565b809150509250925092565b600080600080600060a086880312156108dc57600080fd5b6108e586610826565b945060208601519350604086015192506060860151915061090860808701610826565b90509295509295909350565b60006020828403121561092657600080fd5b815160ff8116811461086257600080fd5b600181815b8085111561099057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561097657610976610ab2565b8085161561098357918102915b93841c939080029061093c565b509250929050565b600061086283836000826109ae575060016107ab565b816109bb575060006107ab565b81600181146109d157600281146109db576109f7565b60019150506107ab565b60ff8411156109ec576109ec610ab2565b50506001821b6107ab565b5060208310610133831016604e8410600b8410161715610a1a575081810a6107ab565b610a248383610937565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610a5657610a56610ab2565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9657610a96610ab2565b500290565b600082821015610aad57610aad610ab2565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461064457600080fdfea2646970667358221220aa5576ce2f9c74d070e70f81c6e1dfd46890d02873f3f4ba759e32f644b3b15c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addFeedFor(uint256,uint256,address)": {
        "details": "Current feeds can't be modified.",
        "params": {
          "_base": "The currency that the price feed is based on.",
          "_currency": "The currency that the price feed is for.",
          "_feed": "The price feed being added."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "priceFor(uint256,uint256)": {
        "params": {
          "_base": "The currency to base the price on.",
          "_currency": "The currency to get a price for."
        },
        "returns": {
          "_0": "The price of the currency in terms of the base, with 18 decimals."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "TARGET_DECIMALS()": {
        "notice": " The normalized number of decimals each price feed has."
      },
      "addFeedFor(uint256,uint256,address)": {
        "notice": " Add a price feed for a currency in terms of the provided base currency."
      },
      "feedDecimalAdjusterFor(uint256,uint256)": {
        "notice": " The number to multiply each price feed by to get to the target decimals. [_currency][_base]"
      },
      "feedFor(uint256,uint256)": {
        "notice": " The available price feeds. [_currency][_base]"
      },
      "priceFor(uint256,uint256)": {
        "notice": " Gets the current price of the provided currency in terms of the provided base currency."
      }
    },
    "notice": "Manages and normalizes price feeds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/v2/JBPrices.sol:JBPrices",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21450,
        "contract": "contracts/v2/JBPrices.sol:JBPrices",
        "label": "feedDecimalAdjusterFor",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 21459,
        "contract": "contracts/v2/JBPrices.sol:JBPrices",
        "label": "feedFor",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_contract(AggregatorV3Interface)45))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(AggregatorV3Interface)45)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)45"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_contract(AggregatorV3Interface)45))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => contract AggregatorV3Interface))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_contract(AggregatorV3Interface)45)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}